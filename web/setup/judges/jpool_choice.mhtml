<%args>
	$tourn
	$person
	$jpool_id => undef
	$choice   => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($jpool_id) {
		$m->print('{ "error": true, "message": "No judge pool ID sent"}');
		$m->abort();
	}

	my $jpool = Tab::JPool->retrieve($jpool_id);

	unless ($jpool) {
		$m->print('{ "error": true, "message": "No judge pool found for ID '.$jpool_id.'"}');
		$m->abort();
	}

	my @already = eval {
		return @{$jpool->setting("site_choices")};
	};

	foreach my $all (@already) {
		Tab::debuglog($all->{id}." is named ".$all->{name});
	}

	my %by_id = map {$_->{id} => $_->{name}} @already;

	unless ($by_id{$choice}) {

		my %response = (
			error   => "true",
			message => "That site option does not exist for $choice",
			refresh => 1
		);

    	$m->print(JSON::encode_json(\%response));
		$m->abort();

	}

	my $message = $by_id{$choice}." was removed as a site preference.";

	my @clean;

	foreach my $item (@already) {
		next if $item->{id} eq $choice;
		push @clean, $item;
	}

	$jpool->setting("site_choices", "json", \@clean);

    my %response = (
		error   => 0,
		message => $message
    );

	my $now = DateTime->now();

	$m->comp("/funclib/log.mas",
		type        => 'tabbing',
		category    => $jpool->category->id,
		tourn       => $tourn->id,
		person      => $person->id,
		description => $message
	);

    $m->print(JSON::encode_json(\%response));
	$m->abort();

</%init>

