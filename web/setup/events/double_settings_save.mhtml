<%args>
	$tourn
	$double_entry => undef
	$double_max   => undef
</%args>
<%init>

	use Data::Dumper;

	if ($double_entry eq "max_events" && $double_max < 1) {
		my $err = "You are setting double entry to allow a max of 0 entries.  That means nobody can enter your tournament.  Please try again.";
		$m->redirect("/setup/events/double_entry.mhtml?err=$err");
	} elsif ($double_entry eq "max_events") {
		$tourn->setting("double_max", $double_max);
		$tourn->setting("double_entry", $double_entry);
	} else {
		$tourn->setting("double_max", 0);
		$tourn->setting("double_entry", $double_entry);
	}

	my @patterns = $tourn->patterns;
	my %exists = map {$_->id => $_} @patterns;


	foreach my $pattern ($tourn->patterns) {

		$pattern->name($ARGS{"name_".$pattern->id});
		$pattern->type($ARGS{$pattern->id});
		$ARGS{"max_".$pattern->id} = 0 unless $ARGS{"max_".$pattern->id};
		$ARGS{"max_".$pattern->id} = 0 if $ARGS{$pattern->id} == 2;
		$pattern->max($ARGS{"max_".$pattern->id});

		my %excludeds = eval {
			return %{JSON::decode_json($pattern->exclude)};
		};

		if ($ARGS{$pattern->id."_exclude"}) {
			$excludeds{$ARGS{$pattern->id."_exclude"}} = 1;
		} elsif ($ARGS{$pattern->id."_exclude_same_pattern"}) {
			$excludeds{$ARGS{$pattern->id."_exclude_same_pattern"}} = "same_pattern_only";
		}

		foreach my $exclude (keys %excludeds) {
			unless ($exists{$exclude}) {
				delete $excludeds{$exclude};
			}
		}

		if (keys %excludeds) {
			$pattern->exclude(JSON::encode_json(\%excludeds));
		} else {
			$pattern->exclude("");
		}

		$pattern->update();

	}

	my $msg = "Event double-entry group settings saved";
	$m->redirect("/setup/events/double_entry.mhtml?msg=$msg");

</%init>
