<%args>
	$person
	$tourn
	$tourn_settings
	$event_id => undef
</%args>
<%init>

	my $event = Tab::Event->retrieve($event_id);
	$m->abort() unless $event;
	my %event_settings = $event->all_settings();
	my $now = DateTime->now();

	my @settings = (
		"wsdc_no_rfd",
		"aff_label",
		"neg_label",
		"chair_label",
		"combined_ballots",
		"congress_placard_nologo",
		"congress_placard_noschools",
		"congress_placard_designator",
		"congress_placard_title",
		"congress_seating_entrycodes",
		"congress_seating_entrynames",
		"congress_seating_schoolnames",
		"congress_seating_schoolcodes"
	);

	foreach my $setting (@settings) {

		my $value = $ARGS{$setting};

		if ($setting eq "chair_label") {
			$value = 0 if $value eq "Parli";
			$value = 0 if $value eq "Chair";
		} elsif ($setting eq "aff_label") {
			$value = lc($value);
			$value = ucfirst($value);
			$value = 0 if $value eq "Aff";
		} elsif ($setting eq "neg_label") {
			$value = lc($value);
			$value = ucfirst($value);
			$value = 0 if $value eq "Neg";
		}

		if ($value eq $event_settings{$setting}) {

		} else {

			$value = 0 unless $value;
			my $description = "Setting $setting changed to $value";

			$m->comp("/funclib/log.mas",
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $event->tourn->id,
				person      => $person->id,
				description => $description
			);

			$event->setting($setting, $value);
		}
	}

	my @text_settings = (
		"ballot_rules",
		"ballot_rules_chair",
		"dumb_signature_line",
		"resolution",
		"point_scale",
		"strike_card_message",
		"student_vote_message",
		"registration_notice"
	);


	unless ($event_settings{"big_questions"}) {
		push (@text_settings, "speech_times");
	}

	foreach my $setting (@text_settings) {

		my $value = $m->comp("/funclib/save_editor.mas",
			text => $ARGS{$setting}
		);

		if ($value eq $event_settings{$setting}) {

		} else {

			$value = 0 unless $value;

			my $description;

			if ($value eq "0") {
				$description = "Setting $setting text deleted";
				$event->setting($setting, $value);
			} else {
				$description = "Setting $setting changed to $value";
				$event->setting($setting, "text", $value);
			}

			$m->comp("/funclib/log.mas",
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $event->tourn->id,
				person      => $person->id,
				description => $description
			);
		}
	}

	if ($event->type eq "speech") {

		foreach my $round (sort {$a->name <=> $b->name} $event->rounds) {

			my $setting = "ballot_topics_".$round->id;

			my $value = $m->comp("/funclib/save_editor.mas",
				text => $ARGS{$setting}
			);

			if ($value) {
				$round->setting("ballot_topics", "text", $value);
			} else {
				$round->setting("ballot_topics", 0);
			}

			my $description = "Ballot topics saved for ".$round->realname;

			$m->comp("/funclib/log.mas",
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $event->tourn->id,
				person      => $person->id,
				description => $description
			);
		}
	}

	if ($tourn_settings->{'legion'}) {

		my @categories = (
			"content",
			"speaking",
			"penalties"
		);

		foreach my $category (@categories) {

			my %existing;

			%existing = %{ JSON::decode_json($event->setting($category."_points"))}
				if $event->setting($category."_points");

			my %result;
			my $counter;

			foreach my $key (sort keys %existing, "New") {

				if ($ARGS{$category."_".$key."_text"}) {

					$counter++;

					$result{$counter}{"text"} = $ARGS{$category."_".$key."_text"};
					$result{$counter}{"prepared"} = $ARGS{$category."_".$key."_prepared"};
					$result{$counter}{"assigned"} = $ARGS{$category."_".$key."_assigned"};
					$result{$counter}{"total"} = $ARGS{$category."_".$key."_total"};

				}
			}

			if (keys %result) {

				$event->setting($category."_points", "text", JSON::encode_json(\%result));

			} else {

				$event->setting($category, 0);
			}
		}
	}

	my $bias_default = Tab::TabroomSetting->search(
		tag   => "bias_statement"
	)->first;

	$ARGS{"bias_statement"} = $m->comp(
		"/funclib/save_editor.mas",
		text => $ARGS{"bias_statement"}
	);

	if ($tourn->start->year < "2021") {
		$tourn->setting("bias_saved", 1);
	}

	if ($bias_default->value_text eq $ARGS{"bias_statement"}) {

		$tourn->setting("bias_statement", 0);

	} elsif (not defined $ARGS{"bias_statement"}) {

		$tourn->setting("bias_statement", 0);

	} else {

		$tourn->setting("bias_statement", "text", $ARGS{"bias_statement"});
	}

	my $msg = "Ballot and website rules text saved.";

	$m->redirect("ballots.mhtml?event_id=".$event->id."&msg=$msg");

</%init>
