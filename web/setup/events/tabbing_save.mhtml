<%args>
	$tourn
	$person
	$event_id => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now();

	my $event = Tab::Event->retrieve($event_id);
	$m->abort unless $event;
	my %event_settings = $event->all_settings();

	my @settings = (
		"allow_lowpoints",
		"allow_rank_ties",
		"alternate_tiebreaker",
		"clearing_threshold",
		"comments_plz",
		"hide_panel_decision",
		"honorable_mentions",
		"include_wsdc_reply",
		"flight_offset",
		"prelim_decision_deadline",
		"elim_decision_deadline",
		"advance_overall",
		"mavericks",
		"max_content_points",
		"max_ob_points",
		"max_points",
		"max_poi_points",
		"max_strategy_points",
		"max_style_points",
		"min_content_points",
		"min_ob_points",
		"min_points",
		"min_poi_points",
		"min_strategy_points",
		"min_style_points",
		"no_lpw",
		"number_of_speeches",
		"omit_sweeps",
		"online_ballots",
		"parli_ballot",
		"parli_noautofill",
		"scorer_max",
		"point_increments",
		"points_later",
		"section_sort",
		"no_judge_codes",
		"point_ties",
		"po_protocol",
		"leadership_protocol",
		"final_bowl_protocol",
		"po_contest",
		"default_time",
		"prep_time",
		"rfd_plz",
		"show_averages",
		"show_panel_averages",
		"speaker_max_scores",
		"speaker_min_speeches",
		"speaker_protocol",
		"state_constraint_threshold",
		"student_vote",
		"team_points",
		"team_total_line",
		"top_novice",
		"truncate_fill",
		"student_truncate_fill",
		"student_online_ballots",
		"wsdc_bye_win_average",
		"wsdc_categories",
		"nsda_qual_force",
		"nsda_qual_nohousepilot",
		"nsda_qual_max",
		"nsda_qual_penalty",
		"nsda_qual_percent",
		"start_button",
		"start_button_text"
	);

	foreach my $setting (@settings) {

		my $value = $ARGS{$setting};

		if ($setting eq "start_button" && $value eq "START ROUND") {
			$value = 0;
		}

		unless ($value) {
			if ($setting eq "point_increments") {
				$value = "whole";
			} elsif ($setting eq "min_points") {
				$value = "0";
			} elsif ($setting eq "max_points") {
				$value = "100";
			} elsif ($setting eq "mavericks") {
				$value = "nothing";
			} else {
			}
		}

		if ($value eq $event_settings{$setting}) {

		} else {

			$value = 0 if $value eq "none";
			$value = 0 unless $value;

			my $description = "Setting $setting changed to $value";

			$m->comp("/funclib/log.mas",
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $event->tourn->id,
				person      => $person->id,
				description => $description
			);

			$event->setting($setting, $value);

		}
	}


	if ($ARGS{"wsdc_categories"}) {
		$event->setting("wsdc_subtotal_ballot", 1);
	} else {
		$event->setting("wsdc_subtotal_ballot", $ARGS{"wsdc_subtotal_ballot"});
		$event->setting("team_total_line", 0); #doesn't yet work without the subscores.
	}

	if ($tourn->setting("nsda_district")) {
		if ($ARGS{"quals"} > 0 && $ARGS{"threshold"} > 0) {
			$event->setting("nsda_qual_override", $ARGS{"quals"}.",".$ARGS{"threshold"});
		} else {
			$event->setting("nsda_qual_override", 0);
		}
	}

	my $congress_prelim = $tourn->protocols(
		name => "Congress Prelim"
	)->first;

	my $congress_elim = $tourn->protocols(
		name => "Congress Elim"
	)->first;

	foreach my $protocol ($congress_prelim, $congress_elim) {

		next unless $protocol;
		my @tiebreaks = sort {$a->priority <=> $b->priority} $protocol->tiebreaks();

		if ($ARGS{'student_vote'}) {

			unless (@tiebreaks && $tiebreaks[0]->name eq "student_vote") {

				foreach my $tiebreak (@tiebreaks) {
					$tiebreak->priority($tiebreak->priority + 2);
					$tiebreak->update();
				}

				Tab::Tiebreak->create({
					name          => "student_nominee",
					count         => "previous",
					priority      => 1,
					truncate      => 0,
					multiplier    => 1,
					highlow       => 0,
					highlow_count => 0,
					child         => 0,
					protocol  => $protocol->id
				});

				Tab::Tiebreak->create({
					name          => "student_rank",
					count         => "previous",
					priority      => 2,
					truncate      => 0,
					multiplier    => 1,
					highlow       => 0,
					highlow_count => 0,
					child         => 0,
					protocol  => $protocol->id
				});
			}

		} else {

			if (@tiebreaks && $tiebreaks[0]->name eq "student_vote") {

				foreach my $tiebreak (@tiebreaks) {

					if ($tiebreak->name eq "student_rank" || $tiebreak->name eq "student_vote") {
						$tiebreak->delete();
					} else {
						$tiebreak->priority($tiebreak->priority - 2);
						$tiebreak->update();
					}
				}
			}
		}
	}

	my $msg = "Tabulation settings saved";
	$m->redirect("tabbing.mhtml?event_id=".$event->id."&msg=$msg");

</%init>
