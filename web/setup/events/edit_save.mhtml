<%args>
	$tourn
	$person
	$event_id    => undef
	$name        => undef
	$abbr        => undef
	$fee         => 0
	$level       => undef
	$category_id => undef
	$type        => undef
	$clone_event => undef
</%args>
<%init>

	my $event;
	my $msg;

	my $now = DateTime->now();
	$fee = 0 unless $fee;

	if ($event_id) {

		$event = Tab::Event->retrieve($event_id);

		if ($event && $type ne $event->type) {
			$m->comp("/funclib/log.mas",
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $tourn->id,
				person      => $person->id,
				description => "Event type changed to ".$event->type
			);
		}

		if ($event && $fee ne $event->fee) {
			$m->comp("/funclib/log.mas",
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $tourn->id,
				person      => $person->id,
				description => "Event fee changed to ".$event->fee
			);
		}

		$event->name($name);
		$event->level($level);
		$event->type($type);
		$event->abbr($abbr);
		$event->category($category_id);
		$event->fee($fee);
		$event->update;
		$msg = "Event changes saved";


	} elsif ($name) {

		$event = Tab::Event->create({
			name     => $name,
			type     => $type,
			abbr     => $abbr,
			tourn    => $tourn->id,
			category => $category_id,
			fee      => $fee
		});

		$msg ="Event $name created";

		if ($type eq "congress") {
			$event->setting("code_style", "names");
			$event->setting("allow_rank_ties", 1);
			$event->setting("parli_ballot", 1);
			$event->setting("max_points", 6);
			$event->setting("min_points", 1);
			$event->setting("truncate_fill", 9);
		}
	}

	if ($type eq "congress") {
		if ($event->setting("online_mode") eq "nsda_campus_observers") {
			$event->setting("online_mode", "nsda_campus");
			$msg .= "<br />Online mode changed to NSDA Campus because Observers are not supported with Congress";
		}
	}


	if ($clone_event && $event) {

		my @settings = Tab::EventSetting->search( event => $clone_event);

		my %already_settings = map {$_->tag => $_}
			Tab::EventSetting->search( event => $event->id );

		foreach my $setting (@settings) {
			if ($already_settings{$setting->tag}) {
				$already_settings{$setting->tag}->value($setting->value);
				$already_settings{$setting->tag}->update;
			} else {
				my $stolen = $setting->copy({
					event => $event->id
				});
			}
		}

		my $ce = Tab::Event->retrieve($clone_event);
		$msg .= "<br />Settings from ".$ce->name." cloned";
	}

	$m->abort unless $event;

	my %event_settings = $event->all_settings();

	my @settings = (
		"code_style",
		"code_start",
		"nsda_event_category",
		"usa_wsdc",
		"not_nats",
		"min_entry",
		"max_entry",
		"topic"
	);

	my @text_settings = (
		"description",
		"result_description",
		"bowl_description"
	);

	foreach my $setting (@text_settings) {

		my $value = $m->comp("/funclib/save_editor.mas",
			text => $ARGS{$setting}
		);

		if ($value eq $event_settings{$setting}) {

		} else {

			$value = 0 unless $value;

			my $description;

			if ($value eq "0") {
				$description = "Setting $setting text deleted";
				$event->setting($setting, $value);
			} else {
				$description = "Setting $setting changed to $value";
				$event->setting($setting, "text", $value);
			}

			$m->comp("/funclib/log.mas",
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $event->tourn->id,
				person      => $person->id,
				description => $description
			);
		}
	}


	my $bfm;

	if (
		$ARGS{"code_style"} eq "numbers"
		|| $ARGS{"code_style"} eq "school_numbers"
		|| $ARGS{"code_style"} eq "initials"
	) {
		$event->setting('code_length', "short");
	} else {
		$event->setting('code_length', 0);
	}

	if ($ARGS{'code_style'} ne $event_settings{"code_style"}) {
		$bfm = "Changing the code format here DOES NOT RECODE ENTRIES.  The potential for accidental lost data is too great.  If you wish to re-code the entries to the new format, go to Entries : Data, and select Entry Codes at right";

	}

	foreach my $setting (@settings) {

		my $value = $ARGS{$setting};

		if ($value eq $event_settings{$setting}) {

		} else {

			$value = 0 unless $value;
			my $description = "Setting $setting changed to $value";

			$m->comp("/funclib/log.mas",
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $event->tourn->id,
				person      => $person->id,
				description => $description
			);

			$event->setting($setting, $value);

		}
	}

	# Big Questions ballot
	if ($event_settings{"nsda_event_category"} eq "108") {
		$event->setting('big_questions', 1);
	}

	unless ($event_settings{"aff_label"}) {
		$event->setting("aff_label", "Aff");
	}

	unless ($event_settings{"neg_label"}) {
		$event->setting("neg_label", "Neg");
	}

	$m->redirect("edit.mhtml?event_id=".$event->id."&msg=$msg&err=$bfm");

</%init>
