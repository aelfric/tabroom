<%args>
	$person
	$tourn
	$tourn_settings
</%args>
<%init>

	my ($keys, $event_ref) = $m->comp("/funclib/nsda/events.mas");
	my %events = %{$event_ref};

	my %categories = ();
	my @types = ("congress", "debate", "speech");

	my $district = Tab::District->retrieve($tourn_settings->{"nsda_district"});

	foreach my $type (@types) {

		my $code;
		my $category;

		$code = "IE" if $type eq "speech";
		$code = "DEB" if $type eq "debate";
		$code = "CON" if $type eq "congress";

		$category = Tab::Category->search(
			abbr  => $code,
			tourn => $tourn->id
		)->first;

		$category = Tab::Category->create({
			name  => ucfirst($type),
			abbr  => $code,
			tourn => $tourn->id
		}) unless $category;

		$categories{$type} = $category;

		if ($code eq "IE") {

			$category->setting("judge_per", "5");

			$tourn->setting("disclaimer",
				"text",
				'<p>I certify that we, the coach(es), student(s), administrator(s) directly affiliated with our NSDA chapter, have agreed that the student performance(s) reflect(s) our school standards in terms of subject matter, language, and use of gesture.</p>'
			);

		} elsif ($code eq "CON") {

			$category->setting("judge_per", "6");

		} elsif ($code eq "DEB") {

			$category->setting("judge_per", 2);
		}
	}

	$m->comp("/funclib/district_tiebreakers.mas",
		tourn  => $tourn,
		person => $person
	);

	foreach my $key (keys %events) {


		my $exists = Tab::Event->search(
			tourn => $tourn->id,
			abbr  => $events{$key}{"code"}
		)->first;

		my $category = $categories{$events{$key}{"type"}};
		my $code = $events{$key}{"code"};

		my $type = "debate" if $events{$key}{"type"} eq "debate";
		$type = "speech" if $events{$key}{"type"} eq "speech";
		$type = "congress" 	if $events{$key}{"type"} eq "congress";

		my $event =  Tab::Event->create({
			name     => $events{$key}{"name"},
			abbr     => $events{$key}{"code"},
			type     => $type,
			fee      => 0,
			tourn    => $tourn->id,
			category => $category->id
		});

		if (
			$code eq "PF"
			|| $code eq "DUO"
			|| $code eq "CX"
		) {
			$event->setting("min_entry", 2);
			$event->setting("max_entry", 2);
		} else {
			$event->setting("min_entry", 1);
			$event->setting("max_entry", 1);
		}

		if ($code eq "PF") {
			$event->setting("no_side_constraints", 1);
		}

		if (
			$code eq "DI"
			|| $code eq "DUO"
			|| $code eq "HI"
		) {
			$event->setting("ask_for_titles", 1);
			$event->setting("ask_for_authors", 1);
			$event->setting("ask_for_isbn", 1);
		}

		if ($code eq "POI") {
			$event->setting("ask_for_bibliography", 1);
		}

		if ($code eq "BQ") {
			#Sets up the BQ ballots
			$event->setting("big_questions", 1);
		}

		if ($code eq "OO" || $code eq "INF") {
			$event->setting("ask_for_titles", 1);
			$event->setting("ask_for_topic", 1);
		}

		if ($type eq "debate") {

			$event->setting('school_cap', 4);
			$event->setting("code_style", "numbers");
			$event->setting("code_start", $events{$key}{"startcode"});

		} elsif ($type eq "speech") {

			$event->setting('school_cap', 4);
			$event->setting('default_panel_size', 6);
			$event->setting('max_panel_size', 7);

			if ($tourn_settings->{"nsda_speech_method"}
				&& $tourn_settings->{"nsda_speech_method"} eq "doubledown"
			) {
				$event->setting('min_panel_size', 4);
			} else {
				$event->setting('min_panel_size', 5);
			}

			$event->setting("code_style", "numbers");
			$event->setting("code_start", $events{$key}{"startcode"});

		} elsif ($code eq "SEN") {

			$event->setting('school_cap', 2);
		}

		if ($type eq "congress") {
			$event->setting("code_style", "names");
			$event->setting("allow_rank_ties", 1);
			$event->setting("parli_ballot", 1);
			$event->setting("max_points", 8);
			$event->setting("min_points", 1);
			$event->setting("truncate_fill", 9);
		}

		$event->setting("nsda_event_category", $events{$key}{"points"});
	}

	my @committee = $district->permissions;

	foreach my $committee (@committee) {

		my $exists = Tab::Permission->search(
			tourn  => $tourn->id,
			person => $committee->person->id,
		)->first;

		next if $exists;

		if ($committee->tag eq "chair") {

			Tab::Permission->create({
				tag    => "owner",
				tourn  => $tourn->id,
				person => $committee->person->id,
			});

			Tab::Permission->create({
				tag    => "contact",
				tourn  => $tourn->id,
				person => $committee->person->id
			});

		} else {

			Tab::Permission->create({
				tag    => "tabber",
				tourn  => $tourn->id,
				person => $committee->person->id
			});
		}
	}

	$m->comp("/user/nsda/district_sweepstakes_save.mhtml",
		tourn_id => $tourn->id,
		return   => "yesplz"
	);

	unless (Tab::TournCircuit->search(
			tourn    => $tourn->id,
			circuit  => 83,
			approved => 1
		)
	) {
		Tab::TournCircuit->create({
			tourn    => $tourn->id,
			circuit  => 83,
			approved => 1
		});
	}

	$m->redirect("/setup/events/edit.mhtml?tourn_id=".$tourn->id);

</%init>
