<%args>
	$entry_id  => undef
	$school_id => undef
</%args>
<%init>

	unless ($entry_id && $school_id) {
		$m->comp('/funclib/abort.mas',
			message => "I do not know which entry or school you are altering.  Try again"
		);
	}

	my $msg;
	my $entry = Tab::Entry->retrieve($entry_id);
	my $event = $entry->event;

	if ($school_id && $school_id != $entry->school->id) {
		$entry->school($school_id);
		$entry->update;
		$msg .= "Entry school changed <br />";
	}

	foreach my $student ($entry->students) {
		if (defined $ARGS{$student->id} && ($ARGS{$student->id} != $student->id )) {

			$msg .= $student->first." ".$student->last." swapped out <br />";

			my $es = Tab::EntryStudent->search(
				entry   => $entry->id,
				student => $student->id
			)->first;

			$es->student($ARGS{$student->id});
			$es->update();

			if ($ARGS{$student->id} == 0 ) {
				$es->delete;
			}
		}
	}

	if ($ARGS{"new"}) {

		unless (Tab::EntryStudent->search(
			entry   => $entry->id,
			student => $ARGS{"new"}
		)) {
			Tab::EntryStudent->create({
				entry   => $entry->id,
				student => $ARGS{"new"}
			});
		}

	}

	my $codes = $event->setting("code_style");

	my $err;

	if ( $codes eq "initials"
		|| $codes eq "code_name"
		|| $codes eq "full_initials"
		|| $codes eq "school_names"
		|| $codes eq "school_first_names"
		|| $codes eq "school_last_names"
		|| $codes eq "school_name_only"
		|| $codes eq "names"
		|| $codes eq "names_lastfirst"
		|| $codes eq "last_names") {

		$entry->code($m->comp("/funclib/entry_code.mas", entry => $entry));
	}

	unless (
		$event->type eq "mock_trial"
		|| $event->type eq "wsdc"
	) {

		my $name = $m->comp('/funclib/entry_name.mas',
			entry => $entry,
			full  => 1
		);

		$entry->name($name);
	}

	$entry->setting("tba", 0);
	$entry->update;

	$m->redirect("/register/entry/edit.mhtml?entry_id=$entry_id&msg=$msg");

</%init>
