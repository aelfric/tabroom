<%args>
	$tourn
	$tourn_settings
	$person
	$first             => undef
	$last              => undef
	$middle            => undef
	$chapter_id        => undef
	$manual_chapter_id => undef
	$event_id          => undef
	$phonetic          => undef
	$grad_year         => undef
	$student_id        => undef
	$novice            => 0
	$retired           => 0
	$gender            => undef
    $nsda              => undef
	$coach_points      => 0
	$school_id         => undef
	$entry_id          => undef
	$email             => undef
	$birthdate         => undef
	$race              => undef
</%args>
<%init>

	unless ($first && $last) {
		$m->comp("/funclib/abort.mas",
			message => "No first and last name sent; please hit back and try again"
		);
	}

	my $err;
	my $birth_dt;

	if ($birthdate) {
		$birth_dt = Tab::dateme($birthdate);
	}

	my $student;
	my $school = Tab::School->retrieve($school_id);

	my $changed_chapter;
	if ($manual_chapter_id) {
		$changed_chapter = $manual_chapter_id;
	} elsif ($chapter_id) {
		$changed_chapter = $chapter_id;
	} elsif ($school->chapter) {
		$changed_chapter = $school->chapter->id;
	}

	unless ($student_id) {

		unless ($school) {
			$err = "That school is not entered in your tournament";
			$m->redirect("/register/index.mhtml?err=$err");
		}

		$student = Tab::Student->create({
			first      => $first,
			last       => $last,
			phonetic   => $phonetic,
			grad_year  => $grad_year,
			chapter    => $changed_chapter,
			novice     => $novice,
			retired    => $retired,
			gender     => $gender
		});


	} else  {

		$student = Tab::Student->retrieve($student_id);

		unless ($student) {
			$m->comp("/funclib/abort.mas", message => "No student found for ID $student_id");
		}

		if ($student->first ne $first || $student->last ne $last) {

			my $description = $student->first." ".$student->last." name changed to $first $last.";

    	    my $change = $m->comp("/funclib/log.mas",
    	        tourn       => $tourn->id,
	            type        => "registration",
	            description => $description,
				person      => $person->id
	        );
		}

		$student->first($first);
		$student->middle($middle);
		$student->last($last);
		$student->phonetic($phonetic);
		$student->grad_year($grad_year);
		$student->novice($novice);
		$student->retired($retired);
		$student->gender($gender);
		$student->chapter($changed_chapter);
		$student->update();
	}

	foreach my $tag ("race") {
		if ($ARGS{$tag}) {
			$student->setting('race', $ARGS{$tag});
		} else {
			$student->setting('race', 0);
		}
	}

	if ($birth_dt) {
		$student->setting('birthdate', 'date', $birth_dt);
	} else {
		$student->setting('birthdate', 0);
	}

	my $coach;

	if ($ARGS{"manual_coach_points"}) {
		$coach = $m->comp("/funclib/nsda/user_import.mas", nsda_id => $ARGS{"manual_coach_points"});
	}

	if ($ARGS{"coach_points"} && (not defined $coach)) {
		$coach = $m->comp("/funclib/nsda/user_import.mas", nsda_id => $ARGS{"coach_points"});
	}

	if ($coach) {
		$student->setting("coach_points", $coach->nsda);
	}

	if ($ARGS{"email"} || $person->site_admin) {

		my $student_person = Tab::Person->search(
			email => $ARGS{"email"}
		)->first if $ARGS{"email"};

		if ($student_person) {
			$err .= $m->comp("/funclib/student_link.mas",
				student => $student,
				target  => $student_person,
				person  => $person
			);
		} else {
			$m->comp("/funclib/student_unlink.mas", student => $student);
		}
	}

	if ($nsda && $nsda != $student->nsda) {
		$m->comp("/funclib/nsda/student_link.mas",
			student => $student,
			nsda    => $nsda
		);
	} elsif ($nsda > 0) {
	} else {
		$student->nsda(0);
		$student->update();
	}

	if ($tourn_settings->{"entry_release"} ) {

		my %release_forms = eval {
			return %{JSON::decode_json($school->setting("release_forms"))};
		};

		my $req = Apache2::Request->new($r);

		if ($req) {

			my $upload = $req->upload("entry_release_".$student->id);

			my $filename = $m->comp("/funclib/upload_test.mas", upload => $upload);

			if ($filename) {

				my $filetemp = $upload->tempname();
				system $Tab::s3_cmd." put $filetemp ".$Tab::s3_bucket."/tourns/".$tourn->id."/entry_release/".$school->id."/".$student->id."/".$filename;

				$release_forms{$student->id} = $filename;
				$school->setting(
					"release_forms",
					"text",
					JSON::encode_json(\%release_forms)
				);
			}
		}
	}

	if ($tourn_settings->{"eligibility_upload"} ) {

		my %eligibility_forms = eval {
			return %{JSON::decode_json($school->setting("eligibility_forms"))};
		};

		my $req = Apache2::Request->new($r);

		if ($req) {

			my $upload = $req->upload("eligibility_".$student->id);

			my $filename = $m->comp("/funclib/upload_test.mas", upload => $upload);

			if ($filename) {

				my $filetemp = $upload->tempname;

				system $Tab::s3_cmd." put $filetemp ".$Tab::s3_bucket."/tourns/".$tourn->id."/eligibility/".$school->id."/".$student->id."/".$filename;

				$eligibility_forms{$student->id} = $filename;
				$school->setting(
					"eligibility_forms",
					"text",
					JSON::encode_json(\%eligibility_forms)
				);
			}
		}
	}

	if ($tourn_settings->{"nsda_nats"} || $tourn_settings->{"nsda_ms_nats"}) {

		$m->comp("/funclib/status_check.mas",
			school  => $school,
			student => $student
		);

	  	foreach my $entry ($m->comp(
			"/funclib/student_entries.mas",
			student => $student,
			tourn   => $tourn)
		) {

			unless ($entry->event->setting("usa_wsdc")) {
				my $name = $m->comp("/funclib/entry_name.mas",
					entry => $entry,
					full  => 1
				);
				$entry->name($name);
	            $entry->update;
			}
        }
	}

	my $msg =  "Changes saved to $first $last";

	if ($student_id) {
		$msg = "Changes saved to competitor $first $last.  Entries renamed in this tournament to follow suit.";
		$m->redirect("/register/entry/student_edit.mhtml?student_id=$student_id&entry_id=$entry_id&msg=$msg&err=$err");
	} elsif ($event_id) {
		$m->redirect("/register/school/entry_add.mhtml?school_id=".$school->id."&event_id=$event_id&msg=$msg&err=$err");
	} else {
		$m->redirect("/register/school/entries.mhtml?school_id=".$school->id."&msg=$msg&err=$err");
	}

</%init>

