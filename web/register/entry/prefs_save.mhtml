<%args>
	$tourn
	$entry_id => undef
	$event_id => undef
	$style    => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
	my $now = DateTime->now( time_zone => $tz );

	my $entry = Tab::Entry->retrieve($entry_id);
	my $event = $entry->event;
	my $category = $event->category;

	my $prefs            = $category->setting("prefs");
	my $rounds_per       = $category->setting("rounds_per");
	my $side_based       = $category->setting("side_based_prefs");

	my %tier_by_name = ();

	if ($prefs eq "tiered"
		|| $prefs eq "tiered_round"
		|| $prefs eq "caps"
	) {
		foreach my $tier ($category->rating_tiers) {
			$tier_by_name{$tier->name} = $tier->id;
		}
	}

	if ($prefs eq "ordinals") {
		Tab::Entry->set_sql(
			wipe_prefs =>
			"delete from rating where entry = ? and ordinal > 0"
		);
		Tab::Entry->sql_wipe_prefs->execute($entry->id);
	} else {
		Tab::Entry->set_sql(wipe_prefs => "delete from rating where entry = ? and rating_tier > 0");
		Tab::Entry->sql_wipe_prefs->execute($entry->id);
	}

	my @conflicts = Tab::Strike->search(
		entry => $entry->id,
		type => "conflict"
	);

	push @conflicts, Tab::Strike->search(
		school => $entry->school->id,
		type   => "school"
	);

	my %event_struck =
		map {$_->judge->id => 1}
		Tab::Strike->search(type => "event", event => $entry->event->id);

	my %conflicts_by_id = map {$_->judge->id => $_} @conflicts;
	my $school_id = $entry->school->id;

	my @school_conflicts = $m->comp(
		"/funclib/school_conflicts.mas",
		school   => $entry->school,
		category => $category
	);
	my %school_conflicts_by_id = map {$_->judge->id => $_} @school_conflicts;

	my @all_judges;

	if ($category->setting("pref_jpool")) {
		my $jpool = Tab::JPool->retrieve($category->setting("pref_jpool"));
		@all_judges = $m->comp("/funclib/jpool_judges.mas", jpool => $jpool);
	} else {
		@all_judges = $category->judges( active => 1 );
	}

	my %rating_by_judge = ();
	my %ordinal_by_judge = ();
	my %judges_at_rating = ();
	my $total_rounds;

	JUDGE:
	foreach my $judge (@all_judges) {

		next JUDGE if $school_conflicts_by_id{$judge->id};
		next JUDGE if $judge->school->id == $school_id;

		next if $event_struck{$judge->id};

		if ($rounds_per) {
			unless ($ARGS{$judge->id} == 999) {
				$total_rounds += $judge->obligation;
				$total_rounds += $judge->hired;
			}
		} else {
			$total_rounds++;
		}

		next unless $ARGS{$judge->id};

		if ($prefs eq "ordinals") {

			if ($side_based) {

				my $rating = Tab::Rating->create({
					type    => "entry",
					tourn   => $tourn->id,
					judge   => $judge->id,
					entry   => $entry->id,
					ordinal => $ARGS{$judge->id},
					side    => 1,
					entered => $now
				});

				$rating_by_judge{1}{$judge->id} = $rating;
				$ordinal_by_judge{1}{$judge->id} = $ARGS{$judge->id};
				push (@{$judges_at_rating{1}{$ARGS{$judge->id}}}, $judge );

				my $neg = $ARGS{"neg_".$judge->id};
				$neg = $ARGS{$judge->id} unless $neg;

				my $neg_rating = Tab::Rating->create({
					type    => "entry",
					tourn   => $tourn->id,
					judge   => $judge->id,
					entry   => $entry->id,
					ordinal => $neg,
					side    => 2,
					entered => $now
				});

				$rating_by_judge{2}{$judge->id} = $neg_rating;
				$ordinal_by_judge{2}{$judge->id} = $ARGS{$judge->id};
				push (@{$judges_at_rating{2}{$neg}}, $judge );

			} else {

				my $rating = Tab::Rating->create({
					type    => "entry",
					tourn   => $tourn->id,
					judge   => $judge->id,
					entry   => $entry->id,
					ordinal => $ARGS{$judge->id},
					side    => 0,
					entered => $now
				});

				$rating_by_judge{$judge->id} = $rating;
				$ordinal_by_judge{$judge->id} = $ARGS{$judge->id};
				push (@{$judges_at_rating{$ARGS{$judge->id}}}, $judge );
			}

		} else {

			next JUDGE unless $tier_by_name{$ARGS{$judge->id}};

			Tab::Rating->create({
				type        => "entry",
				tourn       => $tourn->id,
				judge       => $judge->id,
				entry       => $entry->id,
				rating_tier => $tier_by_name{$ARGS{$judge->id}},
				entered     => $now
			});
		}
	}

	my $rounds_before;

	if ($prefs eq "ordinals") {

		$total_rounds = scalar @all_judges unless $total_rounds;

		if ($side_based) {

			foreach my $side (1 .. 2) {

				my $rounds_before = 1;
				my $count;

				foreach my $ordinal (sort {$a <=> $b} keys %{$judges_at_rating{$side}} ) {

					next unless $ordinal > 0;
					my $rounds_add;
					my $judge_count;

					foreach my $judge (@{$judges_at_rating{$side}{$ordinal}}) {
						$judge_count++;
						$count++;

						if ($rounds_per) {
							$rounds_add += $judge->obligation;
							$rounds_add += $judge->hired;
						} else {
							$rounds_add++;
						}
					}

					foreach my $judge (@{$judges_at_rating{$side}{$ordinal}}) {
						my $percentile = ($rounds_before / $total_rounds) * 100;
						my $rating = $rating_by_judge{$side}{$judge->id};
						$rating->percentile($percentile);
						$rating->update;
					}

					$rounds_before += $rounds_add;

				}
			}

		} else {

			my $rounds_before = 1;
			my $count;

			foreach my $ordinal (sort {$a <=> $b} keys %judges_at_rating ) {

				next unless $ordinal > 0;
				my $rounds_add;
				my $judge_count;

				foreach my $judge (@{$judges_at_rating{$ordinal}}) {
					$judge_count++;
					$count++;

					if ($rounds_per) {
						$rounds_add += $judge->obligation;
						$rounds_add += $judge->hired;
					} else {
						$rounds_add++;
					}
				}

				foreach my $judge (@{$judges_at_rating{$ordinal}}) {
					my $percentile = ($rounds_before / $total_rounds) * 100;
					my $rating = $rating_by_judge{$judge->id};
					$rating->percentile($percentile);
					$rating->update;
				}

				$rounds_before += $rounds_add;

			}
		}
	}

	my $msg = $entry->code." prefs saved in ".$category->abbr." to $rounds_before rounds";
	$m->redirect("prefs.mhtml?school_id=".$entry->school->id."&entry_id=".$entry_id."&category_id=".$category->id."&style=$style&msg=".$msg);

</%init>

