<%args>
	$tourn
	$tourn_settings
	$person
	$session
	$event_id => 0
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $limit;
	my $namestring;

	if ($event_id) {
		my $event = Tab::Event->retrieve($event_id);
		$namestring = $event->abbr;
		$limit = " and event.id = ".int($event_id);
	} else {
		$limit = " and event.tourn = ".int($tourn->id);
		$namestring = $tourn->name;
	}

	if ($ARGS{"dropped"}) {
		$limit .= " and entry.dropped = 1 ";
	}

	$namestring =~ s/[\W_]//g;

    my $filename = "EntryList-$namestring.csv";
	$m->clear_buffer;
    $r->content_type('application/csv');
    $r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";

    my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select
			entry.id, entry.name, entry.code, entry.active, entry.waitlist, entry.dropped, entry.ada,
			event.abbr,
			school.id, school.code, school.name,
			region.id, region.name, region.code,
			district.id, district.name, district.code,
			chapter.state,
			autoqual.value,
			registered_seed.value,
			pairing_seed.value,
			registered_at.value_date,
			dropped_at.value_date,
			title.value,
			author.value,
			publisher.value,
			publish_date.value,
			publish_isbn.value,
			publish_url.value,
			SUM(student.novice),
			GROUP_CONCAT(CONCAT(student.first,' ',student.last) SEPARATOR ',')

		from (entry, school, event, entry_student es, student)

			left join entry_setting autoqual
				on autoqual.entry = entry.id
				and autoqual.tag = 'autoqual'
			left join entry_setting registered_seed
				on registered_seed.entry = entry.id
				and registered_seed.tag = 'registered_seed'
			left join entry_setting pairing_seed
				on pairing_seed.entry = entry.id
				and pairing_seed.tag = 'pairing_seed'
			left join entry_setting registered_at
				on registered_at.entry = entry.id
				and registered_at.tag = 'registered_at'
			left join entry_setting dropped_at
				on dropped_at.entry = entry.id
				and dropped_at.tag = 'dropped_at'
			left join entry_setting title
				on title.entry = entry.id
				and title.tag = 'title'
			left join entry_setting author
				on author.entry = entry.id
				and author.tag = 'author'
			left join entry_setting publisher
				on publisher.entry = entry.id
				and publisher.tag = 'publisher'
			left join entry_setting publish_date
				on publish_date.entry = entry.id
				and publish_date.tag = 'publish_date'
			left join entry_setting publish_isbn
				on publish_isbn.entry = entry.id
				and publish_isbn.tag = 'publish_isbn'
			left join entry_setting publish_url
				on publish_url.entry = entry.id
				and publish_url.tag = 'publish_url'

			left join region on school.region = region.id
			left join district on school.district = district.id
			left join chapter on school.chapter = chapter.id

		where entry.event = event.id
			and entry.unconfirmed = 0
			and entry.school = school.id
			and entry.id = es.entry
			and es.student = student.id
			$limit

		group by entry.id
		order by event.abbr, entry.code, entry.name
	");

	$m->print("\"Event\",");
	$m->print("\"Code\",");
	$m->print("\"Name\",");
	$m->print("\"Waitlist\",");
	$m->print("\"Dropped\",");
	if ($tourn_settings->{"ncfl"}) {
		$m->print("\"DioCode\",");
		$m->print("\"Diocese\",");
	} elsif ($tourn_settings->{"nsda_nats"}) {
		$m->print("\"DistrictCode\",");
		$m->print("\"DistrictName\",");
		$m->print("\"State\",");
		$m->print("\"AutoQual\",")
	} elsif ($tourn_settings->{"regions"}) {
		$m->print("\"Region\",");
	}

	if ($tourn_settings->{"school_codes"}) {
		$m->print("\"Schcode\",");
	}

	$m->print("\"School\",");
	$m->print("\"Novices\",");
	$m->print("\"ADA\",");
	$m->print("\"Registered At\",");
	$m->print("\"Dropped At\",");
	$m->print("\"Piece Title\",");
	$m->print("\"Piece Author\",");
	$m->print("\"Publisher\",");
	$m->print("\"Publication Year\",");
	$m->print("\"ISBN\",");
	$m->print("\"Web published\",");
	$m->print("\"Source URL\",");
	$m->print("\"RegSeed\",");
	$m->print("\"Pairing Seed\",");
	$m->print("\"Individual Students\"");
	$m->print("\n");

	$sth->execute();

	while (
		my (
			$entry_id, $entry_name, $entry_code, $entry_active, $entry_waitlist, $entry_dropped, $entry_ada,
			$event_abbr,
			$school_id, $school_code, $school_name,
			$region_id, $region_name, $region_code,
			$district_id, $district_name, $district_code,
			$chapter_state,
			$autoqual,
			$registered_seed,
			$pairing_seed,
			$registered_at,
			$dropped_at,
			$title,
			$author,
			$publisher,
			$publish_date,
			$publish_isbn,
			$publish_url,
			$novices,
			$students
		) = $sth->fetchrow_array()
	) {

		$m->print('"'.$event_abbr.'",');
		$m->print('"'.$entry_code.'",');
		$m->print('"'.$entry_name.'",');
		$m->print('WL') if $entry_waitlist;
		$m->print(',');
		$m->print('DR') if $entry_dropped;
		$m->print(',');

		if ($tourn_settings->{"ncfl"}) {
			$m->print('"'.$region_code.'",');
			$m->print('"'.$region_name.'",');
		} elsif ($tourn_settings->{"nsda_nats"}) {
			$m->print('"'.$district_code.'",');
			$m->print('"'.$district_name.'",');
			$m->print('"'.$chapter_state.'",');
			$m->print('AQ') if $autoqual;
			$m->print(',');
		} elsif ($tourn_settings->{"regions"}) {
			$m->print('"'.$region_name.'",');
		}

		if ($tourn_settings->{"school_codes"}) {
			$m->print('"'.$school_code.'",');
		}

		$m->print('"'.$school_name.'",');
		$m->print($novices) if $novices;
		$m->print(',');
		$m->print('ADA') if $entry_ada;
		$m->print(',');

		$m->print('"'.$registered_at.'",');
		$m->print('"'.$dropped_at.'",');
		$m->print('"'.$title.'",');
		$m->print('"'.$author.'",');
		$m->print('"'.$publisher.'",');
		$m->print('"'.$publish_date.'",');
		$m->print('"'.$publish_isbn.'",');
		$m->print('"'.$publish_url.'",');
		$m->print('"'.$registered_seed.'",');
		$m->print('"'.$pairing_seed.'",');
		$m->print($students);
		$m->print("\n");
	}

	$sth->finish();
	$m->flush_buffer();
	$m->abort();

</%init>

