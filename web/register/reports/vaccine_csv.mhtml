<%args>
	$tourn
	$perms
	$person
	$tourn_settings
	$person_settings
	$mode => "report"
</%args>
<%init>

	unless ($tourn_settings->{"vaccines"}) {
		$m->comp("/funclib/abort.mas",
			message => "VaccineCheck is not enabled for this tournament"
		);
	};

	unless ($perms && $perms->{"owner"} && $tourn_settings->{"vaccines"}) {
		$m->comp("/funclib/abort.mas",
			message => "VaccineCheck access is reserved to tournament owners"
		);
	}

	my $dbh = Tab::DBI->db_Main();

	my $fix_sth = $dbh->prepare("
		update
			person, student, entry, entry_student es, school

		SET person.nsda = student.nsda
		WHERE (person.nsda = 0 OR person.nsda is NULL)
			AND person.id = student.person
			AND student.nsda != 0
			AND student.nsda IS NOT NULL
			AND student.id = es.student
			AND es.entry = entry.id
			AND entry.school = school.id
			and school.tourn = ?
	");

	$fix_sth->execute($tourn->id);
	$fix_sth->finish();

	my $tag = "vaccine_".$tourn->id;

	my $status = "and (entry.active = 1 OR entry.dropped = 1)";

	if ($ARGS{"rejects"}) {
		$status = "
			and exists (
				select rb.id
				from entry_setting rb
				where rb.entry = entry.id
				and rb.tag = 'rejected_by'
			)

			and not exists (
				select other.id
					from entry other, entry_student eso, event oe
				where other.active = 1
					and other.id = eso.entry
					and eso.student = student.id
					and other.event = oe.id
					and oe.tourn = school.tourn
			)
		";
	}

	if ($tourn_settings->{"ncfl"}) { 
		$status = "and entry.active = 1";
	
		if ($ARGS{"rejects"}) {
			$status = "and entry.dropped = 1";
		}
	}

	my $entry_sth = $dbh->prepare("
		select
			entry.id entry, entry.code, event.abbr,
			CONCAT('S',student.id) as id, student.first as altfirst, student.middle as altmiddle, student.last as altlast, student.nsda snsda,
			entry.active, entry.dropped,
			accepted_at.value_date accepted_at,
			'Entry' as type,
			school.name schoolname, school.state, chapter.country,
			district.location dstate,
			person.id person, person.first, person.middle, person.last, person.email, person.phone, person.nsda nsda,
			vaccine.value vaccine

		from (school, entry, entry_student es, student, chapter)

			left join person on student.person = person.id
			left join event on event.id = entry.event
			left join person_setting vaccine on vaccine.person = person.id and vaccine.tag = ?
			left join district on district.id = chapter.district
			left join entry_setting accepted_at on accepted_at.entry = entry.id and accepted_at.tag = 'accepted_at'

		where school.tourn = ?
			and school.id = entry.school
			and entry.id = es.entry
			and es.student = student.id
			$status
			and student.chapter = chapter.id
		group by person.id, student.id
	");

	$entry_sth->execute($tag, $tourn->id);

	my $judge_sth = $dbh->prepare("
		select
			judge.id judge, judge.code, category.abbr, 'Judge' as type,
			CONCAT('j',judge.id) as id, judge.first as altfirst, judge.middle as altmiddle, judge.last as altlast,
			school.name schoolname, school.state, chapter.country,
			district.location dstate,
			person.id person, person.first, person.middle, person.last, person.email, person.phone, person.nsda nsda,
			vaccine.value vaccine,
			registered_by.timestamp registered,
			nsda.timestamp nsda_timestamp

		from (category, judge)

			left join person on judge.person = person.id
			left join school on school.id = judge.school
			left join chapter on school.chapter = chapter.id
			left join district on district.id = chapter.district
			left join person_setting vaccine on vaccine.person = person.id and vaccine.tag = ?
			left join judge_setting registered_by on registered_by.judge = judge.id and registered_by.tag = 'registered_by'
			left join judge_setting nsda on nsda.judge = judge.id and nsda.tag = 'nsda'

		where category.tourn = ?
			and category.id = judge.category
			and judge.active = 1
	");

	$judge_sth->execute($tag, $tourn->id);

	my $entref = $entry_sth->fetchall_hash();
	my $judref = $judge_sth->fetchall_hash();

	$entry_sth->finish();
	$judge_sth->finish();

	my %entries = map {$_->{"id"} =>  $_} @{$entref};
	my %judges = map {$_->{"id"} =>  $_} @{$judref};
	my %people = (%entries, %judges);

	if ($ARGS{"rejects"}) {
		%people = %entries;
	}

	$dbh();

    my $filename = $tourn->name."-VaccineUpload";
    $filename =~ s/[\W_]//g;

    $filename = $filename.".csv";

    $m->clear_buffer;
    $r->content_type('application/csv');
    $r->headers_out->{'Content-Disposition'} = "filename=$filename";

	if ($ARGS{"report"}) {
		$m->print("REPORT: NO UPLOAD,");
		$m->print("Unit ID,Staff ID,First Name,");
		$m->print("Middle Name,Last Name,Email,");
		$m->print("Phone,Type,Status");
		$m->print("\n");
	} else {
		$m->print("Timestamp,");
		$m->print("Member Type (Required),Unit ID (Optional),Staff ID (Required if Email and Phone are empty),First Name (Required),");
		$m->print("Middle Name,Last Name (Required),Email (Required if Staff ID and Phone are empty),Country Code,");
		$m->print("Phone (Required if Staff ID and Email are empty),Group (Multiple separated by commas),,Birth Date(MM/DD/YYYY),");
		$m->print("\"Vaccination First Date(MM/DD/YYYY)\",\"Vaccination Second Date(MM/DD/YYYY)\",Vaccination Single Date(MM/DD/YYYY),");
		$m->print("\"Vaccination Status (confirmed, unconfirmed, partial dose, pending, boosted)\",");
		$m->print("\"Booster Vaccination Status (confirmed, unconfirmed, pending, eligible)\",Unit Name (Optional),");
		$m->print("Unit Type (Required if Unit Name is set),Unit Role (Required if Unit Name is set)");
		$m->print("\n");
	}

	foreach my $pid (keys %people) {

		if ($people{$pid}{"accepted_at"}) {
			$people{$pid}{"timestamp"} = $people{$pid}{"accepted_at"};
		} elsif ($people{$pid}{"registered"}) {
			$people{$pid}{"timestamp"} = $people{$pid}{"registered"};
		} elsif ($people{$pid}{"nsda_timestamp"}) {
			$people{$pid}{"timestamp"} = $people{$pid}{"nsda_timestamp"};
		}

		$people{$pid}{"sort_timestamp"} = $people{$pid}{"timestamp"};
		$people{$pid}{"sort_timestamp"} =~ s/[\D_]//g;
	}

	foreach my $pid (
		sort {
			$people{$b}{"sort_timestamp"} <=> $people{$a}{"sort_timestamp"}
			|| $people{$a}{"state"} cmp $people{$b}{"state"}
			|| $people{$a}{"schoolname"} cmp $people{$b}{"schoolname"}
			|| $people{$a}{"type"} cmp $people{$b}{"type"}
			|| $people{$a}{"abbr"} cmp $people{$b}{"abbr"}
			|| $people{$a}{"last"} cmp $people{$b}{"last"}
		} keys %people
	) {

		$people{$pid}{"phone"} =~ s/^1//g;
		$people{$pid}{"phone"} =~ s/[\D_]//g;

		if ($people{$pid}{"dropped"}) {
			$people{$pid}{"type"} = "Drop";
		}

		if ($people{$pid}{"abbr"} eq "ATTN") {
			$people{$pid}{"type"} = "Attendee";
		}

		unless ($people{$pid}{"state"}) {

			if ($people{$pid}{"dstate"} ne "INT") {
				$people{$pid}{"state"} = $people{$pid}{"dstate"};
				$people{$pid}{"country"} = "US";
			}
		}

		unless ($people{$pid}{"state"} || $people{$pid}{"country"}) {
			$people{$pid}{"country"} = "CN";
		}

		$people{$pid}{"schoolname"} =~ s/[^\w\s]//g;
		my $school_string = $people{$pid}{"schoolname"}."-";

		if ($people{$pid}{"state"}) {
			$school_string .= "US-".$people{$pid}{"state"};
		} elsif ($people{$pid}{"country"} eq "US") {
			$school_string .= "US";
		} else {
			$school_string .= "INT-".$people{$pid}{"country"};
		}

		next unless ($people{$pid}{"person"});

		$m->print($people{$pid}{"timestamp"}.",");

		unless ($ARGS{"report"}) {
			$m->print("_guest");
			$m->print(",");
		}
		$m->print("$school_string,");

		if ($people{$pid}{"nsda"}) {
			$m->print($people{$pid}{"nsda"});
		} else {
			$m->print("TR".$people{$pid}{"person"});
		}

		$m->print(",");
		$m->print('"');

		if ($people{$pid}{"first"}) {
			$m->print($people{$pid}{"first"});
		} else {
			$m->print($people{$pid}{"altfirst"});
		}

		$m->print('"');
		$m->print(",");
		$m->print('"');

		if ($people{$pid}{"middle"}) {
			$m->print($people{$pid}{"middle"});
		} else {
			$m->print($people{$pid}{"altmiddle"});
		}

		$m->print('"');
		$m->print(",");
		$m->print('"');

		if ($people{$pid}{"last"}) {
			$m->print($people{$pid}{"last"});
		} else {
			$m->print($people{$pid}{"altlast"});
		}

		$m->print('"');
		$m->print(",");
		$m->print('"');
		$m->print($people{$pid}{"email"});
		$m->print('"');
		$m->print(",");

		unless ($ARGS{"report"}) {
			$m->print("1");
			$m->print(",");
		}

#			if ($people{$pid}{"country"} eq "CN") {
#				$m->print("86");
#			} elsif ($people{$pid}{"country"} eq "TW") {
#				$m->print("886");
#			} elsif ($people{$pid}{"country"} eq "KR") {
#				$m->print("82");
#			} elsif ($people{$pid}{"country"} eq "JP") {
#				$m->print("81");
#			} else {
#				$m->print("1");
#			}

		$m->print('"');
		$m->print($people{$pid}{"phone"});
		$m->print('"');
		$m->print(",");
		$m->print($people{$pid}{"type"});

		#the dumbest

		if ($ARGS{"report"}) {
			$m->print(",");
			$m->print($people{$pid}{"vaccine"});
			$m->print(",,,,,,,,,");
		} else {
			$m->print(",,,,,,,,,,");
		}
		$m->print("\n");
	}

	$m->flush_buffer;
	$m->abort();

</%init>
