<%args>
	$trigger_invoices => undef
	$deadbeats        => undef
	$tourn
	$tourn_settings
	$person
</%args>
<%init>

	my $whoami = "deadbeats";

	my %category_settings;
	my %event_settings;

	my $dbh = Tab::DBI->db_Main();

	my @categories = $tourn->categories();
	my @events = $tourn->events();

	foreach my $category (@categories) {
		%{$category_settings{$category->id}} = $category->all_settings();
		$category_settings{$category->id}{"shifts"} = $category->shifts();
	}

	foreach my $event (@events) {
		%{$event_settings{$event->id}} = $event->all_settings();
		$event_settings{$event->id}{"fee"} = $event->fee;
	}

	my @entries = $m->comp(
		"/funclib/tourn_entries.mas",
			tourn => $tourn,
			all   => 1
	);

	my %schools;

	foreach my $entry (@entries) {
		push @{$schools{"entries"}{$entry->schoolid}}, $entry;
	}

	my @judges = $m->comp(
		"/funclib/tourn_judges.mas",
			tourn => $tourn,
			all   => 1
	);

	foreach my $judge (@judges) {
		push @{$schools{"judges"}{$judge->schoolid}{$judge->categoryid}}, $judge;
		push @{$schools{"judges"}{$judge->schoolid}{"all"}}, $judge;
	}

	my @fines = $m->comp(
		"/funclib/tourn_fines.mas",
			tourn => $tourn,
			all   => 1
	);

	foreach my $fine (@fines) {
		push @{$schools{"fines"}{$fine->schoolid}}, $fine;
	}

	my @concessions = $tourn->concessions();

	if (@concessions) {

		%{$schools{"orders"}} = $m->comp(
			"/funclib/tourn_purchases.mas",
			tourn => $tourn
		);
	}

	my @hotels = $tourn->hotels;

	my %school_settings = $m->comp(
		"/funclib/school_settings.mas",
		tourn => $tourn
	);


	if (@hotels) {
		%{$tourn_settings->{$tourn->id}{"hotels"}} =
			map {$_->id => $_} @hotels;
	}

	foreach my $school_id (keys %school_settings) {

		if (@hotels) {
			$schools{"hotels"}{$school_id} = $school_settings{$school_id}{"hotel"};
		}

		$schools{"entry_fee_discount"}{$school_id} = $school_settings{$school_id}{"entry_fee_discount"};
		$schools{"all_fee_discount"}{$school_id} = $school_settings{$school_id}{"all_fee_discount"};
		$schools{"concession_fee_discount"}{$school_id} = $school_settings{$school_id}{"concession_fee_discount"};
		$schools{"individuals"}{$school_id} = $school_settings{$school_id}{"individuals"};
	}

	my @hires = $m->comp(
		"/funclib/tourn_hires.mas",
		tourn => $tourn
	);

	foreach my $hire (@hires) {
		push @{$schools{"hires"}{$hire->schoolid}{$hire->categoryid}}, $hire;
		push @{$schools{"hires"}{$hire->schoolid}{"all"}}, $hire;
	}

	my $worlds;
	my %invoiced;

	Tab::EventSetting->set_sql( adjustments => "
        select adjustment.id
        from event, event_setting adjustment
        where event.tourn = ?
        and event.id = adjustment.event
        and adjustment.tag = 'adjust_judges_fees'
	");

	$tourn_settings->{"adjustments"}++ if Tab::EventSetting->search_adjustments($tourn->id);

	if ($tourn_settings->{"nsda_nats"}) {

		my @worlds_events = $tourn->events(type => "wsdc");

		if (@worlds_events) {

			$worlds = shift @worlds_events;

			Tab::Student->columns(TEMP => "schoolid");

			Tab::Student->set_sql(worlds_students =>  "
				select student.*, school.id as schoolid
				from student, entry_student, entry, chapter, school, event, category
				where entry.event = ?
				and entry.id = entry_student.entry
				and entry_student.student = student.id
				and student.chapter = chapter.id
				and chapter.id = school.chapter
				and school.tourn = category.tourn
				and category.id = event.category
				and event.id = entry.event
			");

			foreach my $student (Tab::Student->search_worlds_students($worlds->id)) {
				push @{$schools{"worlds"}{$student->schoolid}}, $student;
			}
		}

		my $invoiced_sth = $dbh->prepare("
			select school.id, invoice.total
				from school, invoice
				where invoice.school = school.id
				and school.tourn = ?
		");

		$invoiced_sth->execute($tourn->id);

		while (
			my ($school_id, $amount) = $invoiced_sth->fetchrow_array()
		) {

			$invoiced{$school_id} += $amount;
		}
	}

	my %school_by_id = map {$_->id => $_} $tourn->schools();

	my %school_data;

    my $school_sth = $dbh->prepare('
        select school.id, school.name, school.state
        from school
        where school.tourn = ?
		and school.chapter > 0
    ');

    $school_sth->execute($tourn->id);

    while (
        my ($school_id, $school_name, $school_state, $contact_name, $contact_email)
            = $school_sth->fetchrow_array()
    ) {

        $school_data{$school_id}{"name"} = $school_name;
        $school_data{$school_id}{"state"} = $school_state;
        $school_data{$school_id}{"short_name"} = Tab::short_name($school_name);
    }

	Tab::SchoolSetting->set_sql( rm_balance => "
		delete from school_setting
		where school = ?
		and tag = 'balance'
	");

	foreach my $school_id (
		sort {$school_data{$a}{"short_name"} cmp $school_data{$b}{"short_name"}}
		keys %school_data
	) {

		my ($total, $feline_ref, $total_ref) =
			$m->comp("/funclib/school_fees.mas",
				school            => $school_by_id{$school_id},
				tourn             => $tourn,
				tourn_settings    => $tourn_settings,
				categories        => \@categories,
				category_settings => \%category_settings,
				events            => \@events,
				concession_array  => \@concessions,
				event_settings    => \%event_settings,
				all               => 1,
				bulk              => 1,
				entries           => $schools{"entries"}{$school_id},
				schools           => \%schools,
				worlds_event      => $worlds
			);

		next if $total == -0;

		$school_data{$school_id}{"total"} = sprintf ("%.2f", $total_ref->{"total_fees"});
		$school_data{$school_id}{"payments"} = $total_ref->{"payments"};
		$school_data{$school_id}{"balance"} = $total;

		if ($tourn_settings->{"nsda_nats"}) {

			$school_data{$school_id}{"invoiced"} =
				sprintf("%.2f", $invoiced{$school_id});

			$school_data{$school_id}{"uninvoiced"} =
				sprintf("%.2f", ($total_ref->{"total_fees"} - $invoiced{$school_id}));

			if ($trigger_invoices && ($school_data{$school_id}{"uninvoiced"} > 0)) {

				eval {
					$m->comp("/funclib/nsda/create_invoice.mas",
						school_id => $school_id,
						person    => $person,
						return    => 1
					);
				};

				Tab::log($person->email." auto-created invoice for school $school_id");
				$m->print("<p>".$person->email." auto-created invoice for school $school_id</p>");
				$m->flush_buffer();

			}
		}

		if ($total > 0) {
			Tab::SchoolSetting->create({
				school => $school_id,
				tag    => 'balance',
				value  => $total
			});

		} else {
			Tab::SchoolSetting->sql_rm_balance->execute($school_id);
		}
	}

	if ($deadbeats) {
		my $msg = "Invoices triggered for all unpaid balances";
		$m->redirect("/register/reports/deadbeats.mhtml?msg=$msg");
	}

	return %school_data;


</%init>
