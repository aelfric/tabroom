<%args>
	$tourn
	$tourn_settings
	$person
	$perms
</%args>
<%init>

	$r->content_type('application/json');
	$m->clear_buffer();

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare('
		select
			event.id, event.name, event.type

		from event
		where event.tourn = ?
			and exists (
				select es.id
				from event_setting es
				where es.tag = "supp"
				and es.event = event.id
			)
	');

	$sth->execute($tourn);
	my $events = $sth->fetchall_hash();
	my $supp_teams = $tourn_settings->{supp_teams};

	my @teams = sort {$supp_teams->{$a}{"code"} cmp $supp_teams->{$b}{"code"}} keys %{$supp_teams};
	my $first_id = shift @teams;
	my $first = $supp_teams->{$first_id};

	my %jpools;
	my %rpools;

	foreach my $eventref (@{$events}) {

		my $event = Tab::Event->retrieve($eventref->{id});
		my @event_settings = $event->settings;

		$event->name($event->name." ".$first->{code});
		$event->abbr($event->abbr." ".$first->{code});
		$event->update();

		foreach my $round ($event->rounds) {

			my $start = $round->timeslot->start;
			$start->set_time_zone($tourn->tz);
			my $day = lc($start->day_abbr);

			if ($day ne "thu" && $day ne "wed") {
				next;
			}

			my $site = $round->site;
			my $jpool = $round->jpools->first;
			my $rpool = $round->rpools->first;

			unless ($jpools{$day}{$site}) {
				$jpools{$day}{$site} = $jpool;
				$jpool->name($jpool->name." ".$first->{label});
				$jpool->update();
			}

			unless ($rpools{$day}{$site}) {
				$rpools{$day}{$site} = $rpool;
				$rpool->name($rpool->name." ".$first->{label});
				$rpool->update();
			}
		}

		foreach my $team_id (@teams) {

			my $team = $supp_teams->{$team_id};
			my $new_event = $event->copy({
				name => $event->name." ".$team->{code},
				abbr => $event->abbr." ".$team->{code},
			});

			foreach my $es (@event_settings) {
				$es->copy({ event => $new_event->id });
			}

			$new_event->setting("presplit", $event->id);

			foreach my $round ($event->rounds) {

				# Which day is the round on
				my $start = $round->timeslot->start;
				$start->set_time_zone($tourn->tz);
				my $day = lc($start->day_abbr);

				if ($day ne "thu" && $day ne "wed") {
					next;
				}

				my $site = $team->{$day."_".$event->type};

				Tab::debuglog("Event ".$event->abbr." type ".$event->type." team ".$team->{code}." day $day site is ".$site);

				my $new_round = $round->copy({
					event => $new_event->id,
					site  => $site,
				});
				my @round_settings = $round->settings;

				foreach my $rs (@round_settings) {
					$rs->copy({ round => $new_round->id });
				}

				$new_round->setting("presplit", $round->id);

				unless ($jpools{$day}{$site}) {

					my $jpool = $round->jpools->first;
					Tab::debuglog("No pool found for site $site and day $day.  Creating one from ".$jpool->name." and appending ".$team->{label});

					my $new_jpool = $jpool->copy({
						name => $jpool->name." ".$team->{label},
						site => $site
					});

					$jpools{$day}{$site} = $new_jpool;
					Tab::debuglog("Site $site and $day is now pool ".$jpools{$day}{$site}." which should be $new_jpool");

					my @jps_settings = $jpool->settings;
					foreach my $jps (@jps_settings) {
						$jps->copy({ jpool => $new_jpool->id });
					}
					$new_jpool->setting("presplit", $jpool->id);
				}

				Tab::JPoolRound->create({
					jpool => $jpools{$day}{$site},
					round => $new_round->id
				});

				unless ($rpools{$day}{$site}) {
					my $rpool = $round->rpools->first;
					my $new_rpool = $rpool->copy({
						name => $rpool->name." ".$team->{label},
					});
					$rpools{$day}{$site} = $new_rpool;
					$new_rpool->setting("presplit", $rpool->id);
				}

				Tab::RPoolRound->create({
					rpool => $rpools{$day}{$site},
					round => $new_round->id
				});
			}
		}
	}

	my $response = ({
		message => "I have split ".scalar @{$events}." between ".((scalar @teams) + 1)." teams.  I might even have done it correctly! ",
		error => \0,
	});

	$m->print(JSON::encode_json($response));
	$m->abort();

</%init>
