<%args>
	$event_id  => undef
	$sort_by   => "Randomly"
	$return    => undef
	$codestart => undef
	$tourn
	$tourn_settings
</%args>
<%init>

	use List::Util 'shuffle';

	$m->abort unless $sort_by;
	$m->abort unless $event_id;

	my $event = Tab::Event->retrieve($event_id);
	my %event_settings = $event->all_settings();

	if ($codestart && $codestart ne $event_settings{"code_start"}) {
		$event->setting('code_start', $codestart);
	}

	my $setting = $event_settings{"code_style"};

	my $prefix;

	if ($setting eq "nsda_nats") {
		$prefix = $event_settings{"nsda_event_code"};
	}

	my @entries = $event->entries( unconfirmed => 0, dropped => 0);

	@entries = shuffle @entries if $sort_by eq "Randomly";

	if ($sort_by eq "RandomSchool") {

		my @schools = $m->comp("/funclib/event_schools.mas", event => $event);

		my %school_rand = map {$_->id => rand(1000)} @schools;

		@entries = shuffle @entries;

		@entries =
			sort {$school_rand{$a->school->id} <=> $school_rand{$b->school->id}}
			@entries;

	}

	@entries = sort {$a->name cmp $b->name} @entries
		if $sort_by eq "Name";

	@entries = sort {$a->school->name cmp $b->school->name} @entries
		if $sort_by eq "School";

	@entries = sort {$a->id <=> $b->id} @entries
		if $sort_by eq "Register";

	if ($sort_by eq "Diocese" || $sort_by eq "Region") {
		@entries =
			sort {$a->school->name cmp $b->school->name}
			@entries;

		@entries =
			sort {$a->school->region->code cmp $b->school->region->code}
			@entries;

		@entries =
			sort {length($a->school->region->code) <=> length($b->school->region->code)}
			@entries;
	}

	if ($setting eq "numbers"
		|| $setting eq "school_number"
		|| $setting eq "nsda_nats"
	) {

		my $dbh = Tab::DBI->db_Main();
		my $sth = $dbh->prepare("
			select
				judge.code, judge.id
			from judge, category
			where judge.category = category.id
				and category.tourn = ?
		");

		$sth->execute($tourn->id);
		my $judges = $sth->fetchall_hash();

		$sth = $dbh->prepare("
			select
				entry.code, entry.id
			from entry, event
			where entry.event = event.id
				and event.tourn = ?
		");

		$sth->execute($tourn->id);
		my $entries = $sth->fetchall_hash();

		my %taken_judge = map {$_->{code} => 1} @{$judges};
		my %taken_entry = map {$_->{code} => 1} @{$entries};
		my %taken_codes = ();

		my %school_codes;

		if ($setting eq "school_number") {

			$sth = $dbh->prepare("
				select
					school.id, school.code
				from school
				where school.tourn = ?
			");

			$sth->execute($tourn->id);
			my $schools = $sth->fetchall_hash();
			%school_codes = map {$_->{id} => $_->{code}} @{$schools};
		}

		if ($setting eq "school_number") {
			foreach my $key (keys %taken_judge, keys %taken_entry) {
				$key =~ s/\D//g;
				$taken_codes{$key}++;
			}
		}

		my $code = $codestart;
		$code =~ s/[\D_]//g;

		my $prefix = $codestart;
		$prefix =~  s/\d//g;

		foreach my $entry (@entries) {

			while ( $taken_codes{$code}
				|| $code =~ m/666$/
				|| $code =~ m/420$/
				|| $code == m/69$/
			) {
				$code++;
			}

			if ($setting eq "school_number") {
				$entry->code($school_codes{$entry->school->id}." ".$code);
			} else {
				$entry->code($prefix.$code);
			}
			$entry->update;
			$code++;
		}

	} elsif ( $event_settings{"usa_wsdc"}  ) {

		my @colors = (
			"red",
			"white",
			"blue",
			"black",
			"orange",
			"violet",
			"gold",
			"green",
			"greenish",
			"yellow",
			"gray",
			"silver",
			"brown",
			"crimson",
			"indigo",
			"teal",
			"navy",
			"pink",
			"tangerine",
			"amaranth",
			"fuschia",
			"rose",
			"sienna",
			"olive",
			"aqua",
			"ecru",
			"burgundy",
			"periwinkle",
			"purple",
		);

		@entries = sort {$a->school->name cmp $b->school->name} @entries;

		my %school_count;

		foreach my $entry (@entries) {
			$school_count{$entry->school->id}++;
		}

		my %taken;

		foreach my $entry (@entries) {

			@colors = shuffle(@colors);

			my $chosen;

			foreach my $color (@colors) {
				next if $taken{$entry->school->id}{$color};
				$chosen = $color;
				last if $chosen;
			}

			if ($school_count{$entry->school->id} < 2) {
				$entry->code($entry->school->name);
			} else {
				$entry->code($entry->school->name." ".$chosen);
			}

			$entry->update();
			$taken{$entry->school->id}{$chosen}++;

		}

	} elsif ($setting eq "prepend_school") {

		foreach my $entry (@entries) {

			my $school_name = $entry->school->name;
			my $new_code = $school_name." ".$entry->code;
			$entry->code($new_code);
			$entry->update();
		}

	} else {

		foreach my $entry (@entries) {
			$entry->code($m->comp(
				"/funclib/entry_code.mas",
				entry => $entry
			));
			$entry->update();
		}
	}

	return if $return;
	my $msg = "Codes for ".$event->name." reshuffled";
	$m->redirect("/register/data/entry_recode.mhtml?msg=$msg");

</%init>
