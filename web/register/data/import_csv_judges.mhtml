<%args>
	$tourn
	$tourn_settings
	$person
	$category_id => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	unless ($category_id) {
		$m->print('<div class="blankfull"><p class="warning">');
		$m->print("You must select an existing judge category to import judges");
		$m->print('</p><p>Hit the Back button and try again</p>');
		$m->abort;
	}

	my $nats = $tourn->setting("nsda_nats");

	my $now = DateTime->now( time_zone => $tz);

	my $category = Tab::Category->retrieve($category_id);

	# Get the upload and create the file handle.
	my $req = Apache2::Request->new($r);
	my @text_handles = $r->upload;
	my $text_file = $req->upload($text_handles[0]);
	my $io = $text_file->io;

	my @judges;

	# Fix line breaks
	my @lines = (<$io>);

    foreach (@lines) {
        $_ =~ s/[\r]+/\n/g;
        $_ =~ s/[\r\n]+/\n/g;
        $_ =~ s/[\n]+/\n/g;
        push @judges, split (/\n/, $_);
    }

	my $skipped;

	my %jpools = map {$_->name => $_}  $category->jpools;
	my %shifts = map {$_->name => $_}  $category->shifts;

	GROUP:
	foreach my $judge (@judges) {

		my ($school_name, $school_code,
			$first, $middle, $last, $tab_rating,
			$obligation, $email, $phone, $notes, $pools,
			$shift1, $shift2, $shift3, $shift4, $parli, $scorer
		) = split(/,/,$judge);

		foreach ($school_name, $school_code,
			$first, $middle, $last,
			$tab_rating, $obligation,
			$email, $phone, $notes, $pools,
			$shift1, $shift2, $shift3, $shift4, $parli, $scorer
		) {
			$_ =~ s/^"//;
			$_ =~ s/"$//g;
			$_ =~ s/^'//;
			$_ =~ s/'$//g;
		}

		$phone =~ s/[\D_]//g;
		$phone =~ s/^1//g;

		next if $school_name eq "School Name";
		$school_name = "Hired" unless $school_name || $school_code;
		next unless $first && $last;

		my $school;
		my $chapter_judge;

		unless ($school_name eq "Hired") {

			$school = Tab::School->search(
				name  => $school_name,
				tourn => $tourn->id
			)->first;

			$school = Tab::School->search(
				code  => $school_code,
				tourn => $tourn->id
			)->first unless $school;

			my $chapter = $school->chapter
				if $school && not $tourn_settings->{"wsdc"};

			unless ($school) {

				foreach my $circuit ($tourn->circuits) {

					my @chapters = $m->comp(
						"/funclib/circuit_chapters.mas",
						circuit => $circuit,
						name => $school_name
					);

					$chapter = shift @chapters;
					last if $chapter;
				}

				unless ($chapter) {

					$chapter = Tab::Chapter->create({
						name    => $school_name,
						state   => $tourn->state,
						country => $tourn->country
					});

					foreach my $circuit ($tourn->circuits) {
						Tab::ChapterCircuit->create({
							chapter => $chapter->id,
							circuit => $circuit->id
						});
					}
				}

				my ($school_code, $school_region) = $m->comp(
					"/funclib/chapter_code.mas",
					tourn   => $tourn,
					chapter => $chapter
				);

				my $now = DateTime->now(time_zone => $tz);

				$school = Tab::School->create({
					tourn      => $tourn->id,
					chapter    => $chapter->id,
					name       => $school_name,
					code       => $school_code,
				});

				$school->setting("entered_on", "date", $now);

			}

			unless ($nats) {

				$chapter_judge = Tab::ChapterJudge->search(
					chapter => $chapter->id,
					first   => $first,
					last    => $last,
					retired => 0
				)->first;

				$chapter_judge = Tab::ChapterJudge->create({
					chapter => $chapter->id,
					first   => $first,
					middle  => $middle,
					last    => $last,
					phone   => $phone,
					email   => $email
				});
			}
		}

		my $school_id = 0;
		$school_id = $school->id if $school;

		my $code = $m->comp("/funclib/category_code.mas", category => $category )
			unless $category->setting("no_codes");

		my $chapter_judge_id = $chapter_judge->id if $chapter_judge;

		$obligation = "9" unless $obligation;

		$judge = Tab::Judge->create({
			first         => $first,
			last          => $last,
			school        => $school_id,
			chapter_judge => $chapter_judge_id,
			code          => $code,
			category      => $category->id,
			active        => 1,
			obligation    => $obligation,
			hired         => 0,
			person        => 0
		});

		$tab_rating = "1" unless $tab_rating;
		$judge->setting('notes', "text", $notes) if $notes;
		$judge->setting('tab_rating', $tab_rating) if $tab_rating;

		$judge->setting('parli', $parli) if $parli == 1;
		$judge->setting('scorer', $scorer) if $scorer == 1;

		my $person;

		if ($email) {
			$person = Tab::Person->search( email => $email )->first;

			if ($person) {
				$judge->person($person->id);
				$judge->update;
			}
		}

		if ( (not defined $person) && $phone) {
			$person = Tab::Person->search( phone => $phone)->first;
			if ($person) {
				$judge->person($person->id);
				$judge->update;
			}
		}

		unless ($person) {
			$judge->setting('email', $email) if $email;
			$judge->setting('phone', $phone) if $phone;
		}

		my @struck;

		unless ($shift1 == 1) {
			push @struck, $shifts{"1"};
		}

		unless ($shift2 == 1) {
			push @struck, $shifts{"2"};
		}

		unless ($shift3 == 1) {
			push @struck, $shifts{"3"};
		}

		unless ($shift4 == 1) {
			push @struck, $shifts{"4"};
		}

		foreach my $shift (@struck) {

			next unless $shift > 0;
			my $strike = eval {
				return Tab::Strike->create({
					tourn => $judge->category->tourn->id,
					shift => $shift->id,
					type  => "time",
					judge => $judge->id,
					start => $shift->start,
					end   => $shift->end
				});
			};
		}
	}

	my $msg = scalar @judges ." judges imported into ".$category->name;

	$m->redirect("import_csv.mhtml?msg=$msg");

</%init>
