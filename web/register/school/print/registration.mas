<%args>
	$school_id
	$filename
	$judges     => undef
	$entries    => undef
	$hide_codes => undef
	$weekend    => undef
</%args>
<%init>

	use POSIX;

	my $school = Tab::School->retrieve($school_id);
	my $tourn  = $school->tourn;

	my $dbh = Tab::DBI->db_Main();

	my @entries = Tab::Entry->search(
		school      => $school->id,
		unconfirmed => 0
	);

	@entries = sort { $a->code <=> $b->code } @entries;
	@entries = sort { $a->event->name cmp $b->event->name } @entries;

	Tab::Entry->columns(TEMP => "hybridname");

	Tab::Entry->set_sql( hybrids => "
		select entry.*, school.name as hybridname
			from entry, entry_student, student, school
		where student.chapter = ?
			and student.id = entry_student.student
			and entry_student.entry = entry.id
			and entry.school = school.id
			and student.chapter != school.chapter
			and school.tourn = ?
	");

	push @entries, Tab::Entry->search_hybrids($school->chapter, $tourn) if $school->chapter;

	my $filepath = $Tab::file_root."/tmp/".$filename;
	open (TEXOUT, ">>$filepath.tex");
	binmode(TEXOUT, ":utf8");

	my $switch;

	unless ($judges) {

		print TEXOUT "\\begin{tabular}{p{6.885in}}\n";
		print TEXOUT "\\rowcolor[rgb]{1,.95,.72}\[5.5pt\]\[5.5pt\]\n";
		print TEXOUT "\\hfill \\textsb{ Entries }\\hfill \\strut \\\\ \n";
		print TEXOUT "\\end{tabular}\n";
		print TEXOUT "\\newline\n";

		ENTRY:
		foreach my $entry (@entries) {

			my $event = $entry->event;
			my $type = $event->type;

			if ($weekend) {
				next ENTRY if $event->setting('weekend') ne $weekend;
			}

			my @students = $entry->students;

			print TEXOUT "\\begin{tabular}{p{1.75in}p{1.75in}p{3.05in}}\n";

			if (@students || $entry->setting("tba")) {
				if ($switch++ % 2) {
					print TEXOUT "\\rowcolor[rgb]{.99,.99,.99}\[5.5pt\]\[5.5pt\]\n";
				} else {
					print TEXOUT "\\rowcolor[rgb]{.92,.92,.92}\[5.5pt\]\[5.5pt\]\n";
				}
			} else {
				print TEXOUT "\\rowcolor[rgb]{.94,.89,.80}\[5.5pt\]\[5.5pt\]\n";
			}

			if ($entry->waitlist) {
				print TEXOUT "Waitlist ";
			} elsif ($entry->dropped) {
				print TEXOUT "{\\bf DROP} ";
			} elsif ($hide_codes) {
			} else {
				print TEXOUT Tab::texify($entry->code);
			}

			print TEXOUT " & ";
			print TEXOUT Tab::texify($event->name)." & ";

			my $notfirst;

			if (@students) {

				foreach my $student (@students) {

					if ($notfirst++) {
						print TEXOUT ", ";
					}

					print TEXOUT Tab::texify($student->first." ".$student->last);
				}

			} elsif ($entry->setting("tba")) {

			} else {

				print TEXOUT "\$\\rightarrow\$ {\\color{red} \\bf WARNING: NO COMPETITORS REGISTERED!";
				print TEXOUT "FIX THIS OR THIS ENTRY WILL GET NO POINTS AND CANNOT ADVANCE TO ELIMS! } \$\\leftarrow\$";
			}

			if ($entry->hybridname) {
				print TEXOUT "\\hfill Hybrid w/".Tab::texify(Tab::short_name($entry->hybridname));
			}

			print TEXOUT "\\\\ \n";
			print TEXOUT "\\end{tabular}\n";
			print TEXOUT "\\newline\n";

		}

		unless ($school->judges) {
			return;
		}
	}

    print TEXOUT "\\begin{tabular}{p{6.9in}}\n";
	print TEXOUT "\\\\ \n";
    print TEXOUT "\\end{tabular}\n";
    print TEXOUT "\\newline\n";

	unless ($entries) {

		my $judge_sth = $dbh->prepare("
			select judge.id, judge.code, judge.last, judge.first,
				notes.value_text notes,
				judge.obligation, judge.hired,
				category.id category, category.abbr c_abbr, category.name c_name,
				alt.id alt, alt.abbr a_abbr, alt.name a_name,
				covers.id covers, covers.abbr cov_abbr, covers.name cov_name,
				judge.ada, judge.active,
				person.id person, person.email email, person.phone phone,
				weekend.value weekend, rounds_per.value rounds_per,
				reg_sheet_notice.value_text reg_sheet_notice,
				GROUP_CONCAT(jpool.name SEPARATOR ', ') pools

			from (judge, category)

				left join judge_setting notes on notes.judge = judge.id and notes.tag = 'notes'
				left join category alt on alt.id = judge.alt_category
				left join category covers on covers.id = judge.covers
				left join person on person.id = judge.person
				left join category_setting weekend on weekend.category = judge.category and weekend.tag = 'weekend'
				left join category_setting rounds_per on rounds_per.category = judge.category and rounds_per.tag = 'rounds_per'
				left join category_setting reg_sheet_notice on reg_sheet_notice.category = judge.category and reg_sheet_notice.tag = 'reg_sheet_notice'

				left join jpool on jpool.category = category.id and exists (
					select jpj.id from jpool_judge jpj where jpj.judge = judge.id and jpj.jpool = jpool.id
				)

			where judge.school = ?
				and judge.category = category.id
			group by judge.id
			order by category.abbr, judge.last
		");

		$judge_sth->execute($school->id);

		my $judge_results = $judge_sth->fetchall_hash();

	    print TEXOUT "\\newline\n";
    	print TEXOUT "\\begin{tabular}{p{6.9in}}\n";
		print TEXOUT "\\rowcolor[rgb]{1,.95,.66}\[5.5pt\]\[5.5pt\]\n";

	    print TEXOUT "{\\bf Judges: ". &Tab::texify($school->name) ."}\\\\\n";

		if (scalar @{$judge_results} < 1) {
	    	print TEXOUT "{\\bf *No judges listed* }\\\\\n";
		}

	    print TEXOUT "\\end{tabular}\n";
	    print TEXOUT "\\newline\n";

		undef $switch;
		my %category_settings = ();

		my $tabular .= "\\begin{tabular}{p{.35in}p{1.5in}p{2.25in}p{2.3in}}\n";

		JUDGE:
		foreach my $judge_ref (@{$judge_results}) {

			if ($judge_ref->{"weekend"} && $judge_ref->{"weekend"} ne $weekend) {
				next JUDGE;
			}

			print TEXOUT $tabular;

			if ($switch++ % 2) {
				print TEXOUT "\\rowcolor[rgb]{.99,.99,.99}\[5.5pt\]\[5.5pt\]\n";
			} else {
				print TEXOUT "\\rowcolor[rgb]{.92,.92,.92}\[5.5pt\]\[5.5pt\]\n";
			}

			if ($judge_ref->{"c_abbr"}) {
				print TEXOUT &Tab::texify($judge_ref->{"c_abbr"});
			} else {
				print TEXOUT &Tab::texify($judge_ref->{"c_name"});
			}
			print TEXOUT " ".&Tab::texify($judge_ref->{"code"});
			print TEXOUT " & ";
			print TEXOUT &Tab::texify($judge_ref->{"last"}.", ".$judge_ref->{"first"});

			print TEXOUT " & \\footnotesize ";

			if ($judge_ref->{"rounds_per"}) {
				print TEXOUT &Tab::texify($judge_ref->{obligation})." Rds ";
				print TEXOUT &Tab::texify("also hired for ".$judge_ref->{hired}) if $judge_ref->{hired};
				print TEXOUT "\\hfill ";
			}

			if ($judge_ref->{"a_abbr"}) {
				print TEXOUT &Tab::texify("Also judges ".$judge_ref->{"a_abbr"});
			}

			if ($judge_ref->{"a_abbr"}) {
				print TEXOUT &Tab::texify("Covers obligation in ".$judge_ref->{"cov_abbr"});
			}

			print TEXOUT " \\scriptsize ";

			my $notes = $m->comp("/funclib/print_format.mas", message => $judge_ref->{"notes"});
			# Do not texify, it will escape the escape already put in by print_format.mas!
			print TEXOUT $notes;

			if ($judge_ref->{pools}) {
				print TEXOUT "\\parbox[b]{1.45in}{\\raggedright ";
				print TEXOUT &Tab::texify($judge_ref->{pools})." ";
				print TEXOUT " } ";
			}

			print TEXOUT " & \\footnotesize ";

			my $message = $m->comp(
				"/funclib/print_format.mas",
				message => $judge_ref->{"reg_sheet_notice"}
			);

			if ($message) {
				print TEXOUT "\\parbox[b]{1.6in}{\\raggedright ";
				print TEXOUT &Tab::texify($message);
				print TEXOUT " } ";
			}

				if ($judge_ref->{person}) {
					print TEXOUT "\\parbox[b]{1.6in}{Link: ";
					print TEXOUT &Tab::texify($judge_ref->{"email"});
					print TEXOUT " } \n";

					print TEXOUT "\\parbox[b]{1.6in}{ ";
					print TEXOUT &Tab::texify(Tab::phoneme($judge_ref->{phone}));
					print TEXOUT " } \n";
				}

			print TEXOUT "\\\\ \n";
			print TEXOUT "\\end{tabular}\n";
			print TEXOUT "\\newline\n";

		}
	}

	close TEXOUT;

</%init>

