<%args>
	$tourn_id
</%args>
<%init>

	unless ($tourn_id eq int($tourn_id)) {
		$m->comp("/funclib/abort.mas", message => "Invalid or multiple tournament IDs sent");
	}

    my $key = $tourn_id;

    return if $m->cache_self(
        key        => $key,
		expire_if  => sub { return 1 if defined $ARGS{"invalidate"} },
        expires_in => '1h'
    );

	my $tourn = Tab::Tourn->retrieve($tourn_id);

	unless ($tourn > 0) {
		$m->comp("/funclib/abort.mas", message => "Invalid or multiple tournament IDs sent");
	}

	my $now = DateTime->now();
	my $over = 1;

	if ($now > $tourn->end) {
		$over = 0;
	}

	unless ($tourn->setting("show_book")) {
		$m->comp("/funclib/abort.mas", message => "That tournament has not published book data");
	}

	my $nats = $tourn->setting("nsda_nats");

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select
			student.id, student.first, student.middle, student.last,
			GROUP_CONCAT(event.abbr SEPARATOR ', ') abbr, event.name,
			chapter_appearances.value,
			student_appearances.value,
			override_appearances.value,
			school.id, school.name, school.state, chapter.state,
			chapter.nsda

		from (student, entry_student, entry, school, event, chapter)

		left join student_setting student_appearances
			on student.id = student_appearances.student
			and student_appearances.tag = 'nats_appearances'

		left join student_setting override_appearances
			on student.id = override_appearances.student
			and override_appearances.tag = 'override_appearances'

		left join chapter_setting chapter_appearances
			on chapter_appearances.chapter = chapter.id
			and chapter_appearances.tag = 'nats_appearances'

		where event.tourn       = ?
			and event.tourn         = school.tourn
			and school.chapter      = student.chapter
			and chapter.id          = school.chapter
			and student.id          = entry_student.student
			and entry_student.entry = entry.id
			and entry.active        = 1
			and entry.event         = event.id
			and chapter.id          != 48604

		and not exists (
			select supp.id
			from event_setting supp
			where supp.event = event.id
			and supp.tag = 'supp'
		)

		group by student.id
		order by school.state, school.name, student.last, event.id
	");

	$sth->execute($tourn->id);

	my %school;
	my %used_states;

	while (

		my (
			$student_id, $student_first, $student_middle, $student_last,
			$student_main, $student_event_name,
			$appearances,
			$count_nats,
			$override_nats,
			$school_id, $school_name, $school_state, $chapter_state,
			$chapter_nsda,
		) = $sth->fetchrow_array()
	) {

		$used_states{$chapter_state}++;

		unless ($school{$school_id}) {
			$school{$school_id}{"name"}          = $school_name;
			$school{$school_id}{"state"}         = $school_state;
			$school{$school_id}{"state"}         = $chapter_state unless $school_state;
			$school{$school_id}{"state"}         = "INT" unless $school{$school_id}{"state"};
			$school{$school_id}{"nsda"}        = $chapter_nsda;
			$school{$school_id}{"appearances"} = $appearances + $over;
		}

		unless ($school{"students"}{$student_id}) {
			$school{$school_id}{"students"}{$student_id}{"first"}  = $student_first;
			$school{$school_id}{"students"}{$student_id}{"middle"} = $student_middle;
			$school{$school_id}{"students"}{$student_id}{"last"}   = $student_last;
			$school{$school_id}{"students"}{$student_id}{"main"}   = $student_main;

			if ($override_nats > 0) {
				$school{$school_id}{"students"}{$student_id}{"count"}  = $override_nats;
			} else {
				$school{$school_id}{"students"}{$student_id}{"count"}  = $count_nats + $over;
				if (
					$school{$school_id}{"students"}{$student_id}{"count"} > 4
					|| $school{$school_id}{"students"}{$student_id}{"count"} < 1
				) {
					undef ($school{$school_id}{"students"}{$student_id}{"count"});
				}
			}
		}
	}


	my $supp_sth = $dbh->prepare("
		select
			student.id, student.first, student.middle, student.last,
			event.abbr, event.name,
			chapter_appearances.value,
			student_appearances.value,
			override_appearances.value,
			school.id, school.name, chapter.state,
			chapter.nsda

		from (student, entry_student, entry, school, event, chapter, event_setting)

		left join student_setting student_appearances
			on student.id = student_appearances.student
			and student_appearances.tag = 'nats_appearances'

		left join student_setting override_appearances
			on student.id = override_appearances.student
			and override_appearances.tag = 'override_appearances'

		left join chapter_setting chapter_appearances
			on chapter.id = chapter_appearances.chapter
			and chapter_appearances.tag = 'nats_appearances'

		where event.tourn       = ?
			and event.tourn         = school.tourn
			and school.chapter      = student.chapter
			and chapter.id          = school.chapter
			and student.id          = entry_student.student
			and entry_student.entry = entry.id
			and entry.active        = 1
			and entry.event         = event.id
			and event_setting.event = event.id
			and event_setting.tag   = 'supp'
			and chapter.id          != 48604

		group by student.id
		order by school.state, school.name, student.last, event.id
	");

	$supp_sth->execute($tourn->id);

	while (
		my (
			$student_id, $student_first, $student_middle, $student_last,
			$student_main, $student_main_name,
			$appearances,
			$count_nats,
			$override_nats,
			$school_id, $school_name, $school_state,
			$chapter_nsda
		) = $supp_sth->fetchrow_array()
	) {

		$used_states{$school_state}++;
		next if $school{$school_id}{"students"}{$student_id};

		unless ($school{$school_id} && $school{$school_id}{"name"}) {

			$school{$school_id}{"name"}  = $school_name;
			$school{$school_id}{"state"} = $school_state;
			$school{$school_id}{"state"} = "INT" unless $school_state;
			$school{$school_id}{"nsda"}        = $chapter_nsda;
			$school{$school_id}{"appearances"} = $appearances + $over;
		}

		unless ($school{"students"}{$student_id}) {

			$student_main =~ s/A //g;
			$student_main =~ s/B //g;

			$school{$school_id}{"students"}{$student_id}{"first"}  = $student_first;
			$school{$school_id}{"students"}{$student_id}{"middle"} = $student_middle;
			$school{$school_id}{"students"}{$student_id}{"last"}   = $student_last;
			$school{$school_id}{"students"}{$student_id}{"main"}   = $student_main;

			if ($override_nats > 0) {
				$school{$school_id}{"students"}{$student_id}{"count"}  = $override_nats;
			} else {
				$school{$school_id}{"students"}{$student_id}{"count"}  = $count_nats + $over;
				if (
					$school{$school_id}{"students"}{$student_id}{"count"} > 4
					|| $school{$school_id}{"students"}{$student_id}{"count"} < 1
				) {
					undef ($school{$school_id}{"students"}{$student_id}{"count"});
				}
			}
		}
	}

	my $coach_sth = $dbh->prepare("
        select
			school.id school_id,
			contact.id contact_id, contact.book book,
			person.id person_id,
			person.first first, person.middle middle, person.last last,
			diamonds.value diamonds

        from (contact, person, school)

			left join person_setting diamonds
				on diamonds.person = person.id
				and diamonds.tag = 'diamonds'

        where school.tourn = ?
			and school.id = contact.school
			and contact.person = person.id
			and contact.book = 1
		group by person.id, school.id
		order by contact.id
	");

	$coach_sth->execute($tourn->id);
	my $coaches = $coach_sth->fetchall_hash();

	foreach my $coach (@{$coaches}) {
		unless ($school{$coach->{school_id}}{"coaches"}{$coach->{person_id}}) {
			$school{$coach->{school_id}}{"coaches"}{$coach->{person_id}}{"first"}    = $coach->{first};
			$school{$coach->{school_id}}{"coaches"}{$coach->{person_id}}{"middle"}   = $coach->{middle};
			$school{$coach->{school_id}}{"coaches"}{$coach->{person_id}}{"last"}     = $coach->{last};
			$school{$coach->{school_id}}{"coaches"}{$coach->{person_id}}{"person"}   = $coach->{person_id};
			$school{$coach->{school_id}}{"coaches"}{$coach->{person_id}}{"diamonds"} = $coach->{diamonds};
		}
	}

	$coach_sth->finish();

	my $states = $m->comp("/funclib/state_hash.mas");
	my $sort_states = $m->comp("/funclib/state_hash.mas", sort => "yasqueen");

	my @keys = sort {
		$school{$a}{"name"} cmp $school{$b}{"name"}
	} keys %school;

	@keys = sort {
		$states->{$school{$a}{"state"}} cmp $states->{$school{$b}{"state"}}
	} @keys;

	@keys = sort {
		$sort_states->{$school{$a}{"state"}} <=> $sort_states->{$school{$b}{"state"}}
	} @keys;

	my $last_state;
	my $linecounter;

</%init>

	<script>

		function showStates() {

			var state = $("#state").val();

			if (state !== "all") {
				$(".states").addClass("hidden");
				$("#"+state).removeClass('hidden');
			}

			fixVisual();
		}

	</script>

	<div class="menu">
		<div class="sidenote">
			<h4>Navigation</h4>

%			if ($tourn->setting("nsda_nats")) {
				<a
					class = "blue full"
					href  = "https://www.speechanddebate.org/nationals"
				>Return to Nationals Homepage</a>
%			}

			<a
				class = "blue full"
				href  = "/index/tourn/index.mhtml?tourn_id=<% $tourn->id %>"
			>Return to Tournament Tabroom Site</a>

		</div>
	</div>

	<div class="main">

		<div class="full">

			<h3 class="centeralign"><% $tourn->name %></h3>

			<h4 style="font-size: 200%;" class="bluetext centeralign">Schools in Attendance</h4>
			<span class="centeralign full ltborderbottom">
				<span class="third">
					<select
						name     = "state"
						id       = "state"
						class    = "fixedmost"
						onChange = "showStates();"
					>
						<option value="all">All States</option>
%						foreach my $state (sort {$a cmp $b} keys %used_states) {
							<option
								value="<% $state %>"
							><% $states->{$state} %></option>
%						}
					</select>
				</span>
			</span>
		</div>

		<div class="centeralign">
		<span class="half nospace">

<%perl>
		my $switch;
		foreach my $school_id (@keys) {

			next unless $school{$school_id}{"students"};
			my $state = $school{$school_id}{"state"};
			$state = "INT" unless $state;

			if ($state ne $last_state) {
				$m->print("</div>") if $last_state;
				$m->print('<div class="centeralign padtop martop full states" id="'.$state.'">');
				$m->print('<h4 class="centeralign">'.uc($states->{$state}).'</h4>');
				$last_state = $state;
				undef $switch;
			}
</%perl>
			<div class="full marno padno marbottommore">
				<div class="full bluebordertop">
					<p class="bigger semibold bluetext centeralign" style="font-size: 20px;">
						<% $school{$school_id}{"name"} %>
					</p>
					<p class="centeralign explain graytext nospace padbottom">
						<% Lingua::EN::Numbers::Ordinate::ordinate($school{$school_id}{"appearances"}) %>
						appearance at Nationals
					</p>
				</div>

				<p class="smallish semibold centeralign">COMPETITORS</p>
<%perl>
				foreach my $student_id ( sort {
						$school{$school_id}{"students"}{$a}{"last"}
						cmp $school{$school_id}{"students"}{$b}{"last"}
					} keys %{$school{$school_id}{"students"}}

				) {

					my $student = $school{$school_id}{"students"}{$student_id};
					$student->{"main"} =~ s/,/<br \>/g;
</%perl>
					<div class="full padvertless ltborderbottom smallish flexrow">
						<span class="threefifths leftalign">
							<span class="quarterspacer"></span>
							<% $student->{"first"} %>
							<% $student->{"middle"} %>
							<% $student->{"last"} %>
						</span>

						<span class="fifth explain centeralign">
%							if ($student->{"count"} > 1) {
								<% ($student->{"count"}) %>x
								competitor
%							}
						</span>
						<span class="fifth centeralign">
							<% $student->{"main"} %>
						</span>
					</div>
%				}

				<p class="smallish semibold centeralign">COACHES</p>
<%perl>
				my $coached;
				my %printed;

				foreach my $coach_id ( sort {
						$school{$school_id}{"coaches"}{$a}{"last"}
						cmp $school{$school_id}{"coaches"}{$b}{"last"}
					} keys %{$school{$school_id}{"coaches"}}
				) {

					$coached++;
					my $coach = $school{$school_id}{"coaches"}{$coach_id};
					next if $printed{$coach->{"person"}}++;
</%perl>
					<div class="full nospace padvertless centeralign italic">
						<span class="threequarters nospace">
							<% $coach->{"first"} %>
							<% $coach->{"middle"} %>
							<% $coach->{"last"} %>
%							if ($coach->{"diamonds"}) {
								<span class="quarterspacer"></span>
%								foreach (1 .. $coach->{"diamonds"}) {
									<span class="orangetext fa fa-sm fa-diamond marno inline"></span>
%								}
%							}
						</span>
					</div>
%				}

<%perl>
				if ($school{$school_id}{"extra_coaches"}) {

					my $extras = $school{$school_id}{"extra_coaches"};

					foreach my $id (sort {$extras->{$a}{"last"} cmp $extras->{$b}{"last"}} keys %{$extras}) {

						$coached++;

						my $coach = $extras->{$id};
						next if $printed{$id}++;
</%perl>
						<div class="full nospace padvertless centeralign italic">
							<span class="threequarters nospace">
								<% $coach->{"first"} %>
								<% $coach->{"middle"} %>
								<% $coach->{"last"} %>
%								if ($coach->{"diamonds"}) {
									<span class="quarterspacer"></span>
%									foreach (1 .. $coach->{"diamonds"}) {
										<span class="orangetext fa fa-sm fa-diamond marno inline"></span>
%									}
%								}
							</span>
						</div>
%					}
%				}

%				my %already;
%				if ($school{$school_id}{"coach_names"}) {
%					foreach my $coach (split(/\,/, $school{$school_id}{"coach_names"})) {
%						next if $already{$coach}++;
						<div class="full nospace padvertless centeralign italic">
							<span class="threequarters nospace">
								<% $coach %>
							</span>
						</div>
%					}
%				}
				</div>
%			}
		</span>
		</div>
	</div>

