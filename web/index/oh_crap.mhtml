<%flags>
#	inherit => undef
</%flags>

<html>

<head>
	<title>Error</title>
</head>

<body>

<div class="main">

	<h2>Well, that's just unfortunate</h2>

	<p>
		Looks like you just tripped over a bug in tabroom.com.
	</p>

	<p>
		Please, <span class="inline semibold redtext">do not send this bug
		report to us.</span>.  The bug has automatically been logged!  Emailing
		it in doesn't help, and just adds to my already daunting email intake.
	</p>

	<p>
		If you have further questions though, please do
		contact us at <a href="mailto:help@tabroom.com">help@tabroom.com</a>.
	</p>

	<p>
		Otherwise, your browser's back button will get you where you want to be.
	</p>

	<h4>Error text:</h4>

	<pre>
		<% $error_text %>
	</pre>

</div>

</body>
</html>

<%init>

	use Apache2::URI;
	use APR::URI;
	use MIME::Lite;
	use UNIVERSAL::can;

	my $error = $r->pnotes('error');

	my $stack = UNIVERSAL::can( $error, 'as_text' ) ? $error->as_text : $error;

	if ( index($stack, "no value sent for required parameter") != -1) {

		my ($error, $junque) = split ("Stack", $stack);

		$m->comp("/funclib/abort.mas",
			message => "That page cannot be displayed because of a broken link with missing inputs: <br /> ".$error
		);

	} elsif ( index($stack, "Apache2::RequestIO::rflush") != -1) {
		$m->comp("/funclib/abort.mas",
			message => "Your browser connection was interrupted before the data fully transferred"
		);
	} elsif ( index($stack, "Apache2::RequestIO::print") != -1) {
		$m->comp("/funclib/abort.mas",
			message => "Your browser connection was interrupted before the data fully transferred"
		);
	}

	my $error_text .= "\nGenerated at ".DateTime->now(time_zone => "America/New_York")." EST/EDT on ".`/bin/hostname`."\n";
	$error_text .= "Page is " . $r->parsed_uri->unparse . "\n\n";
	$error_text .= "Requestor IP is ".$ENV{REMOTE_ADDR}."\n\n";
	$error_text .= "Proxied IP is ".$ENV{"HTTP_X_FORWARDED_FOR"}."\n\n";

    my %cookies = eval {

        my @cookies = split(";", $r->headers_in->{'Cookie'});
        my %return;

        foreach my $cookie (@cookies) {
            my ($key, @values) = split(/=/, $cookie);
            my $value = APR::Request::decode(join("=", @values));
            $key =~ s/\s+//g;
            $return{$key} = $value;
        }
        return %return;
    };

	if ($cookies{"TabroomToken"}) {

		my %userdata = eval {
			my $dbh = Tab::DBI->db_Main();

			my $sth = $dbh->prepare("
				select
					person.id, person.email, person.first, person.last,
					session.id,
					tourn.id, tourn.name
				from session
					left join person on session.person = person.id
					left join tourn on session.tourn = tourn.id
				where session.userkey = ?
			");

			my %data;

			$sth->execute($cookies{"TabroomToken"});

			while (
				my (
					$id, $email, $first, $last,
					$session, $tourn_id, $tourn_name
				) = $sth->fetchrow_array()
			) {

				$data{"id"} = $id;
				$data{"email"} = $email;
				$data{"name"} = $first." ".$last;
				$data{"tourn_id"} = $tourn_id;
				$data{"tourn_name"} = $tourn_name;
				$data{"session"} = $session;
			}

			return %data;
		};

		if (keys %userdata) {
			$error_text .= "User ".$userdata{"id"}." ".$userdata{"email"}." ".$userdata{"name"}."\n\n";
			$error_text .= "Tournament ".$userdata{"tourn_id"}." ".$userdata{"tourn_name"}."\n\n" if $userdata{'tourn_id'};
			$error_text .= "Session ".$userdata{"session"}."\n\n";
		}
		if (keys %ARGS) {
			$error_text .= "ARGS Array\n";
			foreach my $key (keys %ARGS) {
				$error_text .= "Key $key value ".$ARGS{$key}."\n";
			}
		}
	}

	$error_text .= "Arguments are ".$r->args." \n\n";
	$error_text .= "Error log:\n";
	$error_text .= $stack;
	$r->log_error($error_text);

	my $mail = MIME::Lite->new(
		From    => 'error-handler@tabroom.com',
		To      => 'errors@tabroom.com',
		Subject => 'Bug tripped on '.$Tab::url_prefix,
		Data    => $error_text
	);

	$mail->send();

</%init>

