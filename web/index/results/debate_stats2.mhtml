<%args>
	$person     => undef
	$circuit_id => undef
	$year       => undef
	$level      => undef
	$min_rds    => undef
	$show_top   => undef
	$event_id   => undef
	$seed_me    => undef
</%args>
<%init>

	$year = int($year);
	$circuit_id = int($circuit_id);
	$level =~ s/[\W_]//g;
	$level = lc($level);

	my $level_limit;

    if ($level) {
        $level = $m->comp("/funclib/safe_string.mas", fixme => $level);
        $level_limit = "and event.level = '".lc($level)."'";
    }

	unless ($year) {
		my $this_year = Tab::school_year;
		$year = $this_year->year;
	}

	$m->abort if $year ne int($year);

	my $key = $circuit_id."-".$year."-".$level;
	return if $m->cache_self( key => $key, expires_in => '120m' );

	# load team points
	$circuit_id = 43 unless $circuit_id;
	my $circuit = Tab::Circuit->retrieve( $circuit_id ) if $circuit_id;

	my %team_points = $m->comp(
		"/funclib/team_ratings.mas",
			type    => "debate",
			circuit => $circuit
		) if $circuit;

	unless ($show_top) { $show_top = 78; }
	unless ($min_rds) { $min_rds = 5; }

	if ($circuit) {

	my $event = Tab::Event->retrieve( $event_id ) if $event_id;
	my $event_str;
	$event_str = " and showing only entries in ".$event->name." for ".$event->tourn->name if $event_id;

	$show_top = 300 if $event_id;
	$min_rds = 1 if $event_id;

	my $start_string = "07/01/$year";
	my $end_string = "06/30/".($year + 1);

	my $start_dt = Tab::dtme($start_string);
	my $end_dt = Tab::dtme($end_string);

	my $level_display = ucfirst($level);
	unless ($level_display) {
		$level_display="all levels of competition.";
	}

	#Load chapter characteristics

	Tab::Entry->columns(TEMP => qw/IDstr/);
	Tab::Entry->columns(TEMP => qw/school_name/);
	Tab::Entry->columns(TEMP => qw/student_names/);
	Tab::Entry->set_sql(pull_entries => "
		select entry.id,
			GROUP_CONCAT(DISTINCT entry_student.student order by entry_student.student) as IDstr,
			GROUP_CONCAT( CONCAT_WS(' ',student.first,student.last) separator ' & ') as student_names,
			school.name as school_name
		from (entry, event, tourn, tourn_circuit, entry_student, student)
			left join school on entry.school = school.id
		where tourn_circuit.circuit= ?
		and tourn.id = tourn_circuit.tourn
		and event.tourn = tourn.id
		and entry.event = event.id
		and tourn.start >= ?
		and tourn.end <= ?
		and entry_student.entry = entry.id
		and student.id = entry_student.student
		and entry.dropped = 0
		and event.type = 'debate'
		$level_limit
		group by entry.id
		order by IDstr
	");

	my @entries = Tab::Entry->search_pull_entries($circuit->id, $start_dt, $end_dt);

	my %entry_hash;
	my %index_hash; #key is entry_id, value is IDstr

	foreach my $entry (@entries) {

		$entry_hash{$entry->IDstr}{'name'} = $entry->school_name." <br />". $entry->student_names;
		$index_hash{$entry->id}{'master_id'} = $entry->IDstr;

		if ($event_id && $entry->event == $event_id) {
			$entry_hash{$entry->IDstr}{'in_event'} = 1;
			$entry_hash{$entry->IDstr}{'object'} = $entry;
		}

		my ($speaker1, $speaker2) = get_speakers( $entry->IDstr );
		$entry_hash{$entry->IDstr}{'speaker1'} = $speaker1;
		$entry_hash{$entry->IDstr}{'speaker2'} = $speaker2;

		$entry_hash{$entry->IDstr}{'rpi_total'} = $speaker1 + $speaker2;
		$entry_hash{$entry->IDstr}{'speaker2'} = $speaker2;

		$team_points{$entry->IDstr}{"rpi_total"} = $team_points{$speaker1}{"total"} + $team_points{$speaker2}{"total"};
		$team_points{$entry->IDstr}{"rpi_average"} = $team_points{$speaker1}{"average"} + $team_points{$speaker2}{"average"};

	}

	#now pull debate events

	Tab::Event->set_sql(pull_events => "
		select event.*
		from event, tourn, tourn_circuit, round
		where tourn_circuit.circuit= ?
		and tourn.id=tourn_circuit.tourn
		and tourn.start >= ?
		and tourn.end <= ?
		and event.tourn=tourn.id
		and event.type != 'congress'
		and event.type != 'speech'
		and round.event = event.id
		and round.type != 'elim'
		and round.type != 'final'
		and round.type != 'none'
		group by event.id
	");

	my @events = Tab::Event->search_pull_events($circuit->id, $start_dt, $end_dt);

	#pulls prelim wins
	foreach my $event (@events) {

		my %win = $m->comp(
			"/funclib/entry_wins.mas",
			event  => $event,
			public => 3
		);

		foreach my $key ( keys %win ) {
			$index_hash{$key}{'p_wins'} += $win{$key};
			$index_hash{$key}{'n_tourneys'}++;
		}

		my %loss = $m->comp("/funclib/entry_losses.mas",
			event  => $event,
			public => 3
		);

		foreach my $key ( keys %loss ) {
			$index_hash{$key}{'p_losses'} += $loss{$key};
		}

		my %all_win = $m->comp(
			"/funclib/entry_wins.mas",
			event  => $event,
			all    => 1,
			public => 3
		);

		foreach my $key ( keys %all_win ) {
			$index_hash{$key}{'all_wins'} += $all_win{$key};
		}

		my %all_loss = $m->comp(
			"/funclib/entry_losses.mas",
				event  => $event,
				all    => 1,
				public => 3
		);

		foreach my $key ( keys %all_loss ) {
			$index_hash{$key}{'all_losses'} += $all_loss{$key};
		}
	}


	#start with zero
	foreach my $key (keys %entry_hash) {
		$entry_hash{$key}{'all_wins'} = 0;
		$entry_hash{$key}{'all_losss'} = 0;
		$entry_hash{$key}{'p_wins'} = 0;
		$entry_hash{$key}{'p_losses'} = 0;
		$entry_hash{$key}{'elim_wins'} = 0;
		$entry_hash{$key}{'elim_losses'} = 0;
	}

	#add wins back to entry_hash using index_hash
	foreach my $key (keys %index_hash) {
		$entry_hash{$index_hash{$key}{'master_id'}}{'p_wins'} += $index_hash{$key}{'p_wins'} ;
		$entry_hash{$index_hash{$key}{'master_id'}}{'p_losses'} += $index_hash{$key}{'p_losses'} ;
		$entry_hash{$index_hash{$key}{'master_id'}}{'all_wins'} += $index_hash{$key}{'all_wins'} ;
		$entry_hash{$index_hash{$key}{'master_id'}}{'all_losses'} += $index_hash{$key}{'all_losses'} ;
		$entry_hash{$index_hash{$key}{'master_id'}}{'n_tourneys'} += $index_hash{$key}{'n_tourneys'} ;
	}

	#derive calculated columns
	foreach my $key (keys %entry_hash) {
		$entry_hash{$key}{'elim_wins'} = $entry_hash{$key}{'all_wins'}-$entry_hash{$key}{'p_wins'} ;
		$entry_hash{$key}{'elim_losses'} = $entry_hash{$key}{'all_losses'}-$entry_hash{$key}{'p_losses'} ;
		$entry_hash{$key}{'rounds'} = $entry_hash{$key}{'all_wins'}+$entry_hash{$key}{'all_losses'} ;
		$entry_hash{$key}{'all_percent'} = sprintf("%.1f", ($entry_hash{$key}{'all_wins'} / ($entry_hash{$key}{'all_wins'}+$entry_hash{$key}{'all_losses'}) * 100))
			if ($entry_hash{$key}{'all_wins'}+$entry_hash{$key}{'all_losses'}) > 0;
	}

	my $counter;

	if ($seed_me && $person && $person->site_admin) {
		my %done;
		foreach my $key (sort { $entry_hash{$b}{'all_percent'} <=> $entry_hash{$a}{'all_percent'} } keys %entry_hash) {
			next unless $entry_hash{$key}{'in_event'};
			my $entry = $entry_hash{$key}{'object'};
			next unless $entry;
			next if $done{$entry->id}++;
			$counter++;
			$entry->setting("pairing_seed", $counter);
		}
	}

	sub get_speakers {

		my ($dummy) = @_;
		my $x; my $st=0;
		my $speaker1=""; my $speaker2="";

		for ($x=0; $x <= length($dummy); $x++) {

			if ( substr($dummy, $x, 1) eq "," ) {
				if ( $speaker1 eq "" ) {
					$speaker1=substr($dummy, $st, $x-$st);
					$st=$x+1;
				} else {
					$speaker2=substr($dummy, $st, $x-$st-1);
				}
				if ( $speaker2 ne "" ) { last; }
			}
		}

		if ($speaker2 eq "" ) { $speaker2=substr($dummy, $st, length($dummy)-$st); }

		return $speaker1, $speaker2;

	}

	my $ctr;

</%init>

	<&
		"menu.mas",
		circuit_id => $circuit,
		whoami     => "team_success",
		year       => $year,
		level      => $level,
		min_rds    => $min_rds
	&>

	<div class="main">

		<div class="full padless">

			<span class="seveneighths nospace">
				<h3>
					<% $year %>-<% $year + 1 %> <% $circuit->name %> entry standings
				</h3>
				Any discrepancies with bid sheets are due to byes, and rankers should defer to bid sheets and double-check any close rankings.
			</span>

			<span
				id="standings_buttonarea"
				class="eighth rightalign">
			</span>

		</div>

		<& /funclib/tablesorter.mas, table => "standings" &>

		<table id="standings">
			<thead>
				<tr class="yellowrow">
					<th class="smaller">Entry</th>
					<th class="smaller">Tourn</th>
					<th class="smaller">Rds</th>
					<th class="smaller">All W-L </th>
					<th class="smaller">All Pct</th>
					<th class="smaller">Prelim W-L</th>
					<th class="smaller">Prelim Pct</th>
					<th class="smaller">Elim W-L</th>
					<th class="smaller">Elim Pct</th>
					<th class="smaller">RPI Total</th>
					<th class="smaller">RPI Avg</th>
				</tr>
			</thead>

			<tbody>

<%perl>
 			foreach my $key (sort {$team_points{$b}{'rpi_total'} <=> $team_points{$a}{'rpi_total'}} keys(%team_points)) {
				next unless ( 	$entry_hash{$key}{'p_wins'} > 0 and
					$entry_hash{$key}{'p_losses'} > 0 and
					$entry_hash{$key}{'name'} ne '' and
					$entry_hash{$key}{'rounds'} > $min_rds and
					( $entry_hash{$key}{'in_event'} == 1 || $event_id == 0 ) );

				last if $ctr++ >= $show_top;
</%perl>

				<tr class="smallish centeralign">

					<td class="leftalign">
						<a
							class="white marno"
							href="team_lifetime_record.mhtml?id1=<% $entry_hash{$key}{'speaker1'} %>&id2=<% $entry_hash{$key}{'speaker2'} %>"
						>
							<% $entry_hash{$key}{'name'} %>
						</a>
					</td>

					<td> <% $entry_hash{$key}{'n_tourneys'} %> </td>

					<td> <% $entry_hash{$key}{'rounds'} %> </td>

					<td> <% $entry_hash{$key}{'all_wins'} %>-<% $entry_hash{$key}{'all_losses'} %></td>

					<td> <% $entry_hash{$key}{'all_percent'} %> </td>

					<td> <% $entry_hash{$key}{'p_wins'} %>-<% $entry_hash{$key}{'p_losses'} %></td>

%					my $dummy = $entry_hash{$key}{'p_wins'} / ($entry_hash{$key}{'p_wins'}+$entry_hash{$key}{'p_losses'});
					<td> <% sprintf("%.1f\n", $dummy*100) %></td>

					<td> <% $entry_hash{$key}{'elim_wins'} %>-<% $entry_hash{$key}{'elim_losses'} %></td>

%					if ( $entry_hash{$key}{'elim_wins'}+$entry_hash{$key}{'elim_losses'} > 0 ) {
%						$dummy = $entry_hash{$key}{'elim_wins'} / ($entry_hash{$key}{'elim_wins'}+$entry_hash{$key}{'elim_losses'});

						<td> <% sprintf("%.1f\n", $dummy*100) %></td>

						<td>
							<a class="white" href="rpi_detail.mhtml?id1=<% $entry_hash{$key}{'speaker1'} %>&id2=<% $entry_hash{$key}{'speaker2'} %>">
								<% sprintf("%.1f\n", $team_points{$entry_hash{$key}{'speaker1'}}{'total'} + $team_points{$entry_hash{$key}{'speaker2'}}{'total'}) %>
							</a>

						</td>

						<td>
							<% sprintf("%.1f\n", $team_points{$entry_hash{$key}{'speaker1'}}{'avg'} + $team_points{$entry_hash{$key}{'speaker2'}}{'avg'}) %>
						</td>

%					} else {
						<td colspan="3"></td>
%					}
				</tr>
%			}

			</body>

		</table>

	</div>

%	} else {

	<&
		"menu.mas",
		circuit_id => $circuit,
		whoami     => "team_success",
		year       => $year,
		level      => $level,
		min_rds    => $min_rds
	&>


%	}
