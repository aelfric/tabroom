<%args>
	$tourn
	$person
	$target_id      => undef
	$related_thing  => undef
	$another_thing  => undef
	$setting_name   => undef
	$property_name  => undef
</%args>
<%init>

	$m->clear_buffer();
	$r->content_type('application/json');

	unless ($target_id) {
		$m->print('{ "error": true, "message": "No Panel ID sent"}');
		$m->abort();
	}

	my $panel = Tab::Panel->retrieve($target_id);

	unless ($panel) {
		$m->print('{ "error": true, "message": "No Panel was found for ID '.$target_id.'"}');
		$m->abort();
	}

	my $dbh = Tab::DBI->db_Main();

	my $event_abbr;
	my $round_name;
	my $round_flighted;
	my $room_name;
	my $flight_name;

	my $entries_sth = $dbh->prepare("
		select
			person.last,
			person.id, person.email, person.phone, person.provider,
			round.name, round.label, round.flighted,
			event.abbr, panel.letter, room.name

		from (ballot, entry, entry_student es, student, person, round, event, panel)

			left join room on room.id = panel.room

		where ballot.panel = ?
			and ballot.entry = entry.id
			and entry.active = 1
			and entry.id = es.entry
			and es.student = student.id
			and student.person = person.id
			and person.no_email != 1
			and entry.event = event.id
			and panel.id = ballot.panel
			and round.id = panel.round
			and not exists (
				select dont_poke_entries.id
				from event_setting dont_poke_entries
					where dont_poke_entries.event = event.id
				and dont_poke_entries.tag = 'dont_poke_entries'
			)
		group by person.id
	");

	my %addresses;

	$entries_sth->execute($panel->id);

	while (
		my (
			$last,
			$id, $email, $phone, $provider,
			$round_num, $round_label, $flighted,
			$event,
			$letter, $room
		) = $entries_sth->fetchrow_array()
	) {

		if ($event) {
			$event_abbr = $event;
		}

		if ($flighted > 1) {
			$round_flighted++;
		}

		if ($round_label) {
			$round_name = $round_label;
		} elsif ($round_num) {
			$round_name = "Round ".$round_num;
		}

		if ($room) {
			$room_name = $room;
		} elsif ($letter) {
			$room_name = "Section ".$letter;
		}

		if ($email) {
			$addresses{$id}{"email"} = $email;
		}

		if ($last) {
			$addresses{$id}{"last"} = $last;
		}

		if ($phone && $provider) {
			$phone =~ s/[\D_]//g;
			$addresses{$id}{"sms"} = $phone.'@'.$provider;
		}
	}

	my $judges_sth = $dbh->prepare("
		select
			person.last,
			person.id, person.email, person.phone, person.provider

		from (ballot, judge, person)

		where ballot.panel = ?
			and ballot.judge = judge.id
			and judge.person = person.id
			and person.no_email != 1
		group by person.id
	");

	$judges_sth->execute($panel->id);

	while (
		my (
			$last,
			$id, $email, $phone, $provider
		) = $judges_sth->fetchrow_array()
	) {
		if ($email) {
			$addresses{$id}{"email"} = $email;
		}

		if ($phone && $provider) {
			$phone =~ s/[\D_]//g;
			$addresses{$id}{"sms"} = $phone.'@'.$provider;
		}

		if ($last) {
			$addresses{$id}{"last"} = $last;
		}
	}

	my $log_sth = $dbh->prepare("
		select
			cl.panel, cl.tag, cl.description, cl.person, cl.entry, cl.judge,
				CONVERT_TZ(cl.timestamp, '+00:00', tourn.tz),
			person.id, person.first, person.last

		from panel, campus_log cl, tourn, person, round

		where panel.id = ?

			and panel.round = round.id
			and panel.id = cl.panel
			and cl.tourn = tourn.id
			and cl.person = person.id

			and ( exists (
					select ballot.id
						from ballot, judge
					where judge.id = ballot.judge
						and judge.person = person.id
						and ballot.panel = panel.id
				) or exists (
					select ballot.id
						from ballot, entry_student es, student
					where ballot.panel = panel.id
						and ballot.entry = es.entry
						and es.student = student.id
						and student.person = person.id
				)
			)
		order by cl.timestamp
	");

	$log_sth->execute($panel->id);

	my %ok;

	while (
		my (
			$panel_id, $tag, $desc, $person, $entry, $judge, $timestamp,
			$id, $first, $last
		) = $log_sth->fetchrow_array()
	) {

		if ($tag eq "absent") {
			delete $ok{$person};
		} else {
			$ok{$person}++;
		}
	}

	foreach my $okey (keys %ok) {
		delete $addresses{$okey};
	}

	my @emails;
	my $counter;

	my %response;
	my @reclass;

	my $went_to;

	foreach my $id (keys %addresses) {

		$counter++;
		if ($addresses{$id}{"email"}) {
			push @emails, $addresses{$id}{"email"};
		}

		if ($addresses{$id}{"sms"}) {
			push @emails, $addresses{$id}{"sms"};
		}

		my %limit = ();
		$limit{"id"} = "blast_".$target_id;
		$limit{"addClass"} = "hidden";
		push @reclass, \%limit;

		$went_to .= ", " if $went_to;
		$went_to .= $addresses{$id}{"last"};
	}

	my $message = "You are currently marked as not present in $round_name of $event_abbr in $room_name.";

	if ($round_flighted) {
		$message .= " (Flight ".$panel->flight.") ";
	}

	$message .= " Please go to $room_name now so the round may proceed.";

	$m->comp(
		"/funclib/send_notify.mas",
		from    => 'Tabroom.com <live@www.tabroom.com>',
		array   => \@emails,
		subject => "Missing from $room_name",
		body    => $message
	);

	$log_sth->finish;

	$response{"error"} = "false";
	$response{"message"} = $counter." missing people blasted in ".$room_name.": $went_to";
	$response{"reclass"} = \@reclass;

	$m->print(JSON::encode_json(\%response));

	$m->abort();

</%init>
