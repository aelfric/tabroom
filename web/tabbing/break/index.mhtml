<%args>
	$tourn
	$perms
	$tourn_settings
	$person_settings
	$person
	$from_id       => undef
	$into_id       => undef
	$event_id      => undef
	$breakout      => undef
</%args>
<%init>

	if ($perms->{"checker"}) {
		$m->comp("/funclib/abort.mas",
			message => "You do not have access to that."
		);
	}

	my $event;
	my $from;
	my $into;

	$event = Tab::Event->retrieve($event_id) if $event_id;
	$from = Tab::Round->retrieve($from_id)  if $from_id;
	$into = Tab::Round->retrieve($into_id) if $into_id;

	unless ($event) {
		$event = $into->event if $into;
		$event = $from->event if $from;
	}

	$breakout = $into->setting("use_for_breakout") if $into;
	undef $breakout if $breakout eq "nomas";
	my $breakout_label = $event->setting("breakout_".$breakout."_label") if $breakout;

	if ($event) {

		unless ($into) {

			my @empties_rounds = $m->comp(
				"/funclib/event_rounds.mas",
				event    => $event,
				breakout => $breakout,
				empties  => "yes"
			);

			$into = shift @empties_rounds if @empties_rounds;
		}

		if ($into && $into->setting("seed_round")) {
			$from = Tab::Round->retrieve($into->setting("seed_round"));
		}

		unless ($from) {

			my @done_rounds = $m->comp(
				"/funclib/event_rounds.mas",
				event    => $event,
				done     => "yes",
				breakout => $breakout
			);

			foreach my $dr (sort {$b->name <=> $a->name} @done_rounds) {

				next if $into && $dr->name >= $into->name;

				if ($breakout && ($dr->type eq "elim" || $dr->type eq "final")) {
					next unless $dr->setting("use_for_breakout") == $breakout;
				}

				$from = $dr;
				last;
			}
		}
	}

	my $fixed_start_seed;
	my $fixed_end_seed;

	my %entry_ballots = $m->comp(
		"/funclib/round_ballot_strings.mas",
		round => $from
	) if $from;

	my @ineligibles = $m->comp(
		"/funclib/event_entry_settings.mas",
			event => $event,
			tag   => "no_elims"
		);

	my %ineligible = map {$_->entry->id => $_->value} @ineligibles;

	my $advance_target;
	my $target_count;
	my %break_targets;

</%init>


	<div class="main">

		<& "/funclib/tablesorter.mas", table => "breaks" &>

<%perl>

		if ($from) {

			my $event_type = $event->type;
			$event_type = "debate" if $event_type eq "wsdc";

			my @results = $m->comp(
				"/tabbing/results/order_entries.mas",
					round    => $from,
					breakout => $breakout
			);

			my $results_ref = pop @results if @results;

			my $equal_elims++
				if $from->protocol->setting('equal_elims');

			my $round_robin++
		   		if $event->setting('round_robin')
				&& $from->type ne "elim"
				&& $from->type ne "final"
				&& $from->type ne "runoff";

			if ($from_id && ($event_type eq "debate" || $event_type eq "wsdc")) {

				Tab::Panel->set_sql( unscored_byes =>  "
					select distinct panel.*
						from panel,ballot b1, ballot b2
					where panel.bye = 1
						and panel.round = ?
						and panel.id = b1.panel
						and panel.id = b2.panel
						and b2.entry != b1.entry
						and b1.bye = 0
						and b1.forfeit = 0
						and b2.bye = 0
						and b2.forfeit = 0
						and not exists
					(
						select score.* from score, ballot
						where score.ballot = ballot.id
							and ballot.panel = panel.id
							and score.tag    = 'winloss'
					)
				");

				my @undone_byes = Tab::Panel->search_unscored_byes($from_id);

				if (@undone_byes) {
					my $err = " You have coachovers or byes without a winner marked.";
					$err .= " Enter their results by clicking the BYE on the rounds in question ";
					$m->redirect("/panel/schemat/show.mhtml?from_id=".$from_id."&err=".$err);
				}

			}

			if (
				$from &&
				(
					$from->type eq "prelim"
					|| $from->type eq "highhigh"
					|| $from->type eq "highlow"
				)
			) {

				my @priorities = sort {$a <=> $b} keys %{$results_ref->{tb_tiers}};
				my $top = $priorities[0];

				my $first;
				unless ( (not defined $results_ref->{tb_tiers}{$top})
					|| scalar @{$results_ref->{tb_tiers}{$top}} != 1
				) {
					$first = shift @{$results_ref->{tb_tiers}{$top}};
				}

				if ($first && $results_ref->{tb_info}{$first}{"name"} eq "winloss") {
					foreach my $entry_id (sort keys %{$results_ref->{"tbs"}}) {
						$break_targets{$results_ref->{tbs}{$entry_id}{1}}++;
					}
				}
			}

			my $results_count;

			if (
				$event_type eq "debate"
				&& $from->type eq "elim"
			) {

</%perl>
				<div class="full nospace centeralign blueborderbottom padbottom marbottom">

					<h4 class="ltborderbottom padbottom">
						Advance from <% $from->realname %> of <% $event->abbr %>
					</h4>
<%perl>

					my %winners;
					my %losers;
					my %out;

					my $dbh = Tab::DBI->db_Main();

					my $sth = $dbh->prepare("
						select entry.id, panel.bracket
						from entry, ballot, panel
						where entry.id = ballot.entry
							and ballot.panel = panel.id
							and panel.round = ?
					");

					$sth->execute($from->id);

					while(
						my (
							$entry_id, $panel_bracket
						) = $sth->fetchrow_array()
					) {
						unless ($panel_bracket) {
							$m->comp("/funclib/abort.mas",
								message => "Your elim panels are horked.  There are no bracket numbers listed for each section so Tabroom cannot advance to the next debate.  Go to the pairing for ".$from->realname.", click Manual Adjust, and fix your brackets."
							);
						}

						$results_ref->{bracket}{$entry_id} = $panel_bracket;
					}

					my $result_sth = $dbh->prepare("
						select
							panel.id, ballot.entry, ballot.side, score.value
							from (ballot, panel)
								left join score on ballot.id = score.ballot and score.tag = 'winloss'
							where panel.round = ?
								and panel.id = ballot.panel
								and ballot.id = score.ballot
								and score.tag = 'winloss'
								and panel.bye != 1
					");

					my $aff_label = $event->setting("aff_label");
					my $neg_label = $event->setting("neg_label");

					$result_sth->execute($from->id);

					my %panels;

					while (
						my (
							$panel_id, $entry_id, $side, $win
						) = $result_sth->fetchrow_array()
					) {
						$panels{total}{$panel_id}++ if $win == 1;
						$panels{by_panel}{$panel_id}{$entry_id} += $win;
						$panels{by_entry}{$entry_id}{panel} = $panel_id;
						$panels{by_entry}{$entry_id}{side}  = $side;
					}

					my $pads;
					my $loser_pads;

					my $num_entries = scalar (keys %{$results_ref->{"tbs"}});
					my $winners_bracket_target = &bracket($num_entries);

					if ($event->setting("double_elimination")) {

						my @priorities = sort {$a <=> $b} keys %{$results_ref->{tb_tiers}};
						my $top = shift @priorities;

						my $first;
						my $err;

						if (
							(not defined $results_ref->{tb_tiers}{$top})
							|| scalar @{$results_ref->{tb_tiers}{$top}} != 1
						) {
							$err++
						} else {
							$first = shift @{$results_ref->{tb_tiers}{$top}};
						}

						if ( $results_ref->{tb_info}{$first}{"name"} ne "losses"
							|| $results_ref->{tb_info}{$first}{count} ne "elim"
						) {
							$err++
						}

						if ($err) {
							my $err = "In order for double elimination brackets to work properly, ";
							$err .= "the first tiebreaker for ";
							$err .= "elim rounds must be set to 'Losses in Elims'";
							$m->redirect("/setup/rules/tiebreaks.mhtml?protocol_id=".$from->protocol->id."&err=$err");
						}

						foreach my $entry_id (
							sort {
								$results_ref->{tbs}{$a}{1} <=> $results_ref->{tbs}{$b}{1}
								|| $results_ref->{bracket}{$a} <=> $results_ref->{bracket}{$b}
							} keys %{$results_ref->{"tbs"}}
						) {

							my $bracket_seed = $results_ref->{bracket}{$entry_id};

							if ($results_ref->{tbs}{$entry_id}{1} == 0) {

								# I advance to the winners bracket if I have no losses
								$winners{$bracket_seed}{id} = $entry_id;
								$winners{$bracket_seed}{code} = $results_ref->{code}{$entry_id};

							}
						}

						my $num_winners = scalar (keys %winners);

						foreach my $entry_id (
							sort {
								$results_ref->{tbs}{$a}{1} <=> $results_ref->{tbs}{$b}{1}
								|| $results_ref->{bracket}{$a} <=> $results_ref->{bracket}{$b}
							} keys %{$results_ref->{"tbs"}}
						) {

							my $bracket_seed = $results_ref->{bracket}{$entry_id};

							if ($results_ref->{tbs}{$entry_id}{1} == 1) {

								my $losers_seed = $bracket_seed;

								if ($losers_seed <= $num_winners) {
									$losers_seed = ($winners_bracket_target + 1) - $bracket_seed;
								}

								# I advance to the losers bracket if I have 1 loss
								$losers{$losers_seed}{id} = $entry_id;
								$losers{$losers_seed}{code} = $results_ref->{code}{$entry_id};

							} elsif ($results_ref->{tbs}{$entry_id}{1} == 0) {

							} else {

								# YOU ARE THE WEAKEST LINK.  GOODBYE.
								$out{$bracket_seed}{id} = $entry_id;
								$out{$bracket_seed}{code} = $results_ref->{code}{$entry_id};
							}
						}

						$loser_pads = scalar(keys %winners) - scalar(keys %losers);
						$loser_pads = 0 unless $loser_pads > 0;

						$pads = scalar(keys %losers) - scalar(keys %out);
						$pads = 0 unless $pads > 0;

						$fixed_start_seed = 1;
						$fixed_end_seed = scalar %winners + scalar %losers;

					} else {

						foreach my $entry_id (sort keys %{$results_ref->{"tbs"}}) {

							# I advance if I won the last round

							if ($results_ref->{tbs}{$entry_id}{1} == 1) {
								$winners{$results_ref->{bracket}{$entry_id}}{id} = $entry_id;
								$winners{$results_ref->{bracket}{$entry_id}}{code} = $results_ref->{code}{$entry_id};
							} else {

								# YOU ARE THE WEAKEST LINK.  GOODBYE.
								if ($results_ref->{bracket}{$entry_id}) {
									$out{$results_ref->{bracket}{$entry_id}}{code} = $results_ref->{code}{$entry_id};
									$out{$results_ref->{bracket}{$entry_id}}{id} = $entry_id;
								}
							}
						}

						$pads = scalar(keys %winners) - scalar(keys %out);

						$fixed_start_seed = 1;
						$fixed_end_seed = scalar %winners;

					}

					my $num_winners = (scalar(keys %winners));
				    my $target_bracket = 2;

					my $num_quals;

					if ($tourn_settings->{'nsda_district'}
						&& $event_type eq "debate"
					) {

						my @junque;
					    ($num_quals, @junque) =
							$m->comp("/funclib/nsda/qualifier_count.mas", event => $event);
					}

					while ($target_bracket < $num_winners) {
						$target_bracket = $target_bracket * 2;
					}

					my $seed_factor = ($target_bracket * 2) + 1;

					foreach my $seed (sort {
							$a <=> $b
						} keys %losers
					) {

						my $entry_id = $losers{$seed}{id};
						my $panel_id = $panels{by_entry}{$entry_id}{panel};
						my $record;

						if ($seed <= $num_winners) {

							my $new_seed = $seed + $num_winners;

							$losers{$new_seed}{id} = $losers{$seed}{id};
							$losers{$new_seed}{code} = $losers{$seed}{code};

							delete($losers{$seed});

							$losers{$new_seed}{"record"} =
								($panels{total}{$panel_id} - $panels{by_panel}{$panel_id}{$entry_id})
								."-".$panels{by_panel}{$panel_id}{$entry_id};

							$losers{$new_seed}{"bracket"} = 0;


						} else {

							$losers{$seed}{"bracket"} = 1;
							$losers{$seed}{"record"} = $panels{by_panel}{$panel_id}{$entry_id}."-".
								($panels{total}{$panel_id} - $panels{by_panel}{$panel_id}{$entry_id});
						}

					}

					$results_count = scalar(keys %out) + scalar(keys %losers) + scalar (keys %winners);

					if ($tourn_settings->{'nsda_district'}
						&& $event_type eq "debate"
						&& $num_entries == 4
						&& $num_quals == 3
						&& (not defined $event->setting("double_elimination"))
					) {
</%perl>

						<p class="biggish semibold bluetext centeralign">
							Your district qualifies <% $num_quals %> to Nationals in <% $event->abbr%>.
							<br /><br />Semifinal winners are now qualified to Nationals.
							<br /><br />Losers of semifinals must debate for the final spot.
						</p>
%					}

%					if (%winners) {

						<span class="third top leftalign">

<%perl>
						if ($tourn_settings->{'nsda_district'}
							&& $event_type eq "debate"
							&& $num_entries == 4
							&& $num_quals == 3
							&& (not defined $event->setting("double_elimination"))
						) {

</%perl>
							<h5 class="bluetext semibold">
								<span class="fifth nospace ">
									<% scalar keys %winners %>
								</span>
								<span class="nospace threequarters">
									Qualified
								</span>
							</h5>


%						} else {

							<h5 class="bluetext semibold">
								<span class="fifth nospace ">
									<% scalar keys %winners %>
								</span>
								<span class="nospace threequarters">
									<% %losers ? "No-Loss" : "Advancing" %>
								</span>
							</h5>
%						}
<%perl>
							foreach my $seed (sort {$a <=> $b} keys %winners) {

								my $entry_id = $winners{$seed}{id};
								my $side = $panels{by_entry}{$entry_id}{side};
</%perl>
								<div class="nospace padvertless ltbordertop ltborderbottom">
									<span class="fifth semibold bluetext">
										<% $seed %>.
									</span>
									<span class="threefifths nospace nowrap">
										<% $winners{$seed}{code} %>
									</span>
									<span class="fifth semibold bluetext">
										<% $side == 1
											? $aff_label
											: $side == 2
												? $neg_label
												: "<span class='graytext italic normalweight inline'>Bye</span>"
										%>
									</span>
								</div>
%							}

						</span>
%					}

%					if (%losers) {

						<span class="third top marleft leftalign">
							<h5 class="greentext semibold">
								<span class="fifth nospace ">
									<% scalar(keys %losers) %>
								</span>
								<span class="nospace threequarters">
									One Loss
								</span>
							</h5>

%							if ($loser_pads) {
%								foreach (1 .. $loser_pads) {
									<div class="nospace padvertless whitebordertop whiteborderbottom">
										<span class="threequarters italic graytext">
											&nbsp;
										</span>
									</div>
<%perl>
								}
							}

							foreach my $seed ( sort {$b <=> $a } keys %losers) {

								next if $losers{$seed}{"bracket"} != 0;

								my $entry_id = $losers{$seed}{id};
								my $panel_id = $panels{by_entry}{$entry_id}{panel};
								my $side = $panels{by_entry}{$entry_id}{side};

</%perl>
								<div class="nospace padvertless ltbordertop ltborderbottom">
									<span class="fifth semibold bluetext">
										<% $seed %>.
									</span>

									<span class="threefifths nospace nowrap">
										<% $losers{$seed}{code} %>
									</span>

									<span class="fifth semibold bluetext">
										<% $side ? $losers{$seed}{"record"} : "<span class='graytext italic normalweight inline'>Bye</span>" %>
									</span>
								</div>
%							}

<%perl>
							foreach my $seed ( sort {$a <=> $b } keys %losers) {

								next if $losers{$seed}{"bracket"} != 1;

								my $entry_id = $losers{$seed}{id};
								my $panel_id = $panels{by_entry}{$entry_id}{panel};
								my $side = $panels{by_entry}{$entry_id}{side};

</%perl>
								<div class="nospace padvertless ltbordertop ltborderbottom">
									<span class="fifth semibold bluetext">
										<% $seed %>.
									</span>

									<span class="threefifths nospace nowrap">
										<% $losers{$seed}{code} %>
									</span>

									<span class="fifth semibold bluetext">
										<% $side ? $losers{$seed}{"record"} : "<span class='graytext italic normalweight inline'>Bye</span>" %>
									</span>
								</div>
%							}

						</span>
%					}

<%perl>
					if (%out) {

						if ($tourn_settings->{'nsda_district'}
							&& $event_type eq "debate"
							&& $num_entries == 4
							&& $num_quals == 3
							&& (not defined $event->setting("double_elimination"))
						) {

</%perl>
							<span class="third top marleftmore leftalign">
								<h5 class="redtext semibold">
									<span class="fifth nospace ">
										<% scalar keys %out %>
									</span>
									<span class="nospace threequarters">
										Must Debate
									</span>
								</h5>

%						} else {
							<span class="third top marleftmore leftalign">
								<h5 class="redtext semibold">
									<span class="fifth nospace ">
										<% scalar keys %out %>
									</span>
									<span class="nospace threequarters">
										Eliminated
									</span>
								</h5>
%						}

%							if ($pads) {
%								foreach (1 .. $pads) {
									<div class="nospace padvertless whitebordertop whiteborderbottom">
										<span class="threequarters italic graytext">
											&nbsp;
										</span>
									</div>
<%perl>

								}
							}

							foreach my $seed (sort {$a <=> $b} keys %out) {

								my $entry_id = $out{$seed}{id};
								my $panel_id = $panels{by_entry}{$entry_id}{panel};
								my $side = $panels{by_entry}{$entry_id}{side};

								my $record = (
									$panels{total}{$panel_id} - $panels{by_panel}{$panel_id}{$entry_id}
								)."-".  $panels{by_panel}{$panel_id}{$entry_id};

</%perl>
								<div class="nospace padvertless ltbordertop ltborderbottom">

									<span class="threefifths nospace nowrap">
										<% $out{$seed}{code} %>
									</span>

									<span class="fifth semibold centeralign bluetext">
										<% $side == 1 ? $aff_label : $neg_label %>
									</span>

									<span class="fifth semibold centeralign">
										<% $record %>
									</span>

								</div>
%							}

						</span>
%					}

				</div>

%			} else {

				<div>

					<span class="pagehalf">
						<h4>Break from <% $from->realname %> of <% $event->abbr %></h4>
					</span>

					<span class="third rightalign smallish">
						Hover mouse over codes to see scores
					</span>

					<span
						id    = "breaks_buttonarea"
						class = "sixth rightalign"
					>
					</span>

				</div>

%				if ($from->type eq "prelim" && $event_type eq "speech" && $equal_elims) {

					<div class="full centeralign semibold martopmore marbottom">

						<h6 class="semibold redtext">
							Warning: You have the equal-sections setting enabled for an IE prelim.
						</h6>

						<p>
							That means your break will draw equal numbers of
							clearing entries from each section of IE prelims in
							<% $from->realname %>.  That's almost certainly a mistake.
						</p>


						<p>
							The "Advance equal entries from each section"
							setting is intended for use in Congress or in IE
							<span class="italic inline semibold">elim rounds</span>
							where you want to advance equal numbers from each section.
						</p>

						<p>
							This setting is enabled on Setup &rarr; Rules &amp;
							Results &rarr; Tiebreakers.  Please disable it
							unless you are very clear on what you're about to
							do.
						</p>
					</div>

%				} elsif ($event_type eq "congress" && (not defined $equal_elims)) {

%					# RIP Stanford 2k20 and the Protest over ????
					<div class="full centeralign semibold martopmore marbottom">

						<h6 class="semibold redtext">
							Warning: Equal-chamber advancing NOT enabled
						</h6>

						<p>
							That means your break may draw more entries from
							one chamber than another.  That's almost never the
							desired result for Congress events.
						</p>

						<p>
							This setting is enabled on Setup &rarr; Rules &amp;
							Results &rarr; Tiebreakers.  Please enable it
							unless you are very clear on what you're about to
							do.
						</p>
					</div>
%				}

<%perl>
				if (
					$tourn_settings->{"nsda_district"}
					&& $from
					&& $from->type eq "prelim"
				) {

					$tourn_settings->{advance_target} = .25
						unless $tourn_settings->{advance_target};

					$advance_target = Math::Round::nearest(
						1,
						(scalar($event->entries(active => 1))) * $tourn_settings->{advance_target}
					);
</%perl>

					<div class="full nospace semibold bluetext marbottom">
						<span class="half centeralign">
							<% scalar($event->entries(active => 1)) %> active entries
						</span>

						<span class="half centeralign">
							Target to advance: <% $advance_target %>
						</span>
					</div>
%				}

				<div class="fullnoscroll">

				<table id="breaks">

					<thead>

						<tr class="yellowrow">

							<th class="smallish nospace centeralign">P</th>

							<th class="smallish">
								Code
							</th>

%	                       if ($equal_elims) {
								<th class="smaller" title="Rank within room">
									ScRk
								</th>
								<th class="smaller" title="Room/section">
									Sect
								</th>
%	                       }  elsif ($round_robin) {
								<th class="smaller" title="Rank within Pod">
									PodRk
								</th>
								<th class="smaller" title="Pod">
									Pod
								</th>
%	                       }

<%perl>
							foreach my $key (sort {$a <=> $b} keys %{$results_ref->{"tier_description"}}) {

								if ($from->type eq "prelim") {
									${$results_ref}{"tier_description"}{$key} =~ s/Pm//g;
								} elsif ($from->type eq "elim") {
									${$results_ref}{"tier_description"}{$key} =~ s/Em//g;
								}
</%perl>
								<th
									class="smallish centeralign"
									title="<% ${$results_ref}{"tier_long_description"}{$key} %>"
								>
									<% ${$results_ref}{"tier_description"}{$key} %>
								</th>
%							}

							<th>
							</th>

						</tr>

					</thead>
					<tbody>

<%perl>
						my $count;

						$results_count = scalar(keys %{$results_ref->{'by_place'}});

						foreach my $key (sort {$a <=> $b} keys %{$results_ref->{'by_place'}}) {

							my $tie++ if scalar @{${$results_ref}{"by_place"}{$key}} > 1;

							foreach my $entry_id (@{${$results_ref}{"by_place"}{$key}}) {
</%perl>

								<tr
									<% $ineligible{$entry_id}
										? 'title="Marked Ineligible To Clear"' : ""
									%>
									class=" nospace
										<% $tie ? "lirdrow" : "" %>
										<% $ineligible{$entry_id} ? "strike" : "" %>
										<% $tie == 1 ? "libordertop" : "" %>"
									>

%									$tie++ if $tie;

									<td class="centeralign smallish nowrap" style="width: 25px;">
										<% $key %><% $tie ? "-T" : "" %>
									</td>

									<td class="smallish nowrap" style="width: 50px;">
										<span title="<% $entry_ballots{$entry_id} %>">
											<% ${$results_ref}{"code"}{$entry_id} %>
										</span>
									</td>

%	                               if ($equal_elims) {

										<td class="smallish centeralign">
											<% ${$results_ref}{"section_rank"}{$entry_id} %>
										</td>
										<td class="smallish centeralign">
											<% ${$results_ref}{"section"}{$entry_id} %>
										</td>

%									} elsif ($round_robin) {

										<td class="smallish centeralign">
											<% ${$results_ref}{"pod_rank"}{$entry_id} %>
										</td>
										<td class="smallish centeralign">
											<% ${$results_ref}{"pod"}{$entry_id} %>
										</td>

%	                               }

<%perl>
									foreach my $key (
										sort {$a <=> $b} keys %{$results_ref->{"tier_description"}}
									) {

										my $digits = '%.'.$results_ref->{"tb_digits"}{$key}.'f';
										my $value = ${$results_ref}{"tbs"}{$entry_id}{$key};
										$value =~ s/\.(?:|.*[^0]\K)0*\z//;
										$value = sprintf($digits, $value);
</%perl>

										<td class="smallish nowrap rightalign">
											<% $value %>
										</td>
%									}

									<td class="centeralign smallish nowrap" style="width: 25px;">
										<% ${$results_ref}{"forfeit"}{$entry_id} ? "NS" : $count++ + 1%>
									</td>

								</tr>
<%perl>

							}

							if ($tourn_settings->{"nsda_district"} && $from && $from->type eq "prelim") {

								if ((not defined $target_count) && ($count >= $advance_target)) {
									$target_count = $count;
								}
							}
						}
</%perl>
						</tbody>
					</table>
				</div>
%			}

			<p class="centeralign semibold bluetext">
				<% $results_count %> Total Entries
			</p>
%		}

	</div>

	<& "menu.mas",
		tourn            => $tourn,
		perms            => $perms,
		tourn_settings   => $tourn_settings,
		person_settings  => $person_settings,
		person           => $person,
		event            => $event,
		from             => $from,
		into             => $into,
		breakout         => $breakout,
		target_count     => $target_count,
		fixed_start_seed => $fixed_start_seed,
		fixed_end_seed   => $fixed_end_seed,
		break_targets    => \%break_targets
	&>

<%perl>

	sub bracket {
		my $number = shift;
		my $counter = 1;

		return unless $number > 1;

		while ($counter < $number) {
			$counter = $counter * 2;
		}

		return $counter;
	}

</%perl>

