<%args>
	$round
	$never_redirect => undef
	$rubric_tag     => "Witness"
</%args>
<%init>

	return unless $round;

	use POSIX;

	my $event = $round->event;
	my $tourn = $event->tourn;
	my $seed  = $tourn->start->epoch;

	my %event_settings = $event->all_settings();

	my $speaker_max_scores   = $event_settings{"speaker_max_scores"};
	my $speaker_min_speeches = $event_settings{"speaker_min_speeches"};
	my $include_wsdc_reply   = $event_settings{"include_wsdc_reply"};
	my $protocol_id      = $event_settings{"speaker_protocol"};
	my $protocol         = Tab::Protocol->retrieve($protocol_id) if $protocol_id;

	my $point_tag = "point";

	if ($event_settings{"speakers_rubric"}) {
		$point_tag = "speaker";
	}

	unless ($protocol) {

		my $err;
		$err .= "Event ".$event->name." does not have a speaker awards tiebreaker set applied to it. ";
		$err .= "Please pick one and try again";

		$m->abort if $never_redirect;
		$m->redirect("/setup/events/tabbing.mhtml?event_id=".$event->id."&err=$err");
	}

	my $round_robin++ if $event_settings{"round_robin"};
	undef $round_robin if $round->type eq "elim" || $round->type eq "final";
	my $show_averages++ if $event_settings{"show_averages"};

	#Settings
	my $truncate             = $protocol->setting("truncate_ranks_to") if $protocol->setting("truncate_ranks_to");
	my $truncate_to_smallest = $protocol->setting("truncate_to_smallest");
	my $forfeits_never_break = $protocol->setting("forfeits_never_break");

	undef $forfeits_never_break if $speaker_max_scores;

	my %used_tier = ();
	my $all;
	my $elim;

	my %tb_tiers = ();
	my %tbid_tiers = ();

	foreach my $tb ($protocol->tiebreaks) {
		$used_tier{$tb->count}++;
		$all++ if $tb->count eq "all";
		$elim++ if $tb->count eq "elim";
		push @{$tb_tiers{$tb->priority}}, $tb;
		push @{$tbid_tiers{$tb->priority}}, $tb->id;
	}

	# Get the data you'll need for Teh Sortingz.

	my $dbh = Tab::DBI->db_Main();

    my %entry_data;
	my %student_data;
	my %round_data;
	my %panel_data;

	my %scores;
	my @rounds;
	my @scores;
	my @students;
	my @entries;

	my $last_elim_wins;

	my $sth = $dbh->prepare("

		select score.id,
			student.id, student.first, student.last, student.novice,
			entry.id, entry.code, dq.value dq,
			round.type, round.name, round.id,
			score.tag, score.value, event.id, panel.id,
			score.speech,
			ballot.judge, ballot.forfeit, ballot.tv, panel.letter,
			school.id, ballot.chair, ballot.bye, panel.bye

		from (ballot, panel, round, event, entry, entry_student es, student)

		left join entry_setting dq on dq.entry = entry.id and dq.tag = 'dq'

		left join school on school.chapter = student.chapter
			and school.tourn = event.tourn

		left join score on score.ballot = ballot.id
			and score.student = student.id

		where ballot.panel = panel.id
		and panel.round    = round.id

		and not exists (
			select round_setting.id from round_setting where
			round_setting.tag = 'ignore_results'
			and round_setting.round = round.id
		)

		and round.event  = event.id
		and event.id     = ?
		and ballot.entry = entry.id

		and entry.dropped != 1
		and entry.waitlist != 1

		and entry.id = es.entry
		and es.student = student.id
		group by ballot.id, student.id, score.id
		order by event.id, round.name
	");

	$sth->execute($event->id);

	while (
		my ($id,
			$student, $first, $last, $novice,
			$entry, $code, $dq, $type, $roundname, $round, $tag, $value,
			$event, $panel, $speech,
			$judge, $forfeit, $tv, $letter,
			$school, $chair, $bye, $pbye
		)  = $sth->fetchrow_array()
	) {

		if (
			$speech
			&& $rubric_tag
			&& $event_settings{"speakers_rubric"}
			&& ($event_settings{"speakers_rubric"}{$speech}{"tag"} ne $rubric_tag)
		) {
			next;
		}

		push @rounds, $round;
		$round_data{"type"}{$round} = $type;

		$round_data{"type"}{$round} = "prelim"
			if $type eq "preset"
			|| $type eq "highhigh"
			|| $type eq "highlow";

		$round_data{"name"}{$round} = $roundname;
		push @{$round_data{"panels"}{$round}}, $panel;

		push @students, $student;
		push @entries, $entry;
		push @{$entry_data{"scores"}{$entry}}, $id;
		push @{$entry_data{"students"}{$entry}}, $student;
		push @{$student_data{"panels"}{$student}}, $panel;
		push @{$student_data{"round_scores"}{$student}{$round}}, $id;

		$student_data{"code"}{$student}   = $code;
		$student_data{"name"}{$student}   = $first." ".$last;
		$student_data{"school"}{$student} = $school;
		$student_data{"event"}{$student}  = $event;
		$student_data{"novice"}{$student} = $novice;
		$student_data{"dq"}{$student}     = $dq;

		if ($forfeit) {
			$student_data{"forfeit"}{$student}++;
			$student_data{"round_forfeit"}{$student}{$round}++;
		} elsif ($bye || $pbye) {
			$entry_data{"round_bye"}{$entry}{$round}++;
			$student_data{"round_bye"}{$student}{$round}++;
			$student_data{"bye"}{$student}++;
		}

		$student_data{"entry"}{$student} = $entry;

		push @scores, $id;
		$scores{$id}{"tag"}     = $tag;
		$scores{$id}{"student"} = $student;
		$scores{$id}{"value"}   = $value;
		$scores{$id}{"panel"}   = $panel;
		$scores{$id}{"judge"}   = $judge;
		$scores{$id}{"event"}   = $event;
		$scores{$id}{"chair"}++ if $chair;
		$scores{$id}{"tv"} = $tv if $tv;

		$panel_data{"letter"}{$panel} = $letter;
		$panel_data{"round_name"}{$panel} = $roundname;
		push @{$panel_data{"entries"}{$panel}}, $entry;

	}

	my %rseen = ();
	@rounds = grep { ! $rseen{$_}++ } @rounds;

	my @all_rounds;

	my %round_done;
	my $round_name = $round->name;

	foreach my $all_round (@rounds) {

		# Do not measure the future
		next if $round_data{"name"}{$all_round} > $round_name;

		push @all_rounds, $all_round;

		# Uniq the panels so there's no double counting
		my %pseen = ();
		@{$round_data{"panels"}{$all_round}} = grep { ! $pseen{$_}++ } @{$round_data{"panels"}{$all_round}};

		# Uniq the panel entries so there's no double counting;
		foreach my $panel (@{$round_data{"panels"}{$all_round}}) {
			my %eseen = ();
			@{$panel_data{"entries"}{$panel}} = grep { ! $eseen{$_} ++ } @{$panel_data{"entries"}{$panel}};
		}
	}

	foreach my $entry (@entries) {
		my %studentseen = ();
		@{$entry_data{"students"}{$entry}} = grep { ! $studentseen{$_} ++ } @{$entry_data{"students"}{$entry}};
	}

	my %dq_panel_threshold = ();

	my @keys = keys %{$student_data{"dq"}};
	my %done_entry;
	my $event_type = $event->type;

	if ($event_type eq "speech" || $event_type eq "congress") {

		foreach my $student (keys %{$student_data{"dq"}}) {
			next unless $student_data{"dq"}{$student};

			my $entry = $student_data{"entry"}{$student};

			next if $done_entry{$entry}++;

			foreach my $score (@{$entry_data{"scores"}{$entry}}) {
				next unless $scores{$score}{"tag"} eq "rank";
				$dq_panel_threshold{$scores{$score}{"panel"}}{$scores{$score}{"judge"}} = $scores{$score}{"value"};
			}
		}
	}

	my %round_truncate = ();

	foreach my $round (@all_rounds) {

		foreach my $panel (@{$round_data{"panels"}{$round}}) {
			my $size = scalar @{$panel_data{"entries"}{$panel}} if $panel_data{"entries"}{$panel};
			$round_truncate{$round} = $size unless $round_truncate{$round};
			$round_truncate{$round} = $size if $round_truncate{$round} > $size;
		}
	}

	my %sseen = ();
	@students = grep { ! $sseen{$_} ++ } @students;

	my %eseen = ();
	@entries = grep { ! $sseen{$_} ++ } @entries;

	my $bye_min;

	if ($round_robin) {
		foreach my $student (sort {$student_data{"bye"}{$b} <=> $student_data{"bye"}{$a}} @students) {
			$bye_min = $student_data{"bye"}{$student} if $student_data{"bye"}{$student} && not defined $bye_min;
			$bye_min = $student_data{"bye"}{$student} if $student_data{"bye"}{$student} < $bye_min;
		}
	}

	if ($round && ($round->type eq "elim" || $round->type eq "final")) {

		# Eliminate everyone who has not advanced to the elim round in
		# question.

		my @counted;
		my %last_round;
		my %done;

		foreach my $student (@students) {

			next if $done{$student}++;

			foreach my $panel (@{$student_data{"panels"}{$student}}) {

				$last_round{$student} = $panel_data{"round_name"}{$panel}
					if $last_round{$student} < $panel_data{"round_name"}{$panel};
			}

			next if $last_round{$student} < $round_name;
			push @counted, $student;
		}

		@students = @counted;
	}

	my %entry_tbs = ();
	my %tier_dir = ();
	my %tier_descs = ();
	my %tier_long_descs = ();

	my $win_loss;
	my $judge_var;
	my $judge_var2;

	my @rinr_rounds;

	foreach my $key (sort {$a <=> $b} keys %tb_tiers) {

		foreach my $tb (sort {$a <=> $b} @{$tb_tiers{$key}}) {

			$win_loss++ if $tb->name eq "winloss";
			$win_loss++ if $tb->name eq "ballots";
			$win_loss++ if $tb->name eq "opp_wins";
			$judge_var++ if $tb->name eq "judgevar";
			$judge_var2++ if $tb->name eq "judgevar2";

			if ($tb->name eq "rankinround") {
				foreach my $round (@all_rounds) {
					if ($round_data{"type"}{$round} eq $tb->count) {
						push @rinr_rounds, $round;
					} elsif ($tb->count eq "all") {
						push @rinr_rounds, $round;
					}
				}
			}
		}
	}

	%{$entry_data{"wins"}} = $m->comp(
		"/funclib/entry_wins.mas",
			event => $event,
			round => $round
		) if $win_loss && not defined $last_elim_wins;

	my (
		$judge_avg_ref, $judge_ballot_count_ref,
		$judge_total_ref, $judge_stddev_ref,
		$total_avg, $total_std,
		$judge_z2_avg_ref, $judge_z2_ballot_count_ref,
		$judge_z2_total_ref, $judge_z2_stddev_ref
	) = $m->comp("/funclib/judge_points_average.mas",
		round => $round,
		event => $event
	) if $judge_var || $judge_var2;

	my %entry_rankinround = ();

	my %rinr_seen = ();
	@rinr_rounds = grep { ! $rinr_seen{$_} ++ } @rinr_rounds;

	foreach my $round_id (@rinr_rounds) {

		my $round = Tab::Round->retrieve($round_id);

		my ($entries_ref, @others) = $m->comp("/tabbing/results/order_entries.mas", round => $round);

		my %absolute_rank;

		foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
			foreach my $entry (@{${$entries_ref}{$key}}) {
				$absolute_rank{$entry} = $key;
			}
		}

		foreach my $panel (@{$round_data{"panels"}{$round}}) {
			my $rank = 1;

			foreach my $entry (sort {$absolute_rank{$a} <=> $absolute_rank{$b}} @{$panel_data{"entries"}{$panel}}) {
				$entry_rankinround{$entry."-".$round} = $rank;
				$rank++;
			}
		}
	}

	my $opp_ranks;
	my $opp_points;
	my $ranks;
	my $points;

	my %max_scores;

	ENTRY:
	foreach my $student (@students) {

		my $total_point_count;
		my $total_rank_count;

		my $entry = $student_data{"entry"}{$student};

		ROUND:
		foreach my $this_round (@rounds) {

			my $point_count;
			my $rank_count;

			next if $student_data{"round_bye"}{$student}{$this_round};

			if ($entry_data{"round_bye"}{$entry}{$this_round}) {
				$student_data{"round_bye"}{$student}{$this_round}++;
				$student_data{"bye"}{$student}{$this_round}++;
				next ROUND;
			}

			next if $round_data{"name"}{$this_round} > $round_name;
			my %erseen = ();

			@{$student_data{"round_scores"}{$student}{$this_round}} =
				grep { ! $erseen{$_}++ }
				@{$student_data{"round_scores"}{$student}{$this_round}};

			unless (@{$student_data{"round_scores"}{$student}{$this_round}}) {
				$student_data{"forfeit"}{$student}++;
				next ENTRY;
			}

			my $spoke;

			foreach my $score (@{$student_data{"round_scores"}{$student}{$this_round}}) {

				if ($scores{$score}{"tag"} eq $point_tag) {
					$point_count++;
					$spoke++;
				}

				if ($scores{$score}{"tag"} eq "rank") {
					$rank_count++;
					$spoke++;
				}
			}

			unless ($spoke) {
				$student_data{"didnt_talk"}{$student}++;
			}

			if ($point_count > $max_scores{$point_tag}) {
				$max_scores{$this_round}{$point_tag} = $point_count;
			}

			if ($point_count > $max_scores{"rank"}) {
				$max_scores{$this_round}{"rank"}   = $point_count;
			}

			$total_point_count += $point_count;
			$total_rank_count += $rank_count;
		}

		#If everyone got a bye it's good fam.
		if ($total_point_count > $max_scores{$point_tag}) {
			$max_scores{$point_tag} = $total_point_count;
		}

		if ($total_rank_count > $max_scores{"ranks"}) {
			$max_scores{"ranks"} = $total_rank_count;
		}

	}

	foreach my $priority (sort {$a <=> $b} keys %tb_tiers) {

		my $tier_desc;
		my $tier_long_desc;
		foreach my $tb (sort {$a <=> $b} @{$tb_tiers{$priority}}) {

			my $tb_name = $tb->name;

			$tier_dir{$priority} = "down" if (
				$tb_name eq "winloss" ||
				$tb_name eq "reciprocals" ||
				$tb_name eq "points" ||
				$tb_name eq "ballots" ||
				$tb_name eq "judgepref" ||
				$tb_name eq "opp_points" ||
				$tb_name eq "opp_wins" ||
				$tb_name eq "judgevar" ||
				$tb_name eq "judgevar2");

			$tier_dir{$priority} = "up" if (
				$tb_name eq "ranks" ||
				$tb_name eq "opp_ranks" ||
				$tb_name eq "chair_ranks" ||
				$tb_name eq "rankinround" ||
				$tb_name eq "coinflip");

			$tier_desc .= "+" if $tier_desc;
			$tier_long_desc .= "+" if $tier_long_desc;

			if ($show_averages) {
				$tier_desc .= "AvRnk" if $tb_name eq "ranks";
				$tier_long_desc .= "Average Rank" if $tb_name eq "ranks";

				$tier_desc .= "AvPts" if $tb_name eq "points";
				$tier_long_desc .= "Average Speaker Points" if $tb_name eq "points";

				$tier_desc .= "AvRcp" if $tb_name eq "reciprocals";
				$tier_long_desc .= "Average Reciprocals" if $tb_name eq "reciprocals";

			} else {
				$tier_desc .= "Rnk" if $tb_name eq "ranks";
				$tier_long_desc .= "Ranks" if $tb_name eq "ranks";

				$tier_desc .= "Pts" if $tb_name eq "points";
				$tier_long_desc .= "Speaker Points" if $tb_name eq "points";

				$tier_desc .= "Rcp" if $tb_name eq "reciprocals";
				$tier_long_desc .= "Reciprocals" if $tb_name eq "reciprocals";
			}

			$tier_desc .= "JP" if $tb_name eq "judgepref";
			$tier_long_desc .= "Judge Preferences" if $tb_name eq "judgepref";

			$tier_desc .= "Rand" if $tb_name eq "coinflip";
			$tier_long_desc .= "Random" if $tb_name eq "coinflip";

			$tier_desc .= "ORk" if $tb_name eq "opp_ranks";
			$tier_long_desc .= "Opponents Ranks" if $tb_name eq "opp_ranks";

			$tier_desc .= "CRk" if $tb_name eq "chair_ranks";
			$tier_long_desc .= "Chair Judge Ranks" if $tb_name eq "chair_ranks";

			$tier_desc .= "SRk" if $tb_name eq "rankinround";
			$tier_long_desc .= "Rank within Section" if $tb_name eq "rankinround";

			$tier_desc .= "W" if $tb_name eq "winloss";
			$tier_long_desc .= "Wins" if $tb_name eq "winloss";

			$tier_desc .= "OpW" if $tb_name eq "opp_wins";
			$tier_long_desc .= "Opponent Wins" if $tb_name eq "opp_wins";

			$tier_desc .= "OPt" if $tb_name eq "opp_points";
			$tier_long_desc .= "Opponent Points" if $tb_name eq "opp_points";

			$tier_desc .= "Z" if $tb_name eq "judgevar";
			$tier_long_desc .= "Judge Points Variance" if $tb_name eq "judgevar";

			$tier_desc .= "Z2" if $tb_name eq "judgevar2";
			$tier_long_desc .= "Adjusted Judge Points Variance" if $tb_name eq "judgevar2";

			$tier_desc .= "Bal" if $tb_name eq "ballots";
			$tier_long_desc .= "Ballot Total" if $tb_name eq "ballots";

			$points++ if $tb_name eq "points";
			$ranks++ if $tb_name eq "ranks";

			$opp_points++ if $tb_name eq "opp_points" && not defined $points;
			$opp_ranks++ if $tb_name eq "opp_ranks" && not defined $ranks;

			my $tb_highlow = $tb->highlow;

			if ($tb_highlow) {

				$tier_desc .= " -".$tb->highlow_count;
				$tier_long_desc .= " -".$tb->highlow_count;

				$tier_desc .= "HL" if $tb_highlow == 1 || $tb_highlow == 2;
				$tier_long_desc .= " Best & Worst" if $tb_highlow == 1 || $tb_highlow == 2;

				$tier_desc .= "H" if $tb_highlow == 3;
				$tier_long_desc .= " Best" if $tb_highlow == 3;

				$tier_desc .= "L" if $tb_highlow == 4;
				$tier_long_desc .= " Worst" if $tb_highlow == 4;
			}

			$tier_long_desc .= " in ".ucfirst($tb->count) if $tb->count;
			$tier_long_desc .= " Rounds" if $tb->count && ($tb->count eq "all");
			$tier_long_desc .= "s" if $tb->count && ($tb->count eq "prelim" || $tb->count eq "elim");
			$tier_long_desc .= " multplied by ".$tb->multiplier if $tb->multiplier != 1;
			$tier_desc .= " x".$tb->multiplier if $tb->multiplier != 1;

			$points++ if $opp_points;
			$opp_ranks++ if $opp_ranks;
		}

		$tier_descs{$priority} = $tier_desc;
		$tier_long_descs{$priority} = $tier_long_desc;

		my %tb_rounds;
		my %tb_info = ();

		foreach my $tb (@{$tb_tiers{$priority}}) {

			$tb_info{$tb->id}{"name"}          = $tb->name;
			$tb_info{$tb->id}{"chair"}         = $tb->chair;
			$tb_info{$tb->id}{"highlow"}       = $tb->highlow;
			$tb_info{$tb->id}{"highlow_count"} = $tb->highlow_count;
			$tb_info{$tb->id}{"multiplier"}    = $tb->multiplier;
			$tb_info{$tb->id}{"violation"}     = $tb->violation;
			$tb_info{$tb->id}{"truncate"}      = $tb->truncate;

			$tb_info{$tb->id}{"truncate"} = $truncate
				if $truncate && $truncate < $tb_info{$tb->id}{"truncate"};

			$tb_info{$tb->id}{"truncate_smallest"} = $tb->truncate_smallest;
			$tb_info{$tb->id}{"truncate_smallest"} = $truncate_to_smallest if $truncate_to_smallest;

			foreach my $oround (@all_rounds) {

				push (@{$tb_rounds{$tb->id}}, $oround) if $round_data{"type"}{$oround} eq $tb->count;
				push (@{$tb_rounds{$tb->id}}, $oround) if $tb->count eq "all";
				push (@{$tb_rounds{$tb->id}}, $oround)
					if ($round_data{"type"}{$oround} eq "elim"
						|| $round_data{"type"}{$oround} eq "final")
					&& (
						$tb->count eq "last elim"
						|| $tb->count eq "last_elim"
						|| $tb->count eq "previous"
					);
			}
		}

		STUDENT:
		foreach my $student (@students) {

			my $entry = $student_data{"entry"}{$student};

			my %seen = ();
			@{$student_data{"panels"}{$student}} = grep { ! $seen{$_} ++ } @{$student_data{"panels"}{$student}};

			my $tier_total;

			foreach my $tb (@{$tbid_tiers{$priority}}) {

				my $name = $tb_info{$tb}{"name"};
				next unless $tb_rounds{$tb};
				my @rounds = @{$tb_rounds{$tb}};

				my $total;

				if ($name eq "winloss") {

					$total += 100 * $entry_data{"wins"}{$entry};

				# RANKS RECIPS RECIPROCALS

				} elsif (
					$name eq "ranks"
					|| $name eq "reciprocals"
					|| $name eq "chair_ranks"
				) {

					my %round_count;
					my @rank_scores;

					foreach my $this_round (@rounds) {

						my $done;

						foreach my $score (@{$student_data{"round_scores"}{$student}{$this_round}}) {

							if ($scores{$score}{"tag"} eq "rank") {

								next if $name eq "chair_ranks" && $scores{$score}{"chair"} < 1;

								$done++;
								$round_count{$this_round}++;

								my $rank = $scores{$score}{"value"};

								if ($dq_panel_threshold{$scores{$score}{"panel"}}{$scores{$score}{"judge"}}) {
									$rank-- if $dq_panel_threshold{$scores{$score}{"panel"}}{$scores{$score}{"judge"}} < $rank;
								}

								# Bump the rank up if it's a time violation.
								# Truncation below will correct if this makes
								# it bigger (ie if the TV was last place);

								if ($scores{$score}{"tv"} && $tb_info{$tb->id}{"violation"}) {
									$rank += $tb_info{$tb->id}{"violation"};
								}

								# Promote anyone over the hard cap for truncation

								$rank = $tb_info{$tb}{"truncate"}
									if $tb_info{$tb}{"truncate"}
									&& ($rank > $tb_info{$tb}{"truncate"})
									&& $round_data{"type"}{$this_round} eq "prelim";

								# Promote anyone over the per-round floating cap for truncation

								$rank = $round_truncate{$this_round}
									if $tb_info{$tb}{"truncate_smallest"}
									&& $rank > $round_truncate{$this_round}
									&& $round_data{"type"}{$this_round} eq "prelim";

								if ($event_type eq "speech" || $event_type eq "congress") {

									#Rank cannot be greater than the size of the round

									$rank = scalar @{$panel_data{"entries"}{$scores{$score}{"panel"}}}
										if $rank > scalar @{$panel_data{"entries"}{$scores{$score}{"panel"}}};
								}

								push @rank_scores, $rank
									if $name eq "ranks" || $name eq "chair_ranks";

								push @rank_scores, (1 / $rank)
									if $rank && $name eq "reciprocals";

							}
						}
					}

					@rank_scores = sort {$a <=> $b} @rank_scores;

					my $multiplier = $max_scores{"ranks"};

					if ($speaker_max_scores) {
						while (scalar @rank_scores > $speaker_max_scores) {
							$multiplier--;
							pop @rank_scores if $name eq "ranks" || $name eq "chair_ranks";
							shift @rank_scores if $name eq "reciprocals";
						}
					}

					if ($tb_info{$tb}{"highlow"} == 1 || $tb_info{$tb}{"highlow"} == 3) {

						# Drop the best (lowest for ranks, highest for recips)

						foreach (1 .. $tb_info{$tb}{"highlow_count"}) {
							$multiplier--;
							shift @rank_scores if $name eq "ranks" || $name eq "chair_ranks";
							pop @rank_scores if $name eq "reciprocals";
						}
					}

					if ($tb_info{$tb}{"highlow"} == 1 || $tb_info{$tb}{"highlow"} == 4) {

						# Drop the worst (highest)

						foreach (1 .. $tb_info{$tb}{"highlow_count"}) {
							$multiplier--;
							pop @rank_scores if $name eq "ranks" || $name eq "chair_ranks";
							shift @rank_scores if $name eq "reciprocals";
						}
					}

					my $average_total;

					foreach my $score (@rank_scores) {
						$average_total += 100 * $score;
					}

					my $average = $average_total / (scalar @rank_scores) if @rank_scores;

					if ($show_averages) {

						# Round to two digits.  Otherwise sorting is all kablooey.
						$total += Math::Round::nearest(1, $average);

					} else {

						my $score = $average * $multiplier;
						$total += Math::Round::nearest(1, $score);
					}

					$entry_data{"ranks"}{$entry} += $average;

				# POINTS SPEAKS SPEAKER POINT

				} elsif ($name eq "points") {

					my @point_scores;
					my %round_count;

					ROUND:
					foreach my $this_round (@rounds) {

						SCORE:
						foreach my $score (@{$student_data{"round_scores"}{$student}{$this_round}}) {

							if ($scores{$score}{"chair"} && $tb_info{$tb}{"chair"} eq "nonchair") {
								next;
							}

							if ($tb_info{$tb}{"chair"} eq "chair" && (not defined $scores{$score}{"chair"})) {
								next;
							}

							if ($scores{$score}{"tag"} eq "refute") {
								next SCORE unless $include_wsdc_reply;
								$scores{$score}{"value"} = $scores{$score}{"value"} * 2;
								$round_count{$this_round}++;
								push @point_scores, $scores{$score}{"value"};

							} else {
								next SCORE unless $scores{$score}{"tag"} eq $point_tag;
								$round_count{$this_round}++;
								push @point_scores, $scores{$score}{"value"};
							}
						}

						unless (
							$round_count{$this_round}
							|| $student_data{"round_forfeit"}{$student}{$this_round}
							|| $student_data{"round_bye"}{$student}{$this_round}
							|| $event_type eq 'wsdc'
						) {
							if ($event_settings{"mavericks"} eq "nothing") {
								$round_count{$this_round}++;
								push @point_scores, 0;
							}
						}
					}

					@point_scores = sort {$a <=> $b} @point_scores;
					my $multiplier = $max_scores{$point_tag};

					if ($speaker_max_scores) {
						while (scalar @point_scores > $speaker_max_scores) {
							$multiplier--;
							shift @point_scores;
						}
					}

					if ($tb_info{$tb}{"highlow"} == 1 || $tb_info{$tb}{"highlow"} == 3) {
						# Drop the best
						foreach (1 .. $tb_info{$tb}{"highlow_count"}) {
							$multiplier--;
							pop @point_scores;
						}
					}

					if ($tb_info{$tb}{"highlow"} == 1 || $tb_info{$tb}{"highlow"} == 4) {
						# Drop the worst
						foreach (1 .. $tb_info{$tb}{"highlow_count"}) {
							$multiplier--;
							shift @point_scores;
						}
					}

					my $average_total;
					foreach my $score (@point_scores) {
						$average_total += Math::Round::nearest(1, (100 * $score));
					}

					if ($event_settings{"speakers_rubric"}) {

						$total += $average_total;
						$entry_data{"points"}{$entry} += $average_total;

					} else {

						my $average = $average_total / (scalar @point_scores) if @point_scores;

						if ($show_averages) {

							# Round to two digits, and multiply by 100 to make it
							# an integer.  Otherwise sorting is all kablooey.  The
							# later steps will automatically divide by 100 again.

							$total += Math::Round::nearest(1, $average);

						} else {
							my $score = $average * $multiplier;
							$total += Math::Round::nearest(1, $score);
						}

						$entry_data{"points"}{$entry} += $average;
					}

				# BALLOT BALLOTS
				} elsif ( $name eq "ballots") {

					foreach my $this_round (@rounds) {
						foreach my $score (@{$student_data{"round_scores"}{$student}{$this_round}}) {
							if ($scores{$score}{"tag"} eq "winloss") {
								$total++ if $scores{$score}{"value"} == 1;
							}
						}
					}

				# RANDOM COINFLIP
				} elsif ( $name eq "coinflip") {

					# This is only semi random; product of the date epoch and
					# the random student ID's last four digits.  But it will be
					# the same every time this function is run and random
					# enough in that it cannot be pre-guessed easily.

					my $random_seed = $student * $entry * $seed;
					$total = substr($random_seed, -8, -3);

				} elsif ( $name eq "judgepref") {

					my $chosen_panel;
					my @chosen_entries;

					foreach my $this_round (@rounds) {

						PANEL:
						foreach my $panel (@{$round_data{"panels"}{$this_round}}) {    #Only counts in the current round;
							my @entries = @{$panel_data{"entries"}{$panel}};
							next PANEL unless grep {$_ == $entry} @entries;
							$chosen_panel = $panel;
							@chosen_entries = @entries;
						}

						my %beseen = ();
						@chosen_entries = grep { ! $beseen{$_} ++ } @chosen_entries;

						my $entry_string;

						foreach my $okey (sort {$a <=> $b} keys %tb_tiers) {
							next if $priority == $okey;
							$entry_string .= "-" if $entry_string;
							$entry_string .= $entry_tbs{$entry."-".$okey};
						}

						my @ties;

						foreach my $oentry (@chosen_entries) {
							next if $oentry == $entry;
							my $test_string;
							foreach my $okey (sort {$a <=> $b} keys %tb_tiers) {
								next if $priority == $okey;
								$test_string .= "-" if $test_string;
								$test_string .= $entry_tbs{$oentry."-".$okey};
							}
							push(@ties, $oentry) if $test_string eq $entry_string;
						}

						if (scalar @ties == 1) {

							my $tie_id = shift @ties;

							my %judge_score = ();

							if ($chosen_panel && $entry) {

								my %done;
								foreach my $score (@{$entry_data{"scores"}{$entry}}) {
									next if $done{$score}++;
									next unless $scores{$score}{"tag"} eq "rank";
									next unless $scores{$score}{"panel"} == $chosen_panel;
									$judge_score{$scores{$score}{"judge"}} = $scores{$score}{"value"};
								}

								foreach my $tie_score (@{$entry_data{"scores"}{$tie_id}}) {
									next if $done{$tie_score}++;
									next unless $scores{$tie_score}{"tag"} eq "rank";
									next unless $scores{$tie_score}{"panel"} == $chosen_panel;
									$total++ if $scores{$tie_score}{"value"} > $judge_score{$scores{$tie_score}{"judge"}};
									#If my rank is better (lower) than the tie's rank, I get a JP point
								}
							}
						}
					}

				} elsif ( $name eq "rankinround") {

					foreach my $this_round (@rounds) {
						$total += (100 * $entry_rankinround{$entry."-".$this_round});
					}

				} elsif ( $name eq "opp_wins") {

					my $count;
					my $sub_total;

					foreach my $panel (@{$student_data{"panels"}{$student}}) {

						next if $panel_data{"round_name"}{$panel} > $round_name;

						foreach my $other (@{$panel_data{"entries"}{$panel}}) {
							next if $other == $entry;
							$sub_total += $entry_data{"wins"}{$other};
							$count++;
						}
					}

					$total += Math::Round::nearest(1, (100 * ($sub_total/$count))) if $count;

				} elsif ( $name eq "opp_points") {

					my $count;
					my $sub_total;

					foreach my $panel (@{$student_data{"panels"}{$student}}) {

						next if $panel_data{"round_name"}{$panel} > $round_name;

						foreach my $other (@{$panel_data{"entries"}{$panel}}) {
							next if $other == $entry;
							$sub_total += $entry_data{"points"}{$other} / (scalar @{$entry_data{"students"}{$other}});
							$count++;
						}
					}

					$total += sprintf("%d", ($sub_total/$count)) if $count;

				} elsif ( $name eq "opp_ranks") {

					my $count;
					my $sub_total;

					foreach my $panel (@{$student_data{"panels"}{$student}}) {

						next if $panel_data{"round_name"}{$panel} > $round_name;

						foreach my $other (@{$panel_data{"entries"}{$panel}}) {
							next if $other == $entry;
							$sub_total += $entry_data{"ranks"}{$other};
							$count++;
						}
					}

					$total += sprintf("%d", ($sub_total/$count)) if $count;

				} elsif ( $name eq "judgevar") {

					my $sub_total;
					my $count;
					my $bye;

					ROUND:
					foreach my $this_round (@rounds) {

						if ($student_data{"round_bye"}{$student}{$this_round}) {
							$bye++;
							next ROUND;
						}

						foreach my $score (@{$student_data{"round_scores"}{$student}{$this_round}}) {

							next unless $scores{$score}{"tag"} eq $point_tag
								|| ($scores{$score}{"tag"} eq "refute" && $include_wsdc_reply);

							my $judge_avg  = ${$judge_avg_ref}{$scores{$score}{"judge"}};
							my $judge_stddev  = ${$judge_stddev_ref}{$scores{$score}{"judge"}};
							next unless $judge_stddev > 0;

							$sub_total += ( (  ($scores{$score}{"value"} - $judge_avg) / $judge_stddev) * $total_std) + $total_avg;
							$count++;

						}
					}

					if ($bye) {
						my $average = $sub_total / $count if $count;
						$sub_total += $average * $bye;
					}

					$total += Math::Round::nearest(1, (100 * $sub_total));

				} elsif ($name eq "judgevar2") {

					my $sub_total;
					my $bye;
					my $count;

					ROUND:
					foreach my $this_round (@rounds) {

						if ($student_data{"round_bye"}{$student}{$this_round}) {
							$bye++;
							next ROUND;
						}

						foreach my $score (@{$student_data{"round_scores"}{$student}{$this_round}}) {

							next unless $scores{$score}{"tag"} eq $point_tag
								|| ($scores{$score}{"tag"} eq "refute" && $include_wsdc_reply);

							my $judge_avg  = ${$judge_avg_ref}{$scores{$score}{"judge"}};
							my $judge_stddev  = ${$judge_stddev_ref}{$scores{$score}{"judge"}};

							# These sample only the schools/stddevs for the
							# debaters the judge has judged, not all debaters.

							my $judge_sample_avg  = ${$judge_z2_avg_ref}{$scores{$score}{"judge"}};
							my $judge_sample_stddev  = ${$judge_z2_stddev_ref}{$scores{$score}{"judge"}};

							next unless $judge_stddev > 0;

							$sub_total += (
								(  ($scores{$score}{"value"} - $judge_avg) / $judge_stddev) * $judge_sample_stddev)
								+ $judge_sample_avg;

							$count++;

						}
					}

					if ($bye) {
						my $average = $sub_total / $count if $count;
						$sub_total += $average * $bye;
					}

					$total += Math::Round::nearest(1, (100 * $sub_total));
				}

				$tier_total += $total * $tb_info{$tb}{"multiplier"} if $tb_info{$tb}{"multiplier"} > 0;
			}

			$entry_tbs{$entry."-".$priority} = $tier_total;
			$student_data{"tbs"}{$student."-".$priority} = $tier_total;

		}
	}

	if ($opp_points || $opp_ranks) {

		my $err;

		if ($opp_points &! $points) {

			$err .= "Danger Will Robinson!<br />You have defined Opp Points as a ";
			$err .= "tiebreaker without first defining Points as one.  That cannot work both";
			$err .= "technically and philosophically.  Fix please! <br /><br />";

		}

		if ($opp_ranks &! $ranks) {

			$err .= "Danger Will Robinson!<br />You have defined Opp Ranks as a";
			$err .= "tiebreaker without first defining Ranks as one.  That cannot work ";
			$err .= "both technically and philosophically.  Fix please!";

		}

		$m->abort if $never_redirect;
		$m->redirect("/setup/rules/tiebreaks.mhtml?protocol_id=".$protocol->id."&err=$err") if $err;
	}

	foreach my $key (reverse sort {$a <=> $b} keys %tb_tiers) {

		@students =
			sort {$student_data{"tbs"}{$a."-".$key} <=> $student_data{"tbs"}{$b."-".$key} }
			@students
			if $tier_dir{$key} eq "up";

		@students =
			sort {$student_data{"tbs"}{$b."-".$key} <=> $student_data{"tbs"}{$a."-".$key} }
			@students
			if $tier_dir{$key} eq "down";
	}

	my $count;
	my $last_string;
	my $delayed_count;

	my $max_misses = scalar @all_rounds - $speaker_min_speeches;

	if ($speaker_min_speeches) {
		foreach my $student (@students) {

			$student_data{"speeches"}{$student}{"missed"}++
				if $student_data{"didnt_talk"}{$student}  > $max_misses;

			$student_data{"speeches"}{$student}{"speeches"} =
				(scalar @all_rounds) - $student_data{"didnt_talk"}{$student};

		}
	}

	if ($speaker_min_speeches) {
		@students = sort { $student_data{"speeches"}{$a}{"missed"} <=> $student_data{"speeches"}{$b}{"missed"} } @students;
		undef $student_data{"forfeit"};
	}

	undef $student_data{"forfeit"} if $speaker_max_scores;

	@students = sort { $student_data{"forfeit"}{$a} <=> $student_data{"forfeit"}{$b} } @students
		if $forfeits_never_break;

	foreach my $student (@students) {

		foreach my $key (reverse sort {$a <=> $b} keys %tb_tiers) {
			$student_data{"tbs"}{$student."-".$key} = $student_data{"tbs"}{$student."-".$key} / 100;
		}

		next if $student_data{"dq"}{$student};

		my $tier_string;

		foreach my $key (sort {$a <=> $b} keys %tb_tiers) {
			$tier_string .= "-" if $tier_string;
			$tier_string .= $student_data{"tbs"}{$student."-".$key};
		}

		if ($tier_string eq $last_string) {
			$delayed_count++;
		} else {
			$count++;
			$count += $delayed_count;
			undef $delayed_count;
		}

		$last_string = $tier_string;
		push (@{$student_data{"by_place"}{$count}}, $student);
		$student_data{"place"}{$student} = $count;

	}

	return (
		$student_data{"by_place"},
		$student_data{"tbs"},
		\%tier_descs,
		$student_data{"forfeit"},
		\%tier_dir,
		\%tier_long_descs,
		$student_data{"novice"},
		$student_data{'name'},
		$student_data{"code"},
		$student_data{"school"},
		$student_data{"entry"},
		$student_data{"speeches"},
		$student_data{"place"}
	);

</%init>
