<%args>
	$tourn
	$tourn_settings
	$session
	$perms
	$event_id => undef
	$file_dump => undef
</%args>
<%init>

	my @events;
	my $event;

	if ($event_id eq "all") {
		@events = $m->comp("/funclib/perms/events.mas",
			tourn => $tourn,
			perms => $perms
		);
		my $ids = join(',', @events);
	} else {
		$event = Tab::Event->retrieve($event_id);
		push @events, $event;
	}

	my $name;

	if ($event_id eq "all") {
		$name = $tourn->name
	} else {
		$name = $event->name;
	}

    $name =~ s/[\W_]//g;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
    my $now = DateTime->now(time_zone => $tz);

	$m->abort unless @events;

	my $ncfl = $tourn_settings->{"ncfl"};
    $name =~ s/[\W_]//g;

    my $filename = "Packet-$name-".$session->id unless $file_dump;
	$filename = $file_dump if $file_dump;
    my $filepath = $Tab::file_root."tmp/".$filename;

    $m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		head     => 1,
		wide     => 1
	) unless $file_dump;

    open (TEXOUT, ">>$filepath.tex");
	binmode(TEXOUT, ":utf8");

	print TEXOUT "\\renewcommand{\\TruncateMarker}{}\n";
	print TEXOUT "\\setlength{\\fboxsep}{0pt}\n";
	print TEXOUT "\\setlength{\\tabcolsep}{0pt}\n";

	foreach my $event (@events) {

		my $aff_string = $event->setting("aff_label");
		my $neg_string = $event->setting("neg_label");
		$aff_string = "Aff" unless $aff_string;
		$neg_string = "Neg" unless $neg_string;

		my $year = $tourn->start->year;

		my $tourn_name = $tourn->name;
		$tourn_name =~ s/$year//g;
		$tourn_name =~ s/^\s+//;
		$tourn_name =~ s/\s+$//;

		print TEXOUT "\\begin{center}\n";
		print TEXOUT "\\LARGE \n";
		print TEXOUT "\\textbf{ ".Tab::texify($year." ".$tourn_name)." } \n\n";
		print TEXOUT "\\vspace{-2mm}\n";
		print TEXOUT "\\Large \n";
		print TEXOUT "\\textsb{".Tab::texify($event->name)." } \n\n";
		print TEXOUT "\\end{center}\n";
		print TEXOUT "\\vspace{-2mm}\n";

		print TEXOUT "\\normalsize \n";

		my @all_rounds =
			sort {$a->name <=> $b->name}
			$m->comp(
				"/funclib/event_rounds.mas",
				event => $event,
				done => "yes"
			);

		my @rounds;

		my $num_elims;

		foreach my $round (@all_rounds) {

			next if $round->type eq "runoff";

			if ($round->type eq "elim" || $round->type eq "final") {
				$num_elims++;
				next;
			}

			push @rounds, $round;

		}

		my $num_seeds = 2 ** $num_elims;
		$num_seeds++;

		unless (@rounds) {
			$m->print("You have no rounds.  Therefore I can't print results");
			$m->abort;
		}

		my $size = "5.2";
		$size = $size / scalar @rounds;

		my $tabular = "\\begin{tabular}{p{1.36in}";

		foreach my $round (@rounds) {
			$tabular .= "p{".$size."in}";
		}

		$size -= .1;
		$tabular .= "p{1.11in}}\n";

		print TEXOUT $tabular;

		my $last_round;
		my $last_round_name;

		print TEXOUT "\\centering\n";
		print TEXOUT "Entry ";
		print TEXOUT " & ";

		foreach my $round (@rounds) {
			print TEXOUT "\\centering\n";
			print TEXOUT Tab::texify($round->realname);
			print TEXOUT " & ";
			$last_round = $round;
			$last_round_name = $round->name;
		}

		print TEXOUT "\\centering\n";
		print TEXOUT "Totals ";

		my @judges = $m->comp(
			"/funclib/event_judges.mas",
			event => $event);

		my %judge_name_by_id =
			map { $_->id => $_->last.", ".$_->first }
			@judges;

		print TEXOUT "\n \\end{tabular}\n";
		print TEXOUT "\\vspace{-1mm}\n";
		print TEXOUT "\\newline\n";

		print TEXOUT "\\small \n";

		$tabular =~ s/in}/in}|/g;
		$tabular =~ s/{p/{|p/g;

		my $dbh = Tab::DBI->db_Main();

		my $sth = $dbh->prepare("
			select value.id, value.tag, value.value, value.student,
				ballot.entry, entry.code, ballot.judge,
				panel.bye, ballot.bye, ballot.forfeit, ballot.chair,
				round.name, ballot.side, panel.id, value.position, region.code
			from (score value, ballot, panel, round, entry, school)
			left join region on school.region = region.id
			where value.ballot = ballot.id
			and ballot.panel = panel.id
			and panel.round = round.id
			and round.name <= ?
			and round.event = ?
			and ballot.entry = entry.id
			and entry.school = school.id
			order by round.name, ballot.entry, value.student, ballot.chair, ballot.judge,
				CASE value.tag
					WHEN 'winloss' 	then 1
					when 'rank' 	then 2
					when 'point' 	then 3
					when 'refute'	then 4
				end
		");

		my $ballot_sth = $dbh->prepare("
			select ballot.entry, ballot.judge, panel.bye,
				ballot.bye, ballot.forfeit, ballot.chair, round.name, ballot.side
			from ballot, panel, round
			where ballot.panel = panel.id
			and panel.round = round.id
			and round.name <= ?
			and round.event = ?
			and not exists (
				select score.id
				from score
				where score.ballot = ballot.id
			)
			order by round.name, ballot.entry, ballot.chair, ballot.judge
		");

		$sth->execute($last_round_name, $event->id);
		$ballot_sth->execute($last_round_name, $event->id);

		my %entry_code;
		my %entry_debated;
		my %entry_region;
		my %entry_round;
		my %entry_ballots;

		my %entry_max_judges;
		my %entry_round_side;
		my %entry_round_panel;
		my %entry_round_judges;
		my %entry_round_decision;

		my %entry_win_count;
		my %entry_loss_count;

		my %student_round_points;
		my %student_round_position;
		my %student_round_ranks;
		my %student_round_entry;

		my %panel_entries;


		while (
			my (
				$id, $tag, $value, $studentid, $entryid,
				$code, $judge, $pbye, $bye, $forfeit,
				$chair, $roundname, $side, $panel, $position, $region
			) = $sth->fetchrow_array()
		) {

			$entry_ballots{$entryid}++;

			$student_round_entry{$studentid}{$roundname} = $entryid;
			$entry_round_panel{$entryid}{$roundname} = $panel;
			push @{$panel_entries{$panel}}, $entryid;

			unless ($entry_code{$entryid}) {
				$code = short_code($code) if length($code) > 16;
				$entry_code{$entryid} = $code;
			}

			$entry_region{$entryid} = $region;

			if ($pbye) {
				$entry_round_decision{$entryid}{$roundname}{"overall"} = "Bye";
				$entry_debated{$entryid}++;
			} elsif ($bye) {
				$entry_round_decision{$entryid}{$roundname}{"overall"} = "Bye";
				$entry_debated{$entryid}++;
			} elsif ($forfeit) {
				$entry_round_decision{$entryid}{$roundname}{"overall"} = "FFT";
			} elsif ($tag eq "winloss") {
				$entry_debated{$entryid}++;
				push @{$entry_round_judges{$entryid}{$roundname}}, $judge;

				$entry_max_judges{$entryid} = scalar @{$entry_round_judges{$entryid}{$roundname}}
					if (scalar @{$entry_round_judges{$entryid}{$roundname}}) > $entry_max_judges{$entryid};

				$entry_round_side{$entryid}{$roundname} = $aff_string if $side == 1;
				$entry_round_side{$entryid}{$roundname} = $neg_string if $side == 2;

				$entry_loss_count{$entryid}{$roundname}++ if $value == 0;
				$entry_win_count{$entryid}{$roundname}++ if $value == 1;

				$entry_round_decision{$entryid}{$roundname}{$judge} = "-" if $value == 0;
				$entry_round_decision{$entryid}{$roundname}{$judge} = "L" if $value == 0;
				$entry_round_decision{$entryid}{$roundname}{$judge} = "W" if $value == 1;

			} elsif ($tag eq "point") {

				$student_round_position{$studentid}{$roundname}{$judge} .= $position." "
					if $event->type eq "wsdc" && $position;

				$student_round_points{$studentid}{$roundname}{$judge} .= $value;

			} elsif ($tag eq "rank") {

				$student_round_ranks{$studentid}{$roundname}{$judge} .= $value." ";

			} elsif ($tag eq "refute") {

				$student_round_points{$studentid}{$roundname}{$judge} .= ", ".$value;
			}
		}

		while (
			my ($entryid, $judge, $pbye, $bye, $forfeit, $chair, $roundname, $side)
			= $ballot_sth->fetchrow_array()
		) {

			if ($pbye) {
				$entry_round_decision{$entryid}{$roundname}{"overall"} = "Bye"
			} elsif ($bye) {
				$entry_round_decision{$entryid}{$roundname}{"overall"} = "Bye"
			} elsif ($forfeit) {
				$entry_round_decision{$entryid}{$roundname}{"overall"} = "FFT"
			}
		}

		my ($entries_ref, $tbs_ref, $desc_ref,
			$forfeit_ref, $meh, $panrank_ref,
			$panletter_ref, $long_desc_ref
		) = $m->comp("/tabbing/results/order_entries.mas",
				long_names => 1,
				round      => $last_round);

		my ($students_ref, $student_tbs_ref, $student_desc_ref) = $m->comp(
			"/tabbing/results/order_speakers.mas",
			round => $last_round
		) if $event->setting("speaker_protocol");

		my %entry_wins = $m->comp(
			"/funclib/entry_wins.mas",
			event => $event,
			round => $last_round
		);

		my %entry_losses = $m->comp(
			"/funclib/entry_losses.mas",
			event => $event,
			round => $last_round
		);

		my %entry_seed;

		foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
			my $tie++ if scalar @{${$entries_ref}{$key}} > 1;
			foreach my $entry_id (@{${$entries_ref}{$key}}) {

				$entry_seed{$entry_id}{"seed"} = $key;

				if ($tie) {
					$entry_seed{$entry_id}{"print"} = "T-".$key;
				} else {
					$entry_seed{$entry_id}{"print"} = $key;
				}
			}
		}


		foreach my $entry ($event->entries( active => 1)) {

			my $entry_id = $entry->id;

			next unless $entry_ballots{$entry_id};
			next unless $entry_debated{$entry_id};

			my @students = $entry->students;

			Tab::Student->set_sql(by_entry_result => "
				select distinct student.*
				from student, score, ballot
				where ballot.id = score.ballot
				and score.student = student.id
				and ballot.entry = ?
			");

			push @students, Tab::Student->search_by_entry_result($entry_id);

			my %seen = ();
			@students = grep { ! $seen{$_->id} ++ } @students;

			print TEXOUT $tabular;
			print TEXOUT "\\hline\n";

			print TEXOUT "\\parbox{1.35in}{\n";
			print TEXOUT "\\parbox[t][5mm][c]{1.3in}{";
				print TEXOUT "\\textsb{\\large \\truncate{1.22in}{\n";
				print TEXOUT "\\hspace{1mm}\n";
				print TEXOUT Tab::texify($entry_code{$entry_id});
				print TEXOUT " -- ".Tab::texify($entry->school->region->code) if $ncfl;
				print TEXOUT "}}\n";

			print TEXOUT "}\n";

			print TEXOUT "\\newline\n";

			my $num_judges;

			foreach my $round (@rounds) {
				my $this_num_judges =
					scalar @{$entry_round_judges{$entry_id}{$round->name}}
					if $entry_round_judges{$entry_id}{$round->name};

				$num_judges = $this_num_judges
					if $num_judges < $this_num_judges;
			}
			my $height = (2.5 * $num_judges) + 3.5;


			print TEXOUT "\\parbox[t][".$height."mm][c]{1.3in}{";
			print TEXOUT "\\truncate{1.22in}{";
			print TEXOUT "\\hspace{1ex}";
			print TEXOUT Tab::texify($entry->school->state)." -- " if $tourn_settings->{'nsda_nats'};
			print TEXOUT Tab::texify($entry->school->short_name)."}\n";
			print TEXOUT "}\n";

			print TEXOUT "\\newline\n";

			my $notfirst;

			foreach my $student (@students) {
				print TEXOUT "\\parbox[t][3mm][c]{1.3in}{";
				print TEXOUT "\\truncate{1.22in}{\n";
				print TEXOUT "\\hspace{1ex}\n";
				print TEXOUT "\\tt \\scriptsize \n";
				print TEXOUT Tab::texify($student->first." ".$student->last)."\n";
				print TEXOUT "}}\n";
				print TEXOUT "\\vspace{-.75mm}\n";
				print TEXOUT "\\newline\n";
			}

			print TEXOUT " } & ";

			ROUND:
			foreach my $round (@rounds) {

				my $round_name = $round->name;

				my $num_judges =
					scalar @{$entry_round_judges{$entry_id}{$round_name}}
					if $entry_round_judges{$entry_id}{$round_name};

				print TEXOUT "\\parbox{".$size."in}{\n";
				print TEXOUT "\\parbox[t][5mm][c]{".($size - .01)."in}{";
				print TEXOUT "\\large\n";

				unless ($entry_round_decision{$entry_id}{$round_name}
					|| $entry_win_count{$entry_id}{$round_name}
					|| $entry_loss_count{$entry_id}{$round_name}
				) {
					print TEXOUT "\\hfill No Debate \\hfill ";
					print TEXOUT "  }} & \n";
					next ROUND;
				}

				my $result;

				if (
					$entry_round_decision{$entry_id}{$round_name}{"overall"} eq "Bye"
					|| $entry_round_decision{$entry_id}{$round_name}{"overall"} eq "FFT"
				) {

					$result = $entry_round_decision{$entry_id}{$round_name}{"overall"};
					print TEXOUT " \n\n"

				} elsif (

					$entry_win_count{$entry_id}{$round_name} < 2
					&& $entry_loss_count{$entry_id}{$round_name} < 2

				) {

					$result = "W" if $entry_win_count{$entry_id}{$round_name} > 0;
					$result = "L" if $entry_loss_count{$entry_id}{$round_name} > 0;
					$result = "T"
						if $entry_win_count{$entry_id}{$round_name}
						== $entry_loss_count{$entry_id}{$round_name};

				} else {

					$result = "T";
					$result = "L"
						if $entry_win_count{$entry_id}{$round_name}
						< $entry_loss_count{$entry_id}{$round_name};
					$result = "W"
						if $entry_win_count{$entry_id}{$round_name}
						> $entry_loss_count{$entry_id}{$round_name};

				}

				print TEXOUT "\\hspace{1mm}\n";
				print TEXOUT "\\bf ";
				print TEXOUT $result;
				print TEXOUT "\\hfill ".$entry_round_side{$entry_id}{$round_name};
				print TEXOUT "}\n";

				print TEXOUT "\\newline\n";
				print TEXOUT "\\parbox[t][".$height."mm][c]{".($size - .01)."in}{";
				print TEXOUT "\\scriptsize\n";

				my %used;

				foreach my $opponent (@{$panel_entries{$entry_round_panel{$entry_id}{$round_name}}}) {

					next if $opponent  == $entry_id;
					next if $used{$opponent}++;

					print TEXOUT "\\truncate{".($size - .07)."in}{ ";
					print TEXOUT "\\hspace{1mm}\n";

					if ($ncfl) {
						print TEXOUT Tab::texify($entry_code{$opponent}." -- ".$entry_region{$opponent});
					} else {
						print TEXOUT Tab::texify($entry_code{$opponent});
					}

					print TEXOUT "}\n"
				}

				my $notfirst;

				foreach my $judgeid (@{$entry_round_judges{$entry_id}{$round_name}}) {

					next if $used{$judgeid}++;

					print TEXOUT "\\strut\n \\newline\n" unless $notfirst++;

					my $result = $entry_round_decision{$entry_id}{$round_name}{$judgeid}." "
						if $num_judges > 1;

					print TEXOUT "\\truncate{".($size - .07)."in}{";
					print TEXOUT "\\hspace{1mm}\n";
					print TEXOUT "{\\scriptsize \\tt $result }";
					print TEXOUT "\\hspace{1mm}\n";
					print TEXOUT Tab::texify($judge_name_by_id{$judgeid})." }\n";
				}

				print TEXOUT " } \n";

				undef $notfirst;

				foreach my $student (@students) {

					print TEXOUT "\\parbox[t][3mm][c]{".($size - .05)."in}{\n";

					print TEXOUT "\\hspace{1mm}\n";

					print TEXOUT "\\tt\n";
					print TEXOUT "\\scriptsize\n";
					my $score;

					foreach my $judgeid (@{$entry_round_judges{$entry_id}{$round_name}}) {

						$score .= ", " if $score;

						if ($student_round_entry{$student->id}{$round_name} == $entry_id) {

							$score .= $student_round_ranks{$student->id}{$round_name}{$judgeid}." "
								if $student_round_ranks{$student->id}{$round_name}{$judgeid};

							$score .= $student_round_position{$student->id}{$round_name}{$judgeid}." "
								if $student_round_position{$student->id}{$round_name}{$judgeid};

							$score .= $student_round_points{$student->id}{$round_name}{$judgeid}." "
								if $student_round_points{$student->id}{$round_name}{$judgeid};

						}
					}

					print TEXOUT $score if $score;
					print TEXOUT " } ";
					print TEXOUT "\\vspace{-.75mm}\n";
					print TEXOUT "\\newline\n";
				}

				print TEXOUT " }\n & ";
			}

			print TEXOUT "\\parbox{1.1in}{\n";
			print TEXOUT "\\parbox[t][11.5mm][c]{.47in}{";
			print TEXOUT "\\centering\n";

			print TEXOUT "{\\Large \\bf ".$entry_wins{$entry}."--".$entry_losses{$entry}."}\n";

			if ($entry_seed{$entry_id}{"seed"} < $num_seeds) {
				print TEXOUT "\\newline\n";
				print TEXOUT "\\textsb{\\footnotesize Seed  ".$entry_seed{$entry_id}{"print"}." } \n";
			}

			print TEXOUT "}\n";

			print TEXOUT "\\parbox[t][11.5mm][c]{.5in}{\n";

			my $limit;
			my $notfirstkey;

			foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) {

				next if ${$desc_ref}{$key} eq "Win";
				next if ($limit++ > 4) && not defined $ncfl;
				next if ($limit > 5) && $ncfl;

				if ($notfirstkey++) {
					print TEXOUT "\\newline\n";
				}

				my $value = ${$tbs_ref}{$entry_id}{$key};

				my $desc = ${$desc_ref}{$key};
				$desc =~ s/ //g;
				$desc = substr($desc,0,6);

				print TEXOUT "\\tiny \\tt ";
				print TEXOUT Tab::texify($desc);
				print TEXOUT " \\hfill ";
				print TEXOUT Tab::texify($value);
			}

			print TEXOUT "} \n";
			print TEXOUT "\\newline\n";
			print TEXOUT "\\vspace{-.5mm}\n";

			unless ($ncfl) {

				print TEXOUT "\\parbox{1.05in}{\n";

				foreach my $student (@students) {

					print TEXOUT "\\parbox[t][3mm][c]{1in}{\n";
					print TEXOUT "\\hspace{1ex}\n";
					print TEXOUT "\\scriptsize \\tt\n";

					undef $limit;

					my $notfirst;

					foreach my $key (sort {$a <=> $b} keys %{$student_desc_ref}) {
						next if ${$student_desc_ref}{$key} eq "Win";
						next if $limit++ > 2;
						print TEXOUT "\\hfill\n" if $notfirst++;
						print TEXOUT Tab::texify(${$student_tbs_ref}{$student->id}{$key});
					}

					print TEXOUT "} \n";
					print TEXOUT "\\vspace{-.75mm}\n";
					print TEXOUT "\\newline\n";
				}

				print TEXOUT " } \n";
			}

			print TEXOUT " } \n";
			print TEXOUT "\\\\ \n";
			print TEXOUT "\\hline\n";
			print TEXOUT "\\end{tabular}\n";
			print TEXOUT "\\newline\n";
			print TEXOUT "\\vspace{-.85mm}\n";
			print TEXOUT "\\newline\n";

		}

		print TEXOUT "\\newpage\n";
	}

	close TEXOUT;

    $m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		tail     => 1
	) unless $file_dump;

	sub short_code {
		my $orig = shift;
		chomp($orig);
		my $code = (substr($orig,0,10));
		$code .= substr($orig, -5, 5);

		return $code;
	};


</%init>
