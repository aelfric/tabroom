<%args>
	$tourn
	$session
	$tourn_settings
	$event_id  => undef
	$filename  => undef
	$mode      => "pdf"
	$event_ref => undef
	$texout    => undef
</%args>
<%init>

	my $dbh = Tab::DBI->db_Main();

	if ($ARGS{event_ref}) {


	} else {

		my $where;
		my $name;

		if ($event_id eq "all" || not defined $event_id) {
			$where = " where event.tourn = ".$tourn->id;
			$name = "AllEvents";
		} elsif ($event_id eq int($event_id)) {
			$where = " where event.id = ".int($event_id);
			$name = "Event";
		} else {
			$event_id =~ s/[\W_]//g;
			$where = " where event.type = '".$event_id."'";
			$name = ucfirst($event_id)."Events";
		}

		my $sth = $dbh->prepare("
			select
				event.id, event.name, event.type,
				code_style.value code_style,
				supp.value supp,
				result_description.value_text result_description,
				bowl_description.value_text bowl_description,
				final_bowl_protocol.value final_bowl_protocol,
				max_entry.value max_entry

			from (event)

				left join event_setting code_style
					on code_style.event = event.id
					and code_style.tag = 'code_style'

				left join event_setting supp
					on supp.event = event.id
					and supp.tag = 'supp'

				left join event_setting result_description
					on result_description.event = event.id
					and result_description.tag = 'result_description'

				left join event_setting bowl_description
					on bowl_description.event = event.id
					and bowl_description.tag = 'bowl_description'

				left join event_setting max_entry
					on max_entry.event = event.id
					and max_entry.tag = 'max_entry'

				left join event_setting final_bowl_protocol
					on final_bowl_protocol.event = event.id
					and final_bowl_protocol.tag = 'final_bowl_protocol'
			$where
				and event.type != 'congress'
			order by supp.value, event.type, event.name
		");

		$sth->execute();
		my $events = $sth->fetchall_hash();
		$event_ref = shift @{$events};
	}

	my $sth = $dbh->prepare("
		select
			final.id final, final.label, final.name final_name, final.protocol,
			max(elim.name) max_elim,
			min(elim.name) min_elim

		from event

			left join round final on final.event = event.id and final.type = 'final'
			left join round elim on elim.event = event.id and elim.type = 'elim'
		where event.id = ?

		group by event.id
	");

	$sth->execute($event_ref->{id});

	my $results = $sth->fetchall_hash();
	my $result = shift @{$results};

	my $final = Tab::Round->retrieve($result->{final});

	my @elims;

	foreach my $round (Tab::Round->search( event => $event_ref->{id}, type => "elim")) {
		next unless $round->panels();
		push @elims, $round;
	}

   	@elims = sort {$b->name <=> $a->name} @elims;
	my $supp++ if $event_ref->{"supp"};

    my $min_round_name = $result->{min_elim};
    my $max_round_name = $result->{max_elim};
    my $final_number = $result->{final_name};
	my $final_tbs = $result->{protocol};

	$sth = $dbh->prepare("
		select entry.id,
			entry.code,
				GROUP_CONCAT(
					distinct(CONCAT(student.first,' ',student.last))
					SEPARATOR ' & '
				) as entryname,
			school.name, school.state, chapter.state,
			round.id, round.name,
			rank.tag, rank.value,
			winloss.tag, winloss.value,
			panel.bye, ballot.bye, ballot.forfeit
		from (entry, round, panel, ballot, school, entry_student, student)

		left join chapter on school.chapter = chapter.id

		left join score rank on rank.tag = 'rank'
			and rank.ballot = ballot.id

		left join score winloss on winloss.tag = 'winloss'
			and winloss.ballot = ballot.id

		where entry.event = ?
			and entry.id = ballot.entry
			and ballot.panel = panel.id
			and panel.round = round.id
			and entry.school = school.id
			and round.type in ('elim', 'final')

			and entry_student.entry = entry.id
			and entry_student.student = student.id

		group by ballot.id

	");

	$sth->execute($event_ref->{id});

	my %entries;
	my %results;
	my $max_round;

	while (
		my ($entry_id, $entry_code, $entry_name, $school_name, $school_state,
			$chapter_state,
			$round_id, $round_name,
			$rank_tag, $rank_value,
			$winloss_tag, $winloss_value,
			$pbye, $bbye, $fft
		) = $sth->fetchrow_array()
	) {

		if ($pbye || $bbye) {
			$results{$entry_id}{$round_name} .= "\\textsb{\\color{blue} BYE}";
		} elsif ($fft) {
			$results{$entry_id}{$round_name} .= "\\textsb{\\color{red} FFT}";
		} else {
			if ($winloss_tag) {
				$results{$entry_id}{$round_name} .= "W" if $winloss_value == 1;
				$results{$entry_id}{$round_name} .= "L" if $winloss_value == 0;
			} else {
				$results{$entry_id}{$round_name} .= $rank_value if $rank_tag;
			}
		}

		if ($final
			&& $round_id == $result->{final}
			&& (not defined $results{$entry_id}{"finals"})
		) {
			push @{$results{"finals"}}, $entry_id;
			$results{$entry_id}{"finals"}++;
		} elsif (not defined $results{$entry_id}{"semis"}) {
			$results{$entry_id}{"semis"}++;
			push @{$results{"semis"}}, $entry_id;
		}

		$max_round = $round_name if $max_round < $round_name;

		$entries{$entry_id}{"code"}   = $entry_code;
		$entries{$entry_id}{"name"}   = $entry_name;
		$entries{$entry_id}{"state"}  = $school_state;
		unless ($entries{$entry_id}{"state"}) {
			$entries{$entry_id}{"state"}  = $chapter_state;
		}
		$entries{$entry_id}{"school"} = $school_name;

	}

	my %done;
	my $previous;
	my $entry_count;

	my $protocol = Tab::Protocol->retrieve($final_tbs);

	foreach my $round ($final, @elims) {

		my @results = $m->comp(
			"/tabbing/results/order_entries.mas",
			round    => $round,
			protocol => $protocol
		);

		my $round_ref = pop @results if @results;
		my $round_count;

		if (${$round_ref}{"by_place"}) {
			foreach my $key (sort {$a <=> $b} keys %{${$round_ref}{"by_place"}}) {
				foreach my $entry_id (@{${${$round_ref}{"by_place"}}{$key}}) {
					next if $done{$entry_id}++;

					$entries{$entry_id}{"place"} = $key;
					$round_count++;
					$entries{$entry_id}{"final_count"}  = $round_ref->{"tiebreak"}{1}{$entry_id};
					$entries{$entry_id}{"last_round"}   = $round_ref->{"tiebreak"}{2}{$entry_id};
					$entries{$entry_id}{"elim_ballots"} = $round_ref->{"tiebreak"}{3}{$entry_id};

					if ($supp) {
						$entries{$entry_id}{"supp_elim_ballots"} = $round_ref->{"tiebreak"}{4}{$entry_id};
						$entries{$entry_id}{"prelim_ballots"}    = $round_ref->{"tiebreak"}{5}{$entry_id};
					} else {
						$entries{$entry_id}{"prelim_ballots"}    = $round_ref->{"tiebreak"}{4}{$entry_id};
					}
					$entries{$entry_id}{"h2h_elim"}          = $round_ref->{"tiebreak"}{6}{$entry_id};
					$entries{$entry_id}{"h2h_prelim"}        = $round_ref->{"tiebreak"}{7}{$entry_id};
				}
			}
		}

		$previous += $round_count;
		last if $previous >= 14;
	}

	my $name = $event_ref->{name};
	$name =~ s/[\W_]//g;

	unless ($filename) {
		$filename = "FinalResults-$name-".$session->id;

		$m->comp("/funclib/printout.mas",
			tourn     => $tourn,
			filename  => $filename,
			head      => 1,
			array     => "1.8",
			wider     => 1,
			landscape => 1,
		) unless ($mode eq "csv");
	}

    my $filepath = $Tab::file_root."tmp/".$filename;

	if ($texout) {

		Tab::debuglog("Debate is here and the ".$event_ref->{"name"}." has a pre provided texout");
		print $texout "\\renewcommand{\\arraystretch}{1.8}\n";

	} else {

		Tab::debuglog("Debate is here and the ".$event_ref->{"name"}." NO PROVIDED FILEHANDLE");

		$m->comp("/funclib/printout.mas",
			tourn     => $tourn,
			filename  => $filename,
			head      => 1,
			array     => "1.8",
			landscape => 1,
		);
    	open ($texout, ">>$filepath.tex");
		binmode($texout, ":utf8");
	}

	print $texout "\\strut \\hfill \\huge \\textsb{".$event_ref->{name}."} \\hfill \\strut";
	print $texout "\\medskip\n";
	print $texout "\\newline\n";

	print $texout "\\strut \\hfill \\Large ".$event_ref->{result_description}." \\hfill \\strut";
	print $texout "\\medskip\n";
	print $texout "\\newline\n";

	print $texout "\\scriptsize\n";
	print $texout "\\begin{tabular}{p{.30in}p{1.25in}p{1.5in}p{.25in}";

	my $count_twice = $max_round_name;

	if ($supp) {
		foreach my $round ($min_round_name .. $count_twice) {
			if ($round > 12) {
				print $texout "p{.35in}";
			} elsif ($round > 11) {
				print $texout "p{.25in}";
			} else {
				print $texout "p{.20in}";
			}
		}
	} else {
		foreach my $round ($min_round_name .. $count_twice) {
			print $texout "p{.30in}";
		}
	}

	print $texout "p{.15in}p{.15in}p{.15in}p{.3in}}\n";

	print $texout "\\rowcolor[rgb]{1,.96,.66}\[5.5pt\]\[5.5pt\]\n";
	foreach my $header ("Code", "Name", "School", "State") {
		print $texout "\\textsb{".$header."} & ";
	}

	foreach my $round ($min_round_name .. $max_round_name) {
		next if $round == $final_number;
		print $texout "\\textsb{R".$round."} & ";
	}

	if ($supp) {
		print $texout "\\textsb{Rnd} & \\textsb{Bal} & \\textsb{Bal6+} & \\textsb{Place} \\\\ \n";
	} else {
		print $texout "\\textsb{Rnd} & \\textsb{EB} & \\textsb{PB} & \\textsb{Place} \\\\ \n";
	}

	my $switch;

	foreach my $entry_id (
		sort {$entries{$b}{"place"} <=> $entries{$a}{"place"}}
		@{$results{"semis"}}
	) {

		next if $results{$entry_id}{"finals"};
		next unless $entries{$entry_id}{"place"} > 0;
		next if $entries{$entry_id}{"place"} > 14;

		print $texout "\\rowcolor[rgb]{.92,.92,.92}\[5.5pt\]\[5.5pt\]\n" if $switch++ % 2;

		$entries{$entry_id}{"name"} =~ s/\&/\n\n/;

		print $texout Tab::texify($entries{$entry_id}{"code"});
		print $texout " & \\raggedright ";
		print $texout Tab::texify($entries{$entry_id}{"name"});
		print $texout " & \\raggedright ";
		print $texout Tab::texify($entries{$entry_id}{"school"});
		print $texout " & ";
		print $texout Tab::texify($entries{$entry_id}{"state"});
		print $texout " & ";

		foreach my $round ($min_round_name .. $max_round_name) {
			print $texout $results{$entry_id}{$round}." & ";
		}

		print $texout "\\footnotesize\n";
		print $texout $entries{$entry_id}{"last_round"}." & ";
		print $texout "\\footnotesize\n";

		if ($supp) {
			print $texout "\\footnotesize\n";
			print $texout $entries{$entry_id}{"elim_ballots"}." & ";
			print $texout "\\footnotesize\n";
			print $texout $entries{$entry_id}{"supp_elim_ballots"}." & ";
		} else {
			print $texout $entries{$entry_id}{"elim_ballots"}." & ";
			print $texout "\\footnotesize\n";
			print $texout $entries{$entry_id}{"prelim_ballots"}." & ";
		}

		print $texout "\\footnotesize\n";
		unless ($results{$entry_id}{"finals"}) {
			print $texout "\\textsb{".Tab::texify(Lingua::EN::Numbers::Ordinate::ordinate($entries{$entry_id}{"place"}))."} ";
		}
		print $texout "\\\\ \n";
	}

	print $texout "\\end{tabular}\n";
	print $texout "\\bigskip\n";
	print $texout "\\newline\n";
	print $texout "\\strut \\hfill \\Large Finalists \\hfill \\strut";
	print $texout "\\medskip\n";
	print $texout "\\newline\n";
	print $texout "\\footnotesize\n";
	print $texout "\\begin{tabular}{p{.25in}p{2in}p{1.75in}p{.3in}p{2.85in}p{.75in}p{.5in}}\n";
	print $texout "\\rowcolor[rgb]{1,.96,.66}\[5.5pt\]\[5.5pt\]\n";

	foreach my $header ("Code", "Name", "School", "State") {
		print $texout "\\textsb{".$header."} & ";
	}

	print $texout "\\textsb{ Finals } & ";
	print $texout "\\textsb{ Final Ballots } & \\textsb{Place} \\\\";

	foreach my $entry_id (
		sort {$entries{$b}{"place"} <=> $entries{$a}{"place"}}
		@{$results{"finals"}}
	) {
		print $texout "\\rowcolor[rgb]{.92,.92,.92}\[5.5pt\]\[5.5pt\]\n" if $switch++ % 2;

		print $texout Tab::texify($entries{$entry_id}{"code"});
		print $texout " & ";
		print $texout Tab::texify($entries{$entry_id}{"name"});
		print $texout " & ";
		print $texout Tab::texify($entries{$entry_id}{"school"});
		print $texout " & \\hfill ";
		print $texout Tab::texify($entries{$entry_id}{"state"});
		print $texout " \\hfill \\strut & ";

		print $texout "\\footnotesize\n";
		print $texout $results{$entry_id}{$final_number}." & ";
		print $texout "\\hfill \n";
		print $texout "\\footnotesize\n";
		print $texout $entries{$entry_id}{"final_count"}." \\hfill \\strut & ";
		print $texout "\\footnotesize\n";

		print $texout "\\hfill \\textsb{".Tab::texify(Lingua::EN::Numbers::Ordinate::ordinate($entries{$entry_id}{"place"}))."} \\hfill \\strut ";
		print $texout "\\\\ \n";
	}

	if ($ARGS{texout}) {

		return;

	} else {

		print $texout "\\end{tabular}\n";
		close $texout;

		if ($ARGS{"filename"}) {

			return;

		} else {

			$m->comp("/funclib/printout.mas",
				tourn     => $tourn,
				filename  => $filename,
				landscape => 1,
				wider     => 1,
				tail      => 1
			);
		}
	}


</%init>
