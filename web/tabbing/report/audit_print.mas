<%args>
	$round
	$filename
	$nsda_districts  => undef
	$nsda_nats       => undef
	$num_qualifiers  => undef
	$protocol    => undef
	$threshold       => undef
	$qualifiers      => undef
	$vacated         => undef
	$alternates      => undef
	$others          => undef
	$nsda            => undef
	$exclude         => undef
	$section_rank    => undef
	$start_placement => undef
	$vacate_option   => undef
</%args>
<%init>

	return unless $round;

	$protocol = $round->protocol
		unless $protocol;

	$m->abort unless $protocol;

	$section_rank++
		if $protocol->setting("equal_elims")
		&& ($round->type eq "elim"
			|| $round->type eq "prelim");

	$section_rank++ if $round->type eq "final";

	my $event = $round->event;
	my $event_type = $event->type;
	my %event_settings = $event->all_settings;
    my $code_style = $event_settings{"code_style"} if $event;

	my $debate_all++ if $nsda_districts && $event_type eq "debate";

	my (@results) = $m->comp(
		"/tabbing/results/order_entries.mas",
			long_names   => 1,
			nsda         => $nsda,
			round        => $round,
			protocol => $protocol,
			all_entries  => $debate_all,
			section_rank => $section_rank
	);

	my $entries_ref = pop @results if @results;

	my %show_round;
	my %round_ids = map{$_->id => $_->name} $event->rounds;

	my $longest;

	if ($code_style eq "names" || $code_style eq "names_lastfirst") {
		foreach my $id (keys %{$entries_ref->{"name"}}) {
			if ($longest < length($entries_ref->{"name"}{$id})) {
				$longest = length($entries_ref->{"name"}{$id});
			}
		}
	} else {

		foreach my $id (keys %{$entries_ref->{"code"}}) {
			if ($longest < length($entries_ref->{"code"}{$id})) {
				$longest = length($entries_ref->{"code"}{$id});
			}
		}

		$longest = POSIX::floor($longest * .75);
	}

	foreach my $tb_id (keys %{$entries_ref->{"tb_info"}}) {
		if ($entries_ref->{"tb_info"}{$tb_id}{"rounds"}) {
			foreach my $round (@{$entries_ref->{"tb_info"}{$tb_id}{"rounds"}}) {
				$show_round{$round_ids{$round}}++;
			}
		}
	}

	my %entry_by_id =
		map {$_->id => $_} $event->entries
		if $nsda_districts;

	return unless $entries_ref;

	my $round_robin++
		if $event_settings{"round_robin"}
		&& $round->type ne "elim"
		&& $round->type ne "final"
		&& $round->type ne "runoff";

    my %breakouts = ();

    if ($event_settings{"breakouts"}) {

        foreach my $breakout (1 .. $event_settings{"breakouts"}) {

            $breakouts{$breakout}{"name"} = $event_settings{"breakout_".$breakout."_label"};

            my @settings = $m->comp(
				"/funclib/event_entry_settings.mas",
                event => $event,
                tag   => "breakout_".$breakout
            );

            foreach my $setting (@settings) {
                $breakouts{$breakout}{$setting->entry->id}++;
            }

        }

    }


	my @schools = $m->comp(
		"/funclib/event_schools.mas",
		event => $event
	);

	my %school_name =
		map {$_->id => &Tab::short_name($_->name)}
		@schools;

	my %school_state =
		map {$_->id => $_->chapter->state}
		@schools if $nsda_nats;


    my %entry_ballots = $m->comp(
		"/funclib/round_ballot_strings.mas",
		round => $round
	);

	my @tiebreak_keys =
		sort {$a <=> $b}
		keys %{$entries_ref->{"tier_description"}};

	my $mark_ties++
		if scalar @tiebreak_keys > 1;

	my @ineligibles = $m->comp(
		"/funclib/event_entry_settings.mas",
		event => $event,
		tag   => "no_elims"
	);

	my %ineligible = map {$_->entry->id => $_->value} @ineligibles;

	my %sections;

	if ($round_robin) {

		foreach my $entry_id (keys %{${$entries_ref}{"pod"}}) {
			$sections{${$entries_ref}{"pod"}{$entry_id}}++;
		};

	} else {

		foreach my $entry_id (keys %{${$entries_ref}{"section"}}) {
			$sections{${$entries_ref}{"section"}{$entry_id}}++;
		};
	}

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select
			panel.letter, panel.id,
			ballot.id, ballot.entry, ballot.judge, ballot.chair,
			score.id, score.tag, score.value,
			round.id, round.name,
			judge.first, judge.last, judge.code

			from round, panel, ballot, score, judge

			where round.event = ?
			and round.name <= ?
			and round.id = panel.round
			and panel.id = ballot.panel
			and ballot.id = score.ballot
			and ballot.judge = judge.id
			and score.tag = 'rank'
	");

	$sth->execute($event->id, $round->name);

	my %ranks = ();

	while(
		my ( $section_letter, $section_id,
			$ballot_id, $ballot_entry, $ballot_judge, $ballot_chair,
			$score_id, $score_tag, $score_value,
			$round_id, $round_name,
			$judge_first, $judge_last, $judge_code
		) = $sth->fetchrow_array()
	) {

		unless ($ranks{$section_letter}{$round_name}{"done"}++) {
			push @{$ranks{$section_letter}{"rounds"}}, $round_name;
		}

		unless ($ranks{$section_letter}{$round_name}{$ballot_judge}{"done"}++) {
			push @{$ranks{$section_letter}{$round_name}{"judges"}}, $ballot_judge;
		}

		$ranks{$ballot_entry}{$round_name}{$ballot_judge} = $score_value;

		$ranks{"judge"}{$ballot_judge}{"code"}  = $judge_code;
		$ranks{"judge"}{$ballot_judge}{"first"} = $judge_first;
		$ranks{"judge"}{$ballot_judge}{"last"}  = $judge_last;
		$ranks{"judge"}{$ballot_judge}{"chair"}  = $ballot_chair if $event_type eq "congress";

	}

    my $filepath = $Tab::file_root."tmp/".$filename;

	open (TEXOUT, ">>$filepath.tex");
	binmode(TEXOUT, ":utf8");

	foreach my $section (sort {$a <=> $b} keys %sections) {

		my $tabular = "\\begin{tabular}{p{.15in}";
		$tabular .= "p{".$longest."ex}";

		my $left;

		foreach my $break (keys %breakouts) {
			$tabular .= "p{.75in}";
			$left -= .75;
		}

		unless ($code_style eq "names" || $code_style eq "names_lastfirst") {
			$tabular .= "p{1.1in}";
		}

		$tabular .= "p{1.1in}";

		if ($nsda_nats) {
			$tabular .= "p{.2in}";
			$left -= .2;
		}

		$tabular .= "|";

		foreach my $round (@{$ranks{$section}{"rounds"}}) {
			next unless $show_round{$round};
			foreach my $judge_id (@{$ranks{$section}{$round}{"judges"}}) {
				$tabular .= "p{.3in}\n";
				$left -= .35;
			}
		}

		$tabular .= "|";
		$left += 6;

		$left -= ($longest * .05);

		my $size = $left / (scalar @tiebreak_keys);

		foreach my $key (@tiebreak_keys) {
			$tabular .= "p{".$size."in}";
		}

		$tabular .= "}\n";

		my $tiebreaks;

		print TEXOUT "\\textsb{\\Large  ";
		print TEXOUT "Chamber " if $event_type eq "congress";
		print TEXOUT "Section " if $event_type eq "speech";
		print TEXOUT Tab::texify($section);
		print TEXOUT " Results  \\hfill After ";
		print TEXOUT Tab::texify($round->realname)."\n";
		print TEXOUT " \\hfill ";
		print TEXOUT Tab::texify($event->name)." }\n";
		print TEXOUT "\\smallskip\n";
		print TEXOUT "\\newline\n";

		print TEXOUT $tabular;
		print TEXOUT "\\rowcolor[rgb]{1,.95,.72}\[5.5pt\]\[5.5pt\]\n";

		print TEXOUT " \\# ";

		unless ($code_style eq "names" || $code_style eq "names_lastfirst") {
			print TEXOUT "& Code ";
		}

		foreach my $break (keys %breakouts) {
			print TEXOUT " & ".Tab::texify($breakouts{$break}{"name"});
		}

		print TEXOUT " & Name ";
		print TEXOUT " & School ";
		print TEXOUT " & ST " if $nsda_nats;

		foreach my $round (@{$ranks{$section}{"rounds"}}) {

			next unless $show_round{$round};

			foreach my $judge_id (@{$ranks{$section}{$round}{"judges"}}) {

				my $judge_code .= $ranks{"judge"}{$judge_id}{"code"};

				my $judge_name .= $ranks{"judge"}{$judge_id}{"first"};
				$judge_name .= " ".$ranks{"judge"}{$judge_id}{"last"};

				unless ($judge_code) {
					$judge_code = substr($ranks{"judge"}{$judge_id}{"first"}, 0, 1);
					$judge_code .= substr($ranks{"judge"}{$judge_id}{"last"}, 0, 1);
				}

				$judge_code .= "*" if $ranks{"judge"}{$judge_id}{"chair"};

				print TEXOUT " & \\scriptsize ".Tab::texify("R".$round." ".$judge_code);

			}
		}

		foreach my $key (@tiebreak_keys) {

			print TEXOUT " & \\scriptsize ".Tab::texify(${$entries_ref}{"tier_description"}{$key});

			$tiebreaks .= "\\parbox{.75in}{\\textsb{ ".Tab::texify(${$entries_ref}{"tier_description"}{$key}).": }} ";
			$tiebreaks .= Tab::texify(${$entries_ref}{"tier_long_description"}{$key});
			$tiebreaks .= "\\smallskip\n\\newline\n";

		}

		print TEXOUT "\\end{tabular}\n";
		print TEXOUT "\\newline\n";

		print TEXOUT "\\small\n";

		my $count = $start_placement;
		$count = 1 unless $count;
		my $alt_count = 1;

		my $switch;

		if (${$entries_ref}{"by_place"}) {

			my $last_tied;

			foreach my $key (sort {$a <=> $b} keys %{${$entries_ref}{"by_place"}}) {

				my $tie++ if (scalar @{${${$entries_ref}{"by_place"}}{$key}}) > 1;

				undef $tie
					if $round->type eq "elim"
					&& $event_type ne "speech"
					&& $event_type ne "congress";

				my $did;

				ENTRY:
				foreach my $entry_id (@{${${$entries_ref}{"by_place"}}{$key}}) {

					next if $exclude && $exclude->{$entry_id}++;

					if ($round_robin) {
						next unless ${$entries_ref}{"pod"}{$entry_id} == $section;
					} else {
						next unless ${$entries_ref}{"section"}{$entry_id} == $section;
					}

					$did++;

					print TEXOUT $tabular;

					if ($switch++ % 2) {
						print TEXOUT "\\rowcolor[rgb]{.92,.92,.92}\[5.5pt\]\[5.5pt\]\n";
					} else {
						print TEXOUT "\\rowcolor[rgb]{.99,.99,.99}\[5.5pt\]\[5.5pt\]\n";
					}

					if ($round_robin) {
						print TEXOUT Tab::texify(${$entries_ref}{"pod_rank"}{$entry_id});
					} else {
						print TEXOUT Tab::texify(${$entries_ref}{"section_rank"}{$entry_id});
					}

					unless ($code_style eq "names" || $code_style eq "names_lastfirst") {
						print TEXOUT " & ".Tab::texify($entries_ref->{"code"}{$entry_id});
					}

					foreach my $break (keys %breakouts) {
						print TEXOUT " & ".Tab::texify($breakouts{$break}{"name"})
							if $breakouts{$break}{$entry_id};
					}

					my $name = ${$entries_ref}{"name"}{$entry_id};
					my @names = split (/\ /, $name);
					my $last = pop @names;
					$last .= ", ";
					unshift @names, $last;
					$name = join(" ", @names);

					print TEXOUT " & \\truncate{1.05in}{".Tab::texify($name)." } ";

					my $school_name = $school_name{$entries_ref->{"school_id"}{$entry_id}};
					print TEXOUT " & \\truncate{1.05in}{".Tab::texify($school_name)." } ";

					if ($nsda_nats) {
						my $school_state = $school_state{$entries_ref->{"school_id"}{$entry_id}};
						print TEXOUT " & ".Tab::texify($school_state)." ";
					}

					foreach my $round (@{$ranks{$section}{"rounds"}}) {

						next unless $show_round{$round};

						foreach my $judge_id (@{$ranks{$section}{$round}{"judges"}}) {

							print TEXOUT " & \\raggedleft ".Tab::texify($ranks{$entry_id}{$round}{$judge_id});

						}
					}

					foreach my $key (@tiebreak_keys) {

						my $value = ${$entries_ref}{"tiebreak"}{$key}{$entry_id};

						$value =~ s/\.(?:|.*[^0]\K)0*\z//;

						my $desc = ${$entries_ref}{"tier_description"}{$key};

						$value = sprintf("%.2f", $value)
							unless substr($desc,0,2) eq "Rk"
							|| substr($desc,0,3) eq "PRk"
							|| substr($desc,0,3) eq "Win"
							|| substr($desc,0,8) eq "Prev Win"
							|| substr($desc,0,4) eq "Rnds"
							|| substr($desc,0,4) eq "Loss"
							|| substr($desc,0,3) eq "Dwn"
							|| substr($desc,0,4) eq "CDwn"
							|| substr($desc,0,3) eq "H2H"
							|| substr($desc,0,2) eq "JP"
							|| substr($desc,0,3) eq "Bal";

						print TEXOUT " & \\raggedleft \\footnotesize ".Tab::texify($value);

					}

					print TEXOUT "\n \\end{tabular}\n";
					print TEXOUT "\\newline\n";

				}

				$last_tied++ if $tie;

			}
		}

		if ($tiebreaks) {
			print TEXOUT "\\vspace{.1in}\n";
			print TEXOUT "\\newline\n";
			print TEXOUT "{\\bf Tiebreakers:}\n";
			print TEXOUT "\\newline\n";
			print TEXOUT $tiebreaks;
		}

		print TEXOUT "\\textsb{ * indicates Parliamentarians } \n" if $event_type eq "congress";

		print TEXOUT "\\newpage\n";

	}

	close TEXOUT;
	return;

</%init>
