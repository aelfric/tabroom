<%args>
	$tourn
	$session
	$perms
	$event_id => undef
	$report   => undef
	$type     => undef
	$limit    => undef
</%args>
<%init>

	if ($type eq "CSV") {
		$m->redirect("event_speakers_csv.mhtml?event_id=".$event_id);
	}

	my @events;
	my $event;

	if ($event_id eq "all") {
		@events = $m->comp("/funclib/perms/events.mas",
			tourn => $tourn,
			perms => $perms
		);
		my $ids = join(',', @events);
	} else {
		$event = Tab::Event->retrieve($event_id);
		push @events, $event;
	}

	my $name;

	if ($event_id eq "all") {
		$name = $tourn->name
	} else {
		$name = $event->name;
	}

    $name =~ s/[\W_]//g;

    my $now = DateTime->now;
	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
    $now->set_time_zone($tz);

    my $filename = "Speakers-$limit-$name-".$session->id;
    my $filepath = $Tab::file_root."tmp/".$filename;

    $m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		head     => 1,
		wide     => 1
	);

    open (TEXOUT, ">>$filepath.tex");
	binmode(TEXOUT, ":utf8");

	my %school_name = map {$_->id => $_->short_name} $tourn->schools;

	foreach my $event (@events) {

		my $type = $event->type;
		next unless $type eq "debate" || $type eq "wsdc";
		my %event_settings = $event->all_settings();

		my @rounds =
			sort {$b->name <=> $a->name}
			$m->comp("/funclib/event_rounds.mas",
				event => $event,
				done  => "yes"
			);

		my $round;

		foreach my $all_round (@rounds) {
			next if $all_round->type eq "elim";
			next if $all_round->type eq "final";
			next if $all_round->type eq "runoff";
			$round = $all_round;
			last if $round;
		}
		next unless $round;

		my $protocol_id = $event_settings{"speaker_protocol"};
		my $protocol = Tab::Protocol->retrieve($protocol_id) if $protocol_id;

		next unless ($protocol);

		my $points;
		my $ranks;
		my $wins;

		my $notfirst;
		my $first_wins;

		foreach my $tb ($protocol->tiebreaks) {

			unless ($notfirst++) {
				$first_wins++ if $tb->name eq "ballots";
				$first_wins++ if $tb->name eq "winloss";
			}

			$ranks++ if ($tb->name eq "ranks"
				|| $tb->name eq "reciprocals");

			$wins++ if ( $tb->name eq "winloss"
				|| $tb->name eq "ballots");

			$points++ if ($tb->name eq "points"
				|| $tb->name eq "competition"
				|| $tb->name eq "opp_points");
		}

		print TEXOUT "\\newpage\n";
		print TEXOUT "\\noindent\n";
		print TEXOUT "\\textsb{\\Large ". Tab::texify($tourn->name);
		print TEXOUT "\\hfill ";
		print TEXOUT Tab::texify($event->name);
		print TEXOUT "\\hfill Speakers in Order } \\\\ \n";
		print TEXOUT "\\newline\n";

		print TEXOUT "\\strut \\hfill\n";
		print TEXOUT "{\\bf \\color{blue} Basis: ".$protocol->name." } \\hfill\n";
		print TEXOUT "\\normalsize\n";

		if ($first_wins) {
			print TEXOUT "\\smallskip\n";
			print TEXOUT "\\newline\n";
			print TEXOUT "\\strut \\hfill\n";
			print TEXOUT "{\\color{red} \\textsb{ Warning: Win/loss is the first tiebreaker! Are you sure this is the speaker tiebreaker set?}} \\hfill\n";
		}
		print TEXOUT "\\smallskip\n";
		print TEXOUT "\\newline\n";

		my $novice = $event_settings{"top_novice"} if $event;

		my %student_ballots = ();

		my $dbh = Tab::DBI->db_Main();

		my $sth = $dbh->prepare("
			select value.id, value.tag, value.value,
				value.student, student.id,
				ballot.entry, ballot.judge, ballot.bye, ballot.chair,
				round.name
			from score value, ballot, panel, round, entry_student, student
			where value.ballot = ballot.id
				and ballot.panel = panel.id
				and panel.round = round.id
				and round.name <= ?
				and round.event = ?
				and ballot.entry = entry_student.entry
				and entry_student.student = student.id
			order by round.name, ballot.entry, ballot.chair, ballot.judge,
				CASE value.tag
					WHEN 'winloss' 	then 1
					when 'rank'   	then 2
					when 'point' 	then 3
					when 'refute' 	then 4
				end
		");

		$sth->execute($round->name, $event->id);

		my %student_round;


		while (
			my (
				$id, $tag, $value, $value_student, $student, $entryid, $judge, $bye, $chair, $roundname
			) = $sth->fetchrow_array()
		) {

			# I don't think we want these but delete this line if we do.
			next if $tag eq "rank" && not defined $ranks;
			next if $tag eq "point" && not defined $points;
			next if $tag eq "refute" && not defined $points;
			next if $tag eq "winloss" && not defined $wins;
			next if $tag eq "point" && $value_student != $student;
			next if $tag eq "refute" && $value_student != $student;

			next if $value == 0;

			if ($student_round{$student} != $roundname) {
				$student_ballots{$student} .= '} ' if $student_ballots{$student};
				$student_ballots{$student} .= "\\parbox{.75in}{R".$roundname.": \\";
			}

			$student_ballots{$student} .= ' '
				if $student_ballots{$student}
					&& $tag eq "rank"
					&& ($type eq "speech" || $type eq "wudc" || $type eq "congress");

			$student_ballots{$student} .= ' '
				if $student_ballots{$student}
					&& $tag eq "winloss"
					&& ($type eq "debate" || $type eq "wsdc");

			if ($student_ballots{$student}) {
				if ($tag eq "point" && ($type eq "speech" || $type eq "wudc" || $type eq "congress")) {
					$student_ballots{$student} .= '/';
				} else {
					$student_ballots{$student} .= " ";
				}
			}

			$student_round{$student} = $roundname;

			if ($tag eq "winloss") {

				if ($bye) {
					$student_ballots{$student} .= "BYE"
				} else {
					$student_ballots{$student} .= "W" if $value > 0;
					$student_ballots{$student} .= "L" if $value < 1;
				}

			} elsif ($tag eq "refute") {

				$student_ballots{$student} .= "(".$value.")";

			} else {
				$student_ballots{$student} .= $value;
			}

		}

		my ($students_ref, $tbs_ref, $desc_ref,
			$forfeit_ref, $meh, $long_desc_ref, $novice_ref,
			$name_ref, $code_ref, $school_ref) =
			$m->comp("/tabbing/results/order_speakers.mas", round => $round);

		my $tabular = "\\begin{tabular}{p{.25in}p{1.25in}";

		my $ballot_space = 5;

		foreach my $key (keys %{$desc_ref}) {
			$tabular .= "p{.28in}";
			$ballot_space -= .38;
		}

		$tabular .= "p{".$ballot_space."in}}\n";

		print TEXOUT $tabular;
		print TEXOUT "\\rowcolor[rgb]{1,.95,.66}\[5.5pt\]\[5.5pt\]\n";
		print TEXOUT "\\noindent\n";

		print TEXOUT " & {\\bf Debater} ";

		foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) {
			print TEXOUT " & {\\scriptsize \\bf ".${$desc_ref}{$key}." } ";
		}


		print TEXOUT " & {\\bf Raw Scores ";

		my $speaker_max_scores = $event_settings{"speaker_max_scores"};
		print TEXOUT " -- Top ".$speaker_max_scores." counted" if $speaker_max_scores;

		print TEXOUT " } \n";


		print TEXOUT "\\end{tabular}\n";
		print TEXOUT "\\newline\n";

		my $count = 1;
		my $switch;

		if ($students_ref) {

			foreach my $key (sort {$a <=> $b} keys %{$students_ref}) {

				my $tie++ if scalar @{${$students_ref}{$key}} > 1;

				next if $limit && $key > $limit;

				foreach my $student_id (@{${$students_ref}{$key}}) {

					print TEXOUT $tabular;

					print TEXOUT "\\rowcolor[rgb]{.84,.89,.94}\[5.5pt\]\[5.5pt\]\n" if ($switch++ % 2);

					print TEXOUT $key;
					print TEXOUT " -T" if $tie;
					print TEXOUT " & ";

					print TEXOUT "\\truncate{1.25in}{".Tab::texify(${$name_ref}{$student_id});
					print TEXOUT " (N) " if ${$novice_ref}{$student_id} && $novice ne "none";
					print TEXOUT "} \n \n \\truncate{1.25in}{".Tab::texify($school_name{${$school_ref}{$student_id}})."} & ";

					foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) {

						my $value = ${$tbs_ref}{$student_id."-".$key};
						$value = sprintf("%.2f", $value);
						$value =~ s/\.(?:|.*[^0]\K)0*\z//;

						print TEXOUT "{\\footnotesize ".Tab::texify($value)." } & "
					}

					print TEXOUT "\\footnotesize \\raggedright ".$student_ballots{$student_id}." } ";

					print TEXOUT "\\end{tabular}\n";
					print TEXOUT "\\newline\n";

				}

			}

		}

		print TEXOUT "\\pagebreak\n";

	}

	close TEXOUT;

    $m->comp("/funclib/printout.mas", tourn => $tourn, filename => $filename, tail => 1 );

</%init>

