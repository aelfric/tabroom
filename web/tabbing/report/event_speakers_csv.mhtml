<%args>
	$tourn
	$session
	$event_id => undef
	$report => undef
</%args>
<%init>

	my $event = Tab::Event->retrieve($event_id) if $event_id && $event_id ne "all";

    my $now = DateTime->now;
	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
    $now->set_time_zone($tz);

	my $name = $tourn->name if $event_id eq "all";
    $name = $event->name if $event && not defined $name;
    $name =~ s/[\W_]//g;

	my @events;
	push @events, $event;
	@events = sort {$a->name cmp $b->name} $tourn->events if $event_id eq "all";

    my $filename = "Speakers-$name-.csv";

    $m->clear_buffer;
    $r->content_type('application/csv');
    $r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";

	my %school_name;
	foreach my $school ($tourn->schools) {
		$school_name{$school->id} = $school->short_name;
	}

	foreach my $event (@events) {

		my $type = $event->type;

		my @rounds = sort {$b->name <=> $a->name} $m->comp(
			"/funclib/event_rounds.mas",
			event => $event,
			done  => "yes"
		);

		my $round;

		foreach my $all_round (@rounds) {
			next if $all_round->type eq "elim";
			next if $all_round->type eq "final";
			next if $all_round->type eq "runoff";
			$round = $all_round;
			last if $round;
		}

		next unless $round;

		my $protocol_id = $event->setting("speaker_protocol");
		my $protocol = Tab::Protocol->retrieve($protocol_id) if $protocol_id;
		next unless ($protocol);

		my $points;
		my $ranks;
		my $wins;

		foreach my $tb ($protocol->tiebreaks) {

			$ranks++ if ($tb->name eq "ranks"
				|| $tb->name eq "reciprocals");

			$wins++ if ($tb->name eq "opp_wins"
				|| $tb->name eq "winloss"
				|| $tb->name eq "losses"
				|| $tb->name eq "ballots"
			);
			$points++ if ($tb->name eq "points"
				|| $tb->name eq "competition"
				|| $tb->name eq "opp_points"
			);
		}

		$m->print("Tournament:,".$tourn->name.",".$event->name.",Speakers in Order\n");

		my $novice = $event->setting("top_novice") if $event;

		my %student_ballots = ();

		my $dbh = Tab::DBI->db_Main();

		my $sth = $dbh->prepare("

			select score.id, score.tag, score.value, score.student,
				student.id,
				ballot.entry, ballot.judge, ballot.bye, ballot.chair,
				round.name

			from score, ballot, panel, round, entry_student, student
			where score.ballot = ballot.id
			and ballot.panel = panel.id
			and panel.round = round.id
			and round.name <= ?
			and round.event = ?
			and ballot.entry = entry_student.entry
			and entry_student.student = student.id
			order by round.name, ballot.entry, ballot.chair, ballot.judge, score.student,
				CASE score.tag
					WHEN 'winloss' 	then 1
					when 'rank'		then 2
					when 'point' 	then 3
					when 'refute' 	then 4
				end
		");

		$sth->execute($round->name, $event->id);

		my %student_round;

		while (
			my (
				$id, $tag, $score, $score_student, $student, $entryid, $judge, $bye, $chair, $roundname
			) = $sth->fetchrow_array()
		) {

			unless ($student_round{$student} == $roundname) {
				$student_ballots{$student} .= ','.$roundname.',';
				$student_round{$student} = $roundname;
			}

			next if $tag ne "point"
				&& $tag ne "rank"
				&& $tag ne "winloss"
				&& $tag ne "refute";

			next if $tag eq "rank" && not defined $ranks;
			next if $tag eq "point" && not defined $points;
			next if $tag eq "winloss" && not defined $wins;
			next if $tag eq "point" && $score_student != $student;
			next if $tag eq "refute" && $score_student != $student;

			if ($tag eq "winloss") {

				if ($bye) {
					$student_ballots{$student} .= "BYE"
				} else {
					$student_ballots{$student} .= "W" if $score > 0;
					$student_ballots{$student} .= "L" if $score < 1;
				}

			} elsif ($tag eq "refute") {

				$student_ballots{$student} .= "(R ".$score.")";

			} else {
				$student_ballots{$student} .= $score;
			}

		}

		my ($students_ref, $tbs_ref, $desc_ref, $forfeit_ref, $meh, $long_desc_ref, $novice_ref, $name_ref, $code_ref, $school_ref)
			= $m->comp(
				"/tabbing/results/order_speakers.mas", round => $round);

		$m->print("Order,Debater,Institution,");

		my $usa_wsdc = $event->setting("usa_wsdc");

		if ($usa_wsdc) {
			$m->print("School, State, Coach,");
		}

		foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) {
			$m->print(${$desc_ref}{$key}.",");
		}

		$m->print("Raw Scores \n");

		if ($students_ref) {

			foreach my $key (sort {$a <=> $b} keys %{$students_ref}) {

				my $tie++ if scalar @{${$students_ref}{$key}} > 1;

				foreach my $student_id (@{${$students_ref}{$key}}) {

					$m->print($key);
					$m->print("-T") if $tie;
					$m->print(",");

					$m->print(${$name_ref}{$student_id}.",");
					$m->print("Novice") if ${$novice_ref}{$student_id} && $novice ne "none";
					$m->print($school_name{${$school_ref}{$student_id}}.",");

					if ($usa_wsdc) {

						my $student = Tab::Student->retrieve($student_id);

						my $nsda_person_id = $student->setting("coach_points");

						my $nsda_person = Tab::Person->search( nsda => $nsda_person_id )->first;
						my $nsda_person_ref;

						unless ($nsda_person) {
							$nsda_person_ref = $m->comp("/funclib/nsda/person.mas", nsda_id => $nsda_person_id);
						}

						$m->print($student->chapter->name.",".$student->chapter->state.",");

						if ($nsda_person) {
							$m->print($nsda_person->first." ".$nsda_person->last);
						} elsif ($nsda_person_ref) {
							$m->print($nsda_person_ref->{first}." ".$nsda_person_ref->{last});
						}

						$m->print(",");

					}

					foreach my $key (sort {$a <=> $b} keys %{$desc_ref}) {

						my $score = ${$tbs_ref}{$student_id."-".$key};
						$score = sprintf("%.2f", $score);
						$score =~ s/\.(?:|.*[^0]\K)0*\z//;
						$m->print(Tab::texify($score).",");
					}


					$m->print($student_ballots{$student_id}."\n");
				}

			}

		}

	}

	$m->flush_buffer;
	$m->abort;

</%init>

