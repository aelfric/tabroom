<%args>
	$tourn
	$event_id => undef
	$publish  => undef
	$generate => undef
</%args>
<%init>

	use POSIX;

	my $event = Tab::Event->retrieve($event_id);

	$m->abort unless $event;
	$m->abort unless $event->tourn->id == $tourn->id;

	my $type = "cx" if $event->setting("baker");
	$type = "ld" if $event->setting("dukesandbailey");
	$type = "pf" if $event->setting("ndca_public_forum");

	$m->abort unless $type;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now(time_zone => $tz);

	my $num_states = $m->comp("/funclib/event_states.mas", event => $event);

	my $state_mult = 1;
	$state_mult = 1.2 if $num_states > 2;
	$state_mult = 1.4 if $num_states > 5;
	$state_mult = 1.6 if $num_states > 8;
	$state_mult = 1.8 if $num_states > 12;
	$state_mult = 2.0 if $num_states > 15;

	my @entries = $event->entries( active => 1, );

	my $num_entries = scalar @entries;
	$num_entries = 125 if $num_entries > 125;
	$num_entries = 100 if $num_entries > 100 && $type eq "ld";
	$num_entries = 80 if $num_entries > 80 && $type eq "cx";

	my @rounds = sort {$b->name <=> $a->name} $event->rounds;

	my @elims;
	my @prelims;
	my $final;

	foreach my $round (@rounds) {
		next if $round->type eq "runoff";
		$final = $round unless $final;
		push @elims, $round if $round->type eq "elim";
		push @elims, $round if $round->type eq "final";
		push @prelims, $round if $round->type ne "final" && $round->type ne "elim";
	}

	my @scores = $m->comp("/funclib/event_scores.mas", event => $event);

	my %in_round = ();
	my %final_ballots = ();
	my %prelim_wins = $m->comp("/funclib/entry_wins.mas", event => $event);

	foreach my $score (@scores) {
		next unless $score->tag eq "winloss";
		push @{$in_round{$score->roundid}}, $score->entryid;
		$final_ballots{$score->entryid}++
			if $score->roundid == $final->id
			&& $score->value == 1;
	}

	my %round_multiplier = ();
	my %used = ();

	if ($final) {

		my $what_it_takes;

		foreach my $entry_id (@{$in_round{$final->id}}) {
			next if $used{$entry_id};
			$what_it_takes = $final_ballots{$entry_id}
				if $what_it_takes < $final_ballots{$entry_id};
		}

		foreach my $entry_id (@{$in_round{$final->id}}) {
			next if $used{$entry_id};

			if ($final->type ne "elim" && $final->type ne "final") { 
				$round_multiplier{$entry_id} = 1;
			} else { 
				$round_multiplier{$entry_id} = 2.3 if $what_it_takes == $final_ballots{$entry_id};
				$round_multiplier{$entry_id} = 1.8 if $what_it_takes != $final_ballots{$entry_id};
			}
			$used{$entry_id}++;
		}

	}

	my $mult = "1.6";
	my $left = scalar @elims;

	foreach my $round (@elims) {

		$left--;
		next if $round->id == $final->id;

		foreach my $entry_id (@{$in_round{$round->id}}) {
			next if $used{$entry_id};
			$round_multiplier{$entry_id} = $mult;
			$used{$entry_id}++;
		}

		$mult = 1.1 if $left < 1;
		$mult = 1.1 if $mult == 1.2;
		$mult = 1.2 if $mult == 1.4;
		$mult = 1.4 if $mult == 1.6;

	}

	my %entry_points = ();
	my %entry_win_pct = ();

	foreach my $entry (@entries) {

		$round_multiplier{$entry->id} = 1
			unless $round_multiplier{$entry->id};

		$entry_win_pct{$entry->id} = $prelim_wins{$entry->id} / (scalar @prelims)
			if @prelims;

		$entry_points{$entry->id} = POSIX::ceil(
			$state_mult
			* $round_multiplier{$entry->id}
			* $num_entries
			* (sprintf "%.2f", $entry_win_pct{$entry->id})
		);
	}

	@entries = sort {$entry_points{$b->id} <=> $entry_points{$a->id}} @entries;

	if ($generate) {

		return unless @prelims;

		my $label = "NDCA Baker Points" if $type eq "cx";
		$label = "NDCA Dukes and Bailey Points" if $type eq "ld";
		$label = "NDCA Averill Points" if $type eq "pf";

		my $set = Tab::ResultSet->search(
			event => $event->id,
			label => $label
		)->first;

		if ($set) {

			$set->generated($now);
			$set->update();

		} else {

			$set = Tab::ResultSet->create({
				tourn     => $tourn->id,
				event     => $event->id,
				label     => $label,
				generated => $now,
				published => $publish
			});
		}

		my %keys = map {$_->tag => $_} $set->result_keys;

        Tab::ResultValue->set_sql( clear_set => "
            delete result_value.*
            from result, result_value
            where result_value.result = result.id
            and result.result_set = ?
        ");

        Tab::Result->set_sql( clear_set => "
            delete result.* from result where result_set = ?
        ");

		Tab::ResultValue->sql_clear_set->execute($set->id);
		Tab::Result->sql_clear_set->execute($set->id);

		foreach my $entry (@entries) {

			my $result = Tab::Result->create({
				result_set => $set->id,
				entry      => $entry->id
			});

			unless ($keys{"Points"}) {
				$keys{"Points"} = Tab::ResultKey->create({
					result_set  => $set->id,
					tag         => "Points",
					description => "NDCA Qualifying Points",
					sort_desc   => 1
				});
			}

			Tab::ResultValue->create({
				result     => $result->id,
				value      => $entry_points{$entry->id},
				result_key => $keys{"Points"},
				priority   => 1,
			});

			unless ($keys{"Wins"}) {
				$keys{"Wins"} = Tab::ResultKey->create({
					result_set  => $set->id,
					tag         => "Wins",
					description => "Prelim Round Wins",
					sort_desc   => 1
				});
			}

			Tab::ResultValue->create({
				result     => $result->id,
				value      => $prelim_wins{$entry->id},
				result_key => $keys{"Wins"},
				priority   => 2
			});

			unless ($keys{"Pct"}) {
				$keys{"Pct"} = Tab::ResultKey->create({
					result_set  => $set->id,
					tag         => "Pct",
					description => "Win Percentage",
					sort_desc   => 1
				});
			}

			Tab::ResultValue->create({
				result_key => $keys{"Pct"},
				result     => $result->id,
				value      => ((sprintf "%.2f", $entry_win_pct{$entry->id}) * 100),
				priority   => 3,
			});

			unless ($keys{"Elim"}) {
				$keys{"Elim"} = Tab::ResultKey->create({
					result_set  => $set->id,
					tag         => "Elim",
					description => "Elim Round Multiplier",
					sort_desc   => 1
				});
			}

			Tab::ResultValue->create({
				result     => $result->id,
				value      => $round_multiplier{$entry->id},
				result_key => $keys{"Elim"},
				priority   => 4
			});

			unless ($keys{"Field"}) {
				$keys{"Field"} = Tab::ResultKey->create({
					result_set  => $set->id,
					tag         => "Field",
					description => "Field Size",
					sort_desc   => 1
				});
			}

			Tab::ResultValue->create({
				result     => $result->id,
				value      => $num_entries,
				result_key => $keys{"Field"},
				priority   => 5
			});

			unless ($keys{"Geo"}) {
				$keys{"Geo"} = Tab::ResultKey->create({
					result_set  => $set->id,
					tag         => "Geo",
					description => "Geography Multiplier",
					sort_desc   => 1
				});
			}

			Tab::ResultValue->create({
				result     => $result->id,
				value      => $state_mult,
				result_key => $keys{"Geo"},
				priority   => 6
			});
		}

		return;
	}

</%init>

	<div class="menu">

		<div class="sidenote">

			<h4>NDCA point factors</h4>

			<div class="evenrow block">
				<span class="hundo">
					Field Size
				</span>
				<span class="smallerspan">
					<% $num_entries %>
				</span>
			</div>

			<div class="oddrow block">
				<span class="hundo">
					# States
				</span>
				<span class="smallerspan">
					<% $num_states %>
				</span>
			</div>

			<div class="evenrow block">
				<span class="hundo">
					Geography Score
				</span>
				<span class="smallerspan">
					<% $state_mult %>
				</span>
			</div>

			<br />

			<a class="blue block" href="points_csv.mhtml?event_id=<% $event->id %>">
				Download as CSV
			</a>

		</div>

	</div>

	<div class="main">

		<div class="full nospace">

			<span class="third">
				<h4>NDCA Qualifying Points</h4>
			</span>

			<span class="third centeralign">
				<h4><% $event->name %></h4>
			</span>
			<span
				class="third rightalign"
				id="ndca_buttonarea"
			>
			</span>

		</div>

		<& /funclib/tablesorter.mas, table => "ndca" &>

		<table id="ndca">
			<thead>
				<tr class="yellowrow">
					<th class="smallish">
						Student
					</th>

					<th class="smallish">
						School
					</th>

					<th class="smallish">
						Wins
					</th>

					<th class="smallish">
						%
					</th>

					<th class="smallish">
						Elim
					</th>

					<th class="smallish">
						Points
					</th>
				</tr>
			</thead>

			<tbody>
%				foreach my $entry (@entries) {
					<tr>
						<td>
							<% $entry->name %>
						</td>

						<td>
							<% $entry->school->short_name %>
						</td>

						<td>
							<% $prelim_wins{$entry->id} %>
						</td>

						<td>
							<% (sprintf "%.2f", $entry_win_pct{$entry->id}) * 100  %>%
						</td>

						<td>
							<% $round_multiplier{$entry->id} %>
						</td>

						<td>
							<% $entry_points{$entry->id} %>
						</td>
					</tr>
%				}
			</tbody>
		</table>
	</div>
