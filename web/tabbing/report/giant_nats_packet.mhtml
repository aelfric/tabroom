<%args>
	$tourn
	$tourn_settings
	$session
	$perms
	$person_settings
</%args>
<%init>

	my $name = $tourn->name;
	$name =~ s/[\W_]//g;

    my $filename = "FullResults-$name";
    my $filepath = $Tab::file_root."tmp/".$filename;

    $m->comp("/funclib/printout.mas",
		tourn       => $tourn,
		filename    => $filename,
		head        => 1,
		array       => 1.2,
        head        => 1,
        superwide   => 1,
        taller      => 1,
        footer_text => $tourn->start->year." ".$tourn->name." -- Results",
        no_footer   => 1,
        array       => "1.1",
        landscape   => 1
	);

	my $dbh = Tab::DBI->db_Main();

	my @events = $tourn->events;
	@events = sort {$a->type cmp $b->type} @events;
	@events = sort {$a->setting("supp") cmp $b->setting("supp")} @events;

    open (my $texout, ">>$filepath.tex");
	binmode($texout, ":utf8");

	foreach my $event (@events) {

		if ($event->type eq "congress") {

		} elsif ($event->abbr eq "BQ" || $event->abbr eq "WS" ) {


		} else {

			my $codes = $event->setting('code_style');

			my $show_codes++ unless ($codes eq "names"
				|| $codes eq "last_names"
				|| $codes eq "code_name"
				|| $codes eq "names_lastfirst");

			my $fontsize = $person_settings->{"fontsize"};
			$fontsize = "scriptsize" if ($fontsize eq "default" || (not defined $fontsize));

			my $code_length;

			my $name_string = "distinct(CONCAT(student.first,' ',student.last)) SEPARATOR ' & '";

			if ($event->type eq "wsdc") {
				$name_string = "distinct(CONCAT(student.last)) SEPARATOR ' & '";
			}

			my $sth = $dbh->prepare("
				select entry.id,
					entry.code as entry_code,
					GROUP_CONCAT(
						$name_string
					) as entryname,
					school.name, school.state,
					region.code, region.name,
					round.name, round.type,
					GROUP_CONCAT(distinct CONCAT(rank.id,'-',rank.value) SEPARATOR ' '),
					winloss.value,
					GROUP_CONCAT(distinct CONCAT(point.id,'-',point.value) SEPARATOR ' '),
					panel.bye, ballot.bye, ballot.forfeit,
					student.id

				from (entry, round, panel, ballot, school, entry_student, student)

					left join score rank on rank.tag = 'rank'
						and rank.ballot = ballot.id

					left join score winloss on winloss.tag = 'winloss'
						and winloss.ballot = ballot.id

					left join score point on point.tag = 'point'
						and point.ballot = ballot.id

					left join region on school.region = region.id

				where entry.event = ?
				and entry.id      = ballot.entry
				and entry.active  = 1
				and ballot.panel  = panel.id
				and panel.round   = round.id

				and entry.school = school.id
				and entry_student.entry = entry.id
				and entry_student.student = student.id

				and not exists (
					select rs.id
						from round_setting rs
					where rs.round = round.id
						and rs.tag = 'ignore_results'
				)

				group by ballot.id
			");

			$sth->execute($event->id);

			my %results;
			my $max_round;
			my $min_round;
			my %round_type;

			my $name_length;

			while (
				my ($entry_id,
					$entry_code,
					$entry_name,
					$school_name, $school_state,
					$region_code, $region_name,
					$round_name, $round_type,
					$rank_value,
					$winloss_value,
					$point_value,
					$pbye, $bbye, $forfeit,
					$student_id
				) = $sth->fetchrow_array()
			) {


				unless ($results{$entry_id}{"school_name"}) {
					$school_name = $m->comp('/funclib/short_name.mas', name => $school_name);

					if ($school_name eq "Air") {
						$school_name = "Air Academy";
					}
					$school_name = substr($school_name, 0, 24);
					$results{$entry_id}{"school_name"}  = $school_name;
				}

				$results{$entry_id}{"entry_code"}   = $entry_code;
				$results{$entry_id}{"entry_name"}   = $entry_name;

				if ($tourn_settings->{nsda_nats}) {
					if ($school_state) {
						$results{$entry_id}{"school_state"} = $school_state;
					} else {
						$results{$entry_id}{"school_state"} = "INT";
					}
				}

				$results{$entry_id}{"region_name"}  = $region_name;
				$results{$entry_id}{"region_code"}  = $region_code;

				unless ($results{$entry_id}{"divide"}{$round_name}) {
					$results{$entry_id}{"divide"}{$round_name}++;
				}

				if ($results{$entry_id}{$round_name}) {

					$results{$entry_id}{"counter"}{$round_name}++;
					$results{$entry_id}{$round_name} .= " ";

					if ($results{$entry_id}{"counter"}{$round_name} > 7) {
						$results{$entry_id}{$round_name} .= "\\newline\n";
						undef $results{$entry_id}{"counter"}{$round_name};
						$results{$entry_id}{"divide"}{$round_name}++
					}
				}

				$round_type{"type"}{$round_name} = $round_type;

				$round_type{$round_name} = (
					length($results{$entry_id}{$round_name})/ $results{$entry_id}{"divide"}{$round_name})
					if $round_type{$round_name} <
					(length($results{$entry_id}{$round_name}) / $results{$entry_id}{"divide"}{$round_name});

				if ($pbye || $bbye) {
					$results{$entry_id}{$round_name} = "BYE";
				} elsif ($forfeit) {
					$results{$entry_id}{$round_name} = "FFT";
				} elsif (defined $winloss_value) {
					$results{$entry_id}{$round_name} .= "W" if $winloss_value == 1;
					$results{$entry_id}{$round_name} .= "L" if $winloss_value == 0;
				} elsif ($rank_value) {

					if (index($rank_value, "-") != -1) {
						my ($id, $val) = split(/-/, $rank_value);
						$rank_value = $val;
					}
					$results{$entry_id}{$round_name} .= $rank_value;
				}

				unless ($tourn_settings->{nsda_nats}) {
					if ($point_value) {

						if (index($point_value, " ") != -1) {
							my ($first, $second) = split(/\ /, $point_value);
							undef $point_value;
							my ($id, $val) = split(/-/, $first);
							$point_value = $val;
							($id, $val) = split(/-/, $second);
							$point_value .= ', '. $val;

						} elsif (index($point_value, "-") != -1) {

							my ($id, $val) = split(/-/, $point_value);
							$point_value = $val;
						}
						$results{$entry_id}{$round_name} .= "/".$point_value;
					}
				}

				$max_round = $round_name if $max_round < $round_name;
				$min_round = $round_name if not defined $min_round;
				$min_round = $round_name if $min_round > $round_name;

				$code_length = length($entry_code) if $code_length < length($entry_code);
				$name_length = length($entry_name) if $name_length < length($entry_name);
			}

			my $school_length = 20;

			if ($tourn_settings->{nsda_nats}) {
				$name_length -= 15;
				$school_length -= 7;
			} else {
				$code_length = $code_length * .8;
				$name_length = $name_length * .8;
			}

			print $texout "\\Large \\textsb{".$event->name."} \\hfill \\textsb{Scores} \n";
			print $texout "\\medskip\n";
			print $texout "\\newline\n";

			my $tabular =  "\\begin{tabular}{";
			$tabular .= "p{".($code_length )."ex}" if $show_codes;
			$tabular .= "p{".($name_length )."ex}";
			$tabular .= "p{".($school_length)."ex}";

			if ($tourn_settings->{ncfl}) {
				$tabular .= "p{1in}";
			} elsif ($tourn_settings->{nsda_nats}) {
				#states
				$tabular .= "p{.1in}";
			}

			my $factor = 1 if $event->type eq "debate";

			foreach my $round ($min_round .. $max_round) {

				if ($tourn_settings->{nsda_nats}) {

					if (
						$round_type{"type"}{$round} eq "prelim"
						|| $round_type{"type"}{$round} eq "highlow"
						|| $round_type{"type"}{$round} eq "highhigh"
					) {
						$tabular .= "p{".($round_type{$round} - 1)."ex}";
					} elsif ($round_type{$round})  {
						$tabular .= "p{".($round_type{$round} + 1)."ex}";
					} else {
						$tabular .= "p{1ex}";
					}

				} else {

					if (
						$round_type{"type"}{$round} eq "prelim"
						|| $round_type{"type"}{$round} eq "highlow"
						|| $round_type{"type"}{$round} eq "highhigh"
					) {
						$tabular .= "p{".($round_type{$round} + 4)."ex}";
					} elsif ($round_type{$round})  {
						$tabular .= "p{".($round_type{$round})."ex}";
					} else {
						$tabular .= "p{2ex}";
					}
				}
			}

			$tabular .= "}\n";

			print $texout "\\raggedright\n";
			print $texout "\\".$fontsize."\n";

			my $switch = 1;
			my $twostep;
			my $take_steps;

			if ($max_round < 4) {
				$take_steps++;
			}

			my @entries = keys %results;

			@entries = sort {$results{$a}{"entry_code"} <=> $results{$b}{"entry_code"}} @entries;

			if ($tourn_settings->{nsda_nats}) {
				@entries = sort {
					$results{$a}{"school_state"} cmp $results{$b}{"school_state"}
					|| $results{$a}{"school_name"} cmp $results{$b}{"school_name"}
					|| $results{$a}{"entry_name"} cmp $results{$b}{"entry_name"}
				} @entries;
			}

			foreach my $entry (@entries) {

				print $texout $tabular;
				print $texout "\\rowcolor[rgb]{.92,.92,.92}\[5.5pt\]\[5.5pt\]\n" if $switch % 2;
				print $texout "\\scriptsize ".Tab::texify($results{$entry}{"entry_code"})." & " if $show_codes;
				print $texout "\\scriptsize ".Tab::texify($results{$entry}{"entry_name"})." & ";
				print $texout "\\scriptsize ".Tab::texify($results{$entry}{"school_name"})." ";

				if ($tourn_settings->{ncfl}) {
					print $texout " & \\truncate{.95in}{".Tab::texify($results{$entry}{"region_name"})."} ";
				} elsif ($tourn_settings->{nsda_nats}) {
					print $texout " & \\scriptsize ".Tab::texify($results{$entry}{"school_state"});
				}

				foreach my $round_name ($min_round ..$max_round) {
					print $texout " & \\tiny \\tt ".$results{$entry}{$round_name};
				}
				print $texout "\\end{tabular}\n";

				if ($take_steps) {
					if ($twostep++ % 2) {
						$switch++;
						print $texout "\\newline\n";
					}
				} else {
					$switch++;
					print $texout "\\newline\n";
				}
			}
		}

		print $texout "\\newpage\n";
	}

	$dbh();

    $m->comp("/funclib/printout.mas",
        tourn     => $tourn,
        filename  => $filename,
		landscape => 1,
        tail      => 1
    );

</%init>

