<%args>
	$tourn
	$session
	$tourn_settings
	$event_id => undef
	$sort_by  => "audit"
	$mode     => "pdf"
	$texout   => undef
</%args>
<%init>

    my $dbh = Tab::DBI->db_Main();

    my $name;
    my $where;
	my $events;

	if ($ARGS{event_ref}) {

		push @{$events}, $ARGS{event_ref};

	} else {

		if ($event_id eq "all" || not defined $event_id) {
			$where = " where event.tourn = ".$tourn->id;
			$name = "AllEvents";
		} elsif ($event_id eq int($event_id)) {
			$where = " where event.id = ".int($event_id);
			$name = "Event";
		} else {
			$event_id =~ s/[\W_]//g;
			$where = " where event.type = '".$event_id."'";
			$name = ucfirst($event_id)."Events";
		}

		my $sth = $dbh->prepare("
			select
				event.id, event.name, event.type,
				code_style.value code_style,
				supp.value supp,
				result_description.value_text result_description,
				bowl_description.value_text bowl_description,
				final_bowl_protocol.value final_bowl_protocol,
				max_entry.value max_entry

			from (event)

				left join event_setting code_style
					on code_style.event = event.id
					and code_style.tag = 'code_style'

				left join event_setting supp
					on supp.event = event.id
					and supp.tag = 'supp'

				left join event_setting result_description
					on result_description.event = event.id
					and result_description.tag = 'result_description'

				left join event_setting bowl_description
					on bowl_description.event = event.id
					and bowl_description.tag = 'bowl_description'

				left join event_setting max_entry
					on max_entry.event = event.id
					and max_entry.tag = 'max_entry'

				left join event_setting final_bowl_protocol
					on final_bowl_protocol.event = event.id
					and final_bowl_protocol.tag = 'final_bowl_protocol'
			$where
				and event.type != 'congress'
			order by supp.value, event.type, event.name
		");

		$sth->execute();
		$events = $sth->fetchall_hash();

	}

    my $filename = "FinalResults-$name-".$session->id;
    my $filepath = $Tab::file_root."tmp/".$filename;

	if ($mode eq "csv") {
    	$filename = "FinalResults-$name.csv";
		$m->clear_buffer;
		$r->content_type('application/csv');
		$r->headers_out->{'Content-Disposition'} = "attachment; filename=$filename";

	} elsif ($texout) {

	} else {
		$m->comp("/funclib/printout.mas",
			tourn     => $tourn,
			filename  => $filename,
			head      => 1,
			array     => "1.8",
			landscape => 1,
		);
    	open ($texout, ">>$filepath.tex");
	}

	my $notfirst;

	foreach my $event (@{$events}) {

		if ($mode ne "csv") {
			if ($notfirst++) {
				print $texout "\\newpage\n";
			}
		}

		my $final = Tab::Round->search(
			event => $event->{id},
			type  => "final"
		)->first;

		my @elims = sort {$b->name <=> $a->name} Tab::Round->search(
			type => "elim",
			event => $event->{id}
		);

		my $last_elim = $elims[0] if @elims;
		my $min_round_name = $elims[-1]->name;
		my $final_number   = $final->name;
		my $max_round_name = $final_number - 1;

		my $supp;
		my $add_prelims;

		if ($event->{"supp"}) {

			$min_round_name = 5;
			my $round_sth = $dbh->prepare("
				select
					count(round.id)
				from round
				where round.event = ?
				and exists (
					select panel.id
					from panel where panel.round = round.id
				)
			");

			$round_sth->execute($event->{id});
			my $final_numbers = $round_sth->fetch();

			my $final_number = @{$final_numbers}[0];
			$max_round_name = $final_number - 1;
			$supp++;
			$add_prelims = "'prelim',";
		}

		my $bowl_protocol = eval {
			return Tab::Protocol->retrieve($event->{final_bowl_protocol});
		};

		my $dbh = Tab::DBI->db_Main();

		my $sth = $dbh->prepare("
			select entry.id,
				entry.code,
					GROUP_CONCAT(
						CONCAT(student.first,' ',student.last)
						SEPARATOR ' & '
					) as entryname,
				school.name, school.state, chapter.state,
				round.id, round.name,
				rank.tag, rank.value,
				winloss.tag, winloss.value,
				ballot.judge, ballot.speakerorder,
				panel.bye, ballot.bye, ballot.forfeit

			from (entry, round, panel, ballot, school, entry_student, student)

			left join chapter on school.chapter = chapter.id

			left join score rank on rank.tag = 'rank'
				and rank.ballot = ballot.id

			left join score winloss on winloss.tag = 'winloss'
				and winloss.ballot = ballot.id

			where entry.event = ?
				and entry.id = ballot.entry
				and ballot.panel = panel.id
				and panel.round = round.id
				and entry.school = school.id
				and round.type in ($add_prelims 'elim', 'final')

				and entry_student.entry = entry.id
				and entry_student.student = student.id

				and not exists (
					select dq.id
					from entry_setting dq
					where dq.entry = entry.id
					and dq.tag = 'dq'
				)

			group by ballot.id
			order by round.name, ballot.judge, ballot.speakerorder
		");

		my $duo++ if $event->{"max_entry"} > 1;
		$sth->execute($event->{id});

		my %entries;
		my %results;
		my $max_round;

		while (
			my (
				$entry_id, $entry_code, $entry_name,
				$school_name, $school_state, $chapter_state,
				$round_id, $round_name,
				$rank_tag, $rank_value,
				$winloss_tag, $winloss_value,
				$judge, $order,
				$pbye, $bbye, $fft
			) = $sth->fetchrow_array()
		) {

			if ($results{$entry_id}{$round_name} && $round_name == $final_number) {
				$results{$entry_id}{$round_name} .= " ";
			} else {
				$results{$entry_id}{$round_name} .= " \\hspace{.1mm}";
			}

			if ($pbye || $bbye) {
				$results{$entry_id}{$round_name} .= "BYE";
			} elsif ($fft) {
				$results{$entry_id}{$round_name} .= "FFT";
			} else {

				if ($winloss_tag) {
					if ($winloss_value == 1) {
						$results{$entry_id}{$round_name} .= "W";
					} elsif ($winloss_value == 0) {
						$results{$entry_id}{$round_name} .= "L";
					}
				}

				$results{$entry_id}{$round_name} .= $rank_value if $rank_tag;
			}

			if ($last_elim
				&& $round_id == $last_elim->id
				&& (not defined $results{$entry_id}{"semis"})
			) {
				$results{$entry_id}{"semis"}++;
				push @{$results{"semis"}}, $entry_id;
			}

			if ($final
				&& $round_id == $final->id
				&& (not defined $results{$entry_id}{"finals"})
			) {
				push @{$results{"finals"}}, $entry_id;
				$results{$entry_id}{"finals"}++;
			}

			$max_round = $round_name if $max_round < $round_name;

			$entries{$entry_id}{"code"}   = $entry_code;
			$entries{$entry_id}{"order"}  = $order;
			$entries{$entry_id}{"name"}   = $entry_name;
			$entries{$entry_id}{"state"}  = $school_state;
			unless ($entries{$entry_id}{"state"}) {
				$entries{$entry_id}{"state"}  = $chapter_state;
			}
			$entries{$entry_id}{"school"} = $school_name;
		}

		my @semis_results = $m->comp(
			"/tabbing/results/order_entries.mas",
			round => $last_elim
		) if $last_elim;

		my $semis_ref = pop @semis_results if @semis_results;

		my @semis_tiebreak_keys = sort {$a <=> $b} keys %{$semis_ref->{"tier_description"}};

		my $semis_count;

		if (${$semis_ref}{"by_place"}) {
			foreach my $key (sort {$a <=> $b} keys %{${$semis_ref}{"by_place"}}) {
				foreach my $entry_id (@{${${$semis_ref}{"by_place"}}{$key}}) {
					$entries{$entry_id}{"semis_place"} = $key;
					$semis_count++;
				}
			}
		}

		if ($semis_count < 14) {

			my $last_quarter = $elims[2] if @elims;

			my @quarters_results = $m->comp(
				"/tabbing/results/order_entries.mas",
				round => $last_quarter
			) if $last_quarter;

			my $quarters_ref = pop @quarters_results if @quarters_results;
			my @quarters_tiebreak_keys = sort {$a <=> $b} keys %{$quarters_ref->{"tier_description"}};

			my $quarters_count;

			if (${$quarters_ref}{"by_place"}) {
				foreach my $key (sort {$a <=> $b} keys %{${$quarters_ref}{"by_place"}}) {
					foreach my $entry_id (@{${${$quarters_ref}{"by_place"}}{$key}}) {
						next if $entries{$entry_id}{"semis_place"};
						$entries{$entry_id}{"semis_place"} = $key;
						push @{$results{"semis"}}, $entry_id;
						$semis_count++;
					}
					last if $semis_count >= 14;
				}
			}
		}

		my @finals_results = $m->comp(
			"/tabbing/results/order_entries.mas",
			round => $final
		) if $final;

		my $finals_ref = pop @finals_results if @finals_results;
		my @finals_tiebreak_keys = sort {$a <=> $b} keys %{$finals_ref->{"tier_description"}};

		if (${$finals_ref}{"by_place"}) {
			foreach my $key (sort {$a <=> $b} keys %{${$finals_ref}{"by_place"}}) {
				foreach my $entry_id (@{${${$finals_ref}{"by_place"}}{$key}}) {
					$entries{$entry_id}{"finals_place"} = $key;
				}
			}
		}

		my @bowl_results = $m->comp(
			"/tabbing/results/order_entries.mas",
			round        => $final,
			protocol => $bowl_protocol,
		) if $final && $bowl_protocol;

		my $bowl_ref = pop @bowl_results if @bowl_results;
		my @bowl_tiebreak_keys = sort {$a <=> $b} keys %{$bowl_ref->{"tier_description"}};

		my @bowl_winners;
		my %done;

		if (${$bowl_ref}{"by_place"}) {
			foreach my $key (sort {$a <=> $b} keys %{${$bowl_ref}{"by_place"}}) {
				foreach my $entry_id (@{${${$bowl_ref}{"by_place"}}{1}}) {
					next if $done{$entry_id}++;
					push @bowl_winners, $entry_id;
				}
			}
		}

		if ($mode eq "csv") {

		} else {
			print $texout "\\strut \\hfill \\huge \\textsb{".$event->{name}."} \\hfill \\strut";
			print $texout "\\medskip\n";
			print $texout "\\newline\n";

			print $texout "\\strut \\hfill \\Large ".$event->{"result_description"}." \\hfill \\strut";
			print $texout "\\medskip\n";
			print $texout "\\newline\n";

			print $texout "\\scriptsize\n";

			if ($duo) {
				print $texout "\\begin{tabular}{p{.25in}p{1.75in}p{1.25in}p{.3in}";
				foreach my $round ($min_round_name .. $max_round_name - 2) {
					print $texout "p{.5in}";
				}
				print $texout "p{.45in}p{.45in}p{.2in}p{.2in}p{.45in}}\n";

			} elsif ($supp) {
				print $texout "\\begin{tabular}{p{.5in}p{1.25in}p{1.5in}p{.3in}";
				foreach my $round ($min_round_name .. $max_round_name - 2) {
					print $texout "p{.7in}";
				}

				print $texout "p{.55in}p{.55in}p{.4in}p{.4in}p{.4in}p{.55in}}\n";
			} else {
				print $texout "\\begin{tabular}{p{.25in}p{1.25in}p{1.5in}p{.3in}";
				foreach my $round ($min_round_name .. $max_round_name - 2) {
					print $texout "p{.62in}";
				}
				print $texout "p{.45in}p{.45in}p{.2in}p{.2in}p{.45in}}\n";
			}

			print $texout "\\rowcolor[rgb]{1,.96,.66}\[5.5pt\]\[5.5pt\]\n";
			foreach my $header ("Code", "Name", "School", "State") {
				print $texout "\\textsb{".$header."} & ";
			}

			foreach my $round ($min_round_name .. $max_round_name) {
				print $texout "\\textsb{R".$round."} & ";
			}

			if ($supp) {
				print $texout "\\textsb{Elims} & \\textsb{Recip} & \\textsb{Semis} & \\textsb{Place} \\\\ \n";
			} else {
				print $texout "\\textsb{Elims} & \\textsb{Semis} & \\textsb{Place} \\\\ \n";
			}
		}

		my $switch;

		foreach my $entry_id (
			sort {$entries{$b}{"semis_place"} <=> $entries{$a}{"semis_place"}}
			@{$results{"semis"}}
		) {

			next if $entries{$entry_id}{"semis_place"} > 14;

			if ($mode eq "csv") {

				next if $entries{$entry_id}{"finals_place"};

				$m->print('"'.$entries{$entry_id}{"code"}.'",');
				$m->print('"'.$entries{$entry_id}{"name"}.'",');
				$m->print('"'.$entries{$entry_id}{"school"}.'",');
				$m->print('"'.$entries{$entry_id}{"state"}.'",');
				$m->print('"'.$entries{$entry_id}{"semis_place"}.'"');
				$m->print("\n");

			} else {

				print $texout "\\rowcolor[rgb]{.92,.92,.92}\[5.5pt\]\[5.5pt\]\n" if $switch++ % 2;

				print $texout Tab::texify($entries{$entry_id}{"code"});
				print $texout " & \\raggedright ";
				print $texout Tab::texify($entries{$entry_id}{"name"});
				print $texout " & \\raggedright ";
				print $texout Tab::texify($entries{$entry_id}{"school"});
				print $texout " & ";
				print $texout Tab::texify($entries{$entry_id}{"state"});
				print $texout " & ";

				foreach my $round ($min_round_name .. $max_round_name) {
					print $texout "\\footnotesize\n";
					print $texout $results{$entry_id}{$round}." & ";
				}

				print $texout "\\footnotesize\n";
				print $texout ${$semis_ref}{"tiebreak"}{1}{$entry_id}." & ";
				print $texout "\\footnotesize\n";
				print $texout ${$semis_ref}{"tiebreak"}{2}{$entry_id}." & ";
				print $texout "\\footnotesize\n";

				if ($supp) {
					print $texout ${$semis_ref}{"tiebreak"}{3}{$entry_id}." & ";
					print $texout "\\footnotesize\n";
				}

				unless ($results{$entry_id}{"finals"}) {
					print $texout "\\hfill \\textsb{".Tab::texify(Lingua::EN::Numbers::Ordinate::ordinate($entries{$entry_id}{"semis_place"}))."} \\hfill \\strut ";
				}
				print $texout "\\\\ \n";

			}
		}

		if ($mode eq "csv") {

		} else {
			print $texout "\\end{tabular}\n";
			print $texout "\\bigskip\n";
			print $texout "\\newline\n";
			print $texout "\\strut \\hfill \\Large Finalists \\hfill \\strut";
			print $texout "\\medskip\n";
			print $texout "\\newline\n";

			print $texout "\\footnotesize\n";

			if ($duo) {
				print $texout "\\begin{tabular}{p{.35in}p{.35in}p{1.75in}p{1.25in}p{.30in}p{1.75in}p{.45in}p{.55in}p{.35in}p{.3in}p{.35in}}\n";
			} elsif ($supp) {
				print $texout "\\begin{tabular}{p{.35in}p{.35in}p{1.25in}p{2in}p{.30in}p{1.2in}p{.40in}p{.40in}p{.3in}p{.3in}p{.3in}p{.35in}}\n";
			} else {
				print $texout "\\begin{tabular}{p{.35in}p{.35in}p{1.15in}p{1.7in}p{.30in}p{1.95in}p{.5in}p{.5in}p{.4in}p{.35in}p{.35in}}\n";
			}

			print $texout "\\rowcolor[rgb]{1,.96,.66}\[5.5pt\]\[5.5pt\]\n";

			foreach my $header ("Spoke", "Code", "Name", "School", "State") {
				print $texout "\\textsb{".$header."} & ";
			}

			print $texout "\\textsb{ Finals } & ";

			if ($supp) {
				print $texout "\\textsb{Finals} & \\textsb{Elims} & \\textsb{JP} & \\textsb{Total} & \\textsb{Place} \\\\ \n";
			} else {
				print $texout "\\textsb{All Finals} & \\textsb{Finals -H\/L} & \\textsb{Elims} & \\textsb{Total} & \\textsb{Place} \\\\ \n";
			}
		}

		my @results;

		if ($sort_by eq "audit") {
			@results = sort {
				$entries{$a}{"order"} <=> $entries{$b}{"order"}
			} @{$results{"finals"}};
		} else {
			@results = sort {
				$entries{$b}{"finals_place"} <=> $entries{$a}{"finals_place"}
			} @{$results{"finals"}};
		}

		foreach my $entry_id (@results) {

			if ($mode eq "csv") {
				$m->print('"'.$entries{$entry_id}{"code"}.'",');
				$m->print('"'.$entries{$entry_id}{"name"}.'",');
				$m->print('"'.$entries{$entry_id}{"school"}.'",');
				$m->print('"'.$entries{$entry_id}{"state"}.'",');
				$m->print('"'.$entries{$entry_id}{"finals_place"}.'"');
				$m->print("\n");
			} else {
				print $texout "\\rowcolor[rgb]{.92,.92,.92}\[5.5pt\]\[5.5pt\]\n" if $switch++ % 2;

				print $texout Tab::texify(Lingua::EN::Numbers::Ordinate::ordinate($entries{$entry_id}{"order"}));
				print $texout " & ";
				print $texout Tab::texify($entries{$entry_id}{"code"});
				print $texout " & \\raggedright ";
				print $texout Tab::texify($entries{$entry_id}{"name"});
				print $texout " & \\raggedright ";
				print $texout Tab::texify($entries{$entry_id}{"school"});
				print $texout " & ";
				print $texout Tab::texify($entries{$entry_id}{"state"});
				print $texout " & ";

				print $texout "\\footnotesize\n \\tt ";
				print $texout $results{$entry_id}{$final_number}." & ";

				if ($supp) {

					print $texout "\\footnotesize\n";
					print $texout ${$finals_ref}{"tiebreak"}{2}{$entry_id}." & ";
					print $texout "\\footnotesize\n";
					print $texout ${$semis_ref}{"tiebreak"}{1}{$entry_id}." & ";
					print $texout "\\footnotesize\n";
					print $texout ${$finals_ref}{"tiebreak"}{3}{$entry_id}." & ";
					print $texout "\\footnotesize\n";
					print $texout ${$finals_ref}{"tiebreak"}{1}{$entry_id}." & ";
					print $texout "\\footnotesize\n";

				} else {

					print $texout "\\footnotesize\n";
					print $texout ${$finals_ref}{"tiebreak"}{7}{$entry_id}." & ";
					print $texout "\\footnotesize\n";
					print $texout ${$finals_ref}{"tiebreak"}{2}{$entry_id}." & ";
					print $texout "\\footnotesize\n";
					print $texout ${$semis_ref}{"tiebreak"}{1}{$entry_id}." & ";
					print $texout "\\footnotesize\n";
					print $texout ${$finals_ref}{"tiebreak"}{1}{$entry_id}." & ";
					print $texout "\\footnotesize\n";
				}

				unless ($sort_by eq "audit") {
					print $texout "\\textsb{".Tab::texify(Lingua::EN::Numbers::Ordinate::ordinate($entries{$entry_id}{"finals_place"}))."}";
				}
				print $texout "\\\\ \n";
			}
		}

		if ($mode eq "csv") {
			$m->flush_buffer();
			$m->abort();
		}

		print $texout "\\end{tabular}\n";

		unless ($sort_by eq "audit" || $supp) {
			if (@bowl_winners) {

				print $texout "\\medskip\n";
				print $texout "\\newline\n";
				print $texout "\\strut \\hfill \\normalsize \\textsb{".$event->{"bowl_description"}." } ";

				my $notfirst;

				foreach my $entry_id (@bowl_winners) {

					if ($notfirst++) {
						print $texout "\\hfill\n";
						print $texout "\\strut\n";
						print $texout "\\newline\n";
						print $texout "\\strut\n";
						print $texout "\\hfill\n";
					}
					print $texout Tab::texify($entries{$entry_id}{"name"});
					print $texout ", ";
					print $texout Tab::texify($entries{$entry_id}{"school"});
					print $texout ", ";
					print $texout Tab::texify($entries{$entry_id}{"state"});
				}

				print $texout "\\hfill\n";
				print $texout "\\strut\n";
				print $texout "\\newline\n";
			}
		}
	}

	if ($ARGS{"texout"}) {
		print $texout "\\newpage\n";
	} else {
		$m->comp("/funclib/printout.mas",
			tourn     => $tourn,
			filename  => $filename,
			tail      => 1
		);
	}

</%init>
