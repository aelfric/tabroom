<%args>
	$tourn
	$session
	$school_id => undef
</%args>
<%init>

	my @schools;
	my @events;

	my $name = $tourn->name."SchoolReports" if $school_id eq "all";

	if ($school_id eq "all") {

		@schools =
			sort {$a->name cmp $b->name} $tourn->schools
			if $school_id eq "all";

		@events = $tourn->events;

	} elsif ($school_id) {

		my $school = Tab::School->retrieve($school_id)
			if $school_id && $school_id ne "all";

		unless ($school)  {
			$m->print("School does not exist");
			$m->abort;
		}

		push @schools, $school;

		Tab::Event->set_sql(by_school => "
			select distinct event.*
				from event,entry
			where event.id = entry.event
				and entry.school = ?
				and entry.unconfirmed = 0
			order by event.name
		");

		@events = Tab::Event->search_by_school($school->id);
    	$name = $school->name."-Report";

	} else {

		$m->redirect("index.mhtml?msg=No school selected");

	}

    $name =~ s/[\W_]//g;

	my %scores_by_entry = ();
	my %scores_by_student = ();
	my %entry_place = ();
	my %entry_results = ();
	my %entry_ballots = ();

	foreach my $event (@events) {

		my $event_type = $event->type;

		my @scores = $m->comp(
			"/funclib/event_scores.mas",
			event => $event
		);

		my $max_entries = $event->setting("max_entry");

		foreach my $score (@scores) {

			push @{$scores_by_entry{$score->entryid}}, $score if $score->entryid;

			push @{$scores_by_student{$score->student->id}}, $score
				if $score->tag eq "point" and $score->student;
		}

		my @rounds = sort {$b->name <=> $a->name}
			$m->comp("/funclib/event_rounds.mas",
				event => $event,
				done  => "yes"
			);

		my $final;
		my @elims;
		my $last_prelim;
		my @print_rounds;

		foreach my $round (@rounds) {

			next if $round->type eq "runoff";

			push (@print_rounds, $round) if $round->type eq "final";
			push (@print_rounds, $round) if $round->type eq "elim";
			push (@print_rounds, $round)
				if $round->type ne "elim"
				&& $round->type ne "final"
				&& not defined $last_prelim;
		}

		my %used;
		my $last_round;

		next unless @print_rounds;

		foreach my $round (@print_rounds) {

			my $type = $round->type;
			my $label = substr($round->label, 0, 3);

			my ($entries_ref, $tbs_ref, $desc_ref, $forfeit_ref)
				= $m->comp(
					"/tabbing/results/order_entries.mas",
					round => $round
				) ;

			foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {

				my $tie++ if scalar @{${$entries_ref}{$key}} > 1;

				foreach my $entry (@{${$entries_ref}{$key}}) {

					next if $used{$entry}++;

					$entry_place{$entry}  = Lingua::EN::Numbers::Ordinate::ordinate($key)
						if $type eq "final" || $event_type eq "wudc";

					$entry_place{$entry} .= "-T" if $tie && $type eq "final";
					$entry_place{$entry} .= $label if $type eq "elim";

				}
			}

			$last_round = $round unless $last_round;
			$last_round = $round if $round->name > $last_round->name;
		}

		my $points;
		my $ranks;
		my $wins;

		my %tb_done;

		foreach my $round (@print_rounds) {
			foreach my $tb ($round->protocol->tiebreaks) {

				next if $tb_done{$tb->id}++;

				$ranks++ if (
					$tb->name eq "ranks"
					|| $tb->name eq "reciprocals");

				$wins++ if (
					$tb->name eq "opp_wins" ||
					$tb->name eq "winloss" ||
					$tb->name eq "ballots"
				);

				$points++ if (
					$tb->name eq "points" ||
					$tb->name eq "competition" ||
					$tb->name eq "opp_points"
				);
			}
		}

		my $dbh = Tab::DBI->db_Main();

		my $sth = $dbh->prepare("
			select score.id, score.tag, score.value,
				ballot.entry, ballot.judge, ballot.bye, ballot.chair,
				round.name, round.type
			from score, ballot, panel, round
			where score.ballot = ballot.id
				and ballot.panel   = panel.id
				and panel.round    = round.id
				and round.name <= ?
				and round.event = ?
			order by round.name, ballot.entry, ballot.chair, ballot.judge, score.student,
				CASE score.tag
					WHEN 'winloss' then 1
					when 'rank' then 2
					when 'point' then 3
				end
		");

		$sth->execute( $last_round->name, $event->id);

		my %entry_round;

		my %rounds;
		my %round_last;
		my %round_last_type;

		while (
			my (
				$id, $tag, $score, $entryid, $judge, $bye, $chair, $roundname, $roundtype
			) = $sth->fetchrow_array()
		) {

			if (
				($round_last{$entryid} != $roundname)
				&& $roundtype ne "elim"
				&& $roundtype ne "final"
				&& $roundtype ne "runoff"
			) {
				$rounds{$entryid}++;
			}

			if ($event_type eq "debate" && $rounds{$entryid} == 4) {
				$entry_ballots{$entryid} .= "\n \\newline \n";
				undef $rounds{$entryid};
			}

			if (
				($roundtype eq "elim" || $roundtype eq "final" || $roundtype eq "runoff")
				&& ($round_last_type{$entryid} ne "elim"
				&& $round_last_type{$entryid} ne "final")
			) {
				$entry_ballots{$entryid} .= "\\ \\ ";
			} elsif ($round_last{$entryid} && $round_last{$entryid} != $roundname) {
				$entry_ballots{$entryid} .= "\\ \\ ";
			}

			$round_last_type{$entryid} = $roundtype;

			next if $tag ne "rank"
				&& $tag ne "point"
				&& $tag ne "winloss";

			next if $tag eq "rank" && not defined $ranks;
			next if $tag eq "point" && not defined $points;
			next if $tag eq "winloss" && not defined $wins;
			next if $tag eq "point" && $score == "-1";

			$entry_round{$entryid} = $roundname;

			if ($tag eq "winloss") {

				if ($bye) {
					$entry_ballots{$entryid} .= "BYE";
					$entry_ballots{$entryid} .= "\\ \\ \\ \\ ";

					if ($max_entries > 1) {
						$entry_ballots{$entryid} .= "\\ \\ \\ \\ \\ ";
						$entry_ballots{$entryid} .= "\\ \\ ";
					}

				} else {

					if ($entry_ballots{$entryid} && $round_last{$entryid} != $roundname) {
						$entry_ballots{$entryid} .= " ";
					}

					$entry_ballots{$entryid} .= "W" if $score > 0;
					$entry_ballots{$entryid} .= "L" if $score < 1;
				}

			} else {

				$entry_ballots{$entryid} .= " ".$score;

				if ($tag eq "point" && $event_type eq "speech"
					|| $event_type eq "congress"
					|| $event_type eq "wudc"
				) {
					foreach (length($score) .. 4) {
						$entry_ballots{$entryid} .= "\\ ";
					}
				} elsif ($tag eq "point") {
					foreach (length($score) .. 4) {
						$entry_ballots{$entryid} .= "\\ ";
					}
				}
			}

			$round_last{$entryid} = $roundname;

		}

	}

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
    my $now = DateTime->now;
    $now->set_time_zone($tourn->tz);
    my $filename = $name."-".$session->id;
    my $filepath = $Tab::file_root."tmp/".$filename;

    $m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		head     => 1
	);

    open (TEXOUT, ">>$filepath.tex");
	binmode(TEXOUT, ":utf8");

	my $switch;

	foreach my $school (@schools) {

		print TEXOUT "\\noindent\n";
		print TEXOUT "\\hfill {\\huge \\bf ". Tab::texify($tourn->name)." }\n";
		print TEXOUT "\\medskip\n";
		print TEXOUT "\\newline\n";
		print TEXOUT "\\strut \\hfill {\\Large \\textsb{ Results for ".Tab::texify($school->short_name)."}}\n" if $school;
		print TEXOUT "\\medskip\n";
		print TEXOUT "\\newline\n";

		my $tabular = "\\begin{tabular}{p{.5in}p{2.0in}p{.5in}p{3.5in}}\n";

		print TEXOUT $tabular;
		print TEXOUT "\\rowcolor[rgb]{1,.95,.66}\[5.5pt\]\[5.5pt\]\n";
		print TEXOUT "{\\bf Place } & {\\bf Name } & {\\bf Event } & {\\bf Ballots }\\\\ \n";
		print TEXOUT "\\end{tabular}\n";
		print TEXOUT "\\newline\n";

		foreach my $entry (sort {$a->code <=> $b->code} $school->entries(active => 1)) {

			my $name = $entry->name;
			$name =~ s/amp;//g;

			print TEXOUT $tabular;
			print TEXOUT "\\rowcolor[rgb]{.92,.92,.92}\[5.5pt\]\[5.5pt\]\n" if ($switch++ % 2);
			print TEXOUT Tab::texify($entry_place{$entry->id});
			print TEXOUT " & ". Tab::texify($name)." & ";
			print TEXOUT " ".Tab::texify($entry->event->abbr)." & ";
			print TEXOUT "\\texttt{".$entry_ballots{$entry->id}."}";
			print TEXOUT "\\\\ \n" ;
			print TEXOUT "\\end{tabular}\n" ;
			print TEXOUT "\\newline\n" ;

		}

		print TEXOUT "\\newpage\n";

	}

	close TEXOUT;

    $m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		tail     => 1
	);

</%init>

