<%args>
	$tourn
	$tourn_settings
	$session
	$perms
	$defaults    => undef
	$category_id => undef
	$timeslot_id => undef
	$event_id    => undef
	$round_id    => undef
	$no_points   => undef
	$sort_by     => undef
</%args>
<%init>

    my ($eventref, $catref) = $m->comp(
        "/funclib/allowed_events.mas",
        tourn => $tourn,
        perms => $perms
    );

    my %event_by_id = map {$_->id => $_} @{$eventref};
    my %cat_by_id = map {$_->id => $_} @{$catref};

	if ((not defined $category_id) && $defaults->{tourns}{$tourn}{category}) {
		$category_id = $defaults->{tourns}{$tourn}{category};
	}
	if ((not defined $event_id) && $defaults->{tourns}{$tourn}{event}) {
		$event_id = $defaults->{tourns}{$tourn}{event};
	}

	if ($category_id && (not defined $cat_by_id{$category_id})) {
		my $err = "You do not have access to that category";
		$m->redirect("/tabbing/entry/index.mhtml?err=$err");
	}

	if ($event_id && (not defined $event_by_id{$event_id})) {
		my $err = "You do not have access to that event";
		$m->redirect("/tabbing/entry/index.mhtml?err=$err");
	}

	my $limit;
	my $name = "AuditSheets-";

	if ($category_id && $category_id == int($category_id)) {
		$limit .= " and event.category = ".$category_id;
		$name .= "Cat".$category_id;
	}

	if ($event_id && $event_id == int($event_id)) {
		$limit .= " and event.id = ".$event_id;
		$name .= "Ev".$event_id;
	}
	if ($timeslot_id && $timeslot_id == int($timeslot_id)) {
		$limit .= " and round.timeslot = ".$timeslot_id;
		$name .= "Ts".$timeslot_id;
	}
	if ($round_id && $round_id == int($round_id)) {
		$limit .= " and round.id = ".$round_id;
		$name .= "Rd".$round_id;
	}

	unless ($limit) {
		my $err = "No audit limits sent, cannot print";
		$m->redirect("/tabbing/entry/index.mhtml?err=$err");
	}

	$name =~ s/[\W_]//g;
    my $filename = "BallotAudit-$name-".$session->id;
    my $filepath = $Tab::file_root."tmp/".$filename;

    $m->comp("/funclib/printout.mas",
		tourn     => $tourn,
		filename  => $filename,
		head      => 1,
		array     => 1.2
	);

	my $dbh = Tab::DBI->db_Main();

	my %rounds;

	my $sth = $dbh->prepare("

		select
			round.id, round.name, round.label,
			event.id, event.abbr, event.name, event.type,
			panel.id, panel.letter, room.name, panel.bye,
			judge.id, judge.code, judge.first, judge.last,
			entry.id, entry.code,
      entry.name,
			ballot.side, ballot.speakerorder, ballot.bye, ballot.forfeit,
			winloss.value,
			rank.value,
			point.value

		from (round, event, panel, judge, entry, ballot)

			left join score winloss
				on winloss.ballot = ballot.id
				and winloss.tag = 'winloss'

			left join score rank
				on rank.ballot = ballot.id
				and rank.tag = 'rank'

			left join score point
				on point.ballot = ballot.id
				and point.tag = 'point'

			left join room on panel.room = room.id

		where
			ballot.panel = panel.id
			and panel.round = round.id
			and round.event = event.id
			and ballot.judge = judge.id
			and ballot.entry = entry.id
			$limit
	");

	$sth->execute();

	while (
		my (
			$round_id, $round_name, $round_label,
			$event_id, $event_abbr, $event_name, $event_type,
			$panel_id, $panel_letter, $room_name, $panel_bye,
			$judge_id, $judge_code, $judge_first, $judge_last,
			$entry_id, $entry_code,
      $entry_name,
			$ballot_side, $order, $bye, $fft,
			$winloss_value,
			$rank_value,
			$points_value
		) = $sth->fetchrow_array()
	) {

		next unless $event_by_id{$event_id};

		if ($round_label) {
			$rounds{$round_id}{label} = $round_label;
		} else {
			$rounds{$round_id}{label} = "Round ".$round_name;
		}

		$rounds{$round_id}{name}       = $round_name;
		$rounds{$round_id}{event}      = $event_id;
		$rounds{$round_id}{event_abbr} = $event_abbr;
		$rounds{$round_id}{event_name} = $event_name;
		$rounds{$round_id}{event_type} = $event_type;

		$rounds{$round_id}{panels}{$panel_id}{letter}  = $panel_letter;
		$rounds{$round_id}{panels}{$panel_id}{room}    = $room_name;

		$rounds{$round_id}{panels}{$panel_id}{entries}{$entry_id}{"code"} = substr($entry_code, 0, 4);

		if ($panel_bye) {
			$rounds{$round_id}{panels}{$panel_id}{entries}{$entry_id}{"side"} = "B";
		} elsif ($bye) {
			$rounds{$round_id}{panels}{$panel_id}{entries}{$entry_id}{"side"} = "B";
		} elsif ($fft) {
			$rounds{$round_id}{panels}{$panel_id}{entries}{$entry_id}{"side"} = "F";
		} elsif ($ballot_side) {
			if ($ballot_side == 1) {
				$rounds{$round_id}{panels}{$panel_id}{entries}{$entry_id}{"side"} = "A";
			} else {
				$rounds{$round_id}{panels}{$panel_id}{entries}{$entry_id}{"side"} = "N";
			}
		} elsif ($order) {
			$rounds{$round_id}{panels}{$panel_id}{entries}{$entry_id}{"order"} = $order;
		}


		if ($judge_code) {
			$rounds{$round_id}{panels}{$panel_id}{judges}{$judge_id}{"code"} = $judge_code;
		} else {
			$rounds{$round_id}{panels}{$panel_id}{judges}{$judge_id}{"code"} = $judge_last.", ".$judge_first;
    	}

		if (defined $winloss_value) {
			if ($winloss_value == 1) {
				$rounds{$round_id}{panels}{$panel_id}{scores}{$judge_id}{$entry_id}{win} .= "W";
			} else {
				$rounds{$round_id}{panels}{$panel_id}{scores}{$judge_id}{$entry_id}{win} .= "L";
			}
		}

		if ($rank_value) {
			$rounds{$round_id}{panels}{$panel_id}{scores}{$judge_id}{$entry_id}{rank} .= ","
				if $rounds{$round_id}{panels}{$panel_id}{scores}{$judge_id}{$entry_id}{rank};
			$rounds{$round_id}{panels}{$panel_id}{scores}{$judge_id}{$entry_id}{rank} .= $rank_value;
		}

		unless ($ARGS{"no_points"}) {
			if ($points_value) {
				$rounds{$round_id}{panels}{$panel_id}{scores}{$judge_id}{$entry_id}{points} .= ","
					if $rounds{$round_id}{panels}{$panel_id}{scores}{$judge_id}{$entry_id}{points};
				$rounds{$round_id}{panels}{$panel_id}{scores}{$judge_id}{$entry_id}{points} .= $points_value;
			}
		}
	}

	my @rounds = sort {
		$rounds{$a}{event_abbr} cmp $rounds{$b}{event_abbr}
		|| $rounds{$a}{name} <=> $rounds{$b}{name}
	} keys %rounds;

    open (my $texout, ">>$filepath.tex");

	my $size = ".5in";

	my $psize = "1in";

	if ($tourn_settings->{nsda_nats}) {
		$size = ".25in";
		$psize = ".75in";
	}

  if ( $tourn_settings->{nsda_nats}
        && $rounds{$round_id}{"event_type"} eq "congress" ) {
    $size = ".5in";
    $psize = "1in";
  }


	foreach my $round_id (@rounds) {

		print $texout "\\noindent\n";
		print $texout "\\textsb{\\LARGE Audit Sheet } \n";
		print $texout "\\hfill\n";
		print $texout "\\textsb{\\LARGE ".Tab::texify($rounds{$round_id}{event_abbr})." } \n";
		print $texout "\\hfill\n";
		print $texout "\\textsb{\\LARGE ".Tab::texify($rounds{$round_id}{label})." } \n";
		print $texout "\\medskip\n";
		print $texout "\\newline\n";

		print $texout "\\footnotesize\n";
		print $texout "\\sloppy\n";

		foreach my $panel_id (
			sort {
				$rounds{$round_id}{panels}{$a}{letter} <=> $rounds{$round_id}{panels}{$b}{letter}
				|| $rounds{$round_id}{panels}{$a}{room} <=> $rounds{$round_id}{panels}{$b}{room}
			} keys %{$rounds{$round_id}{panels}}
		) {

			my $panel = $rounds{$round_id}{panels}{$panel_id};

			foreach my $judge_id (sort keys %{$panel->{judges}}) {

				my $judge = $panel->{judges}{$judge_id};

				print $texout "\\parbox[t][][t]{".$psize."}{\n";
				print $texout "\\begin{tabular}{p{.2in}p{".$size."}}\n";
				print $texout "\\textsb{ ".$panel->{letter}."} & \\truncate{.45in}{ ";
				print $texout Tab::texify($judge->{code});
				print $texout "} \\\\ \\hline \n";
				print $texout "\\end{tabular}\n";
				print $texout "\\newline\n";

				my $switch;

				my @entries = sort {
					$panel->{entries}{$a}{"side"} cmp $panel->{entries}{$b}{"side"}
				} keys %{$panel->{entries}};

				if ($rounds{$round_id}{"event_type"} eq "speech") {
					@entries = sort {
						$panel->{entries}{$a}{"order"} <=> $panel->{entries}{$b}{"order"}
					} @entries;
				}

				if ($sort_by eq "rank") {
					@entries = sort {
						$panel->{scores}{$judge_id}{$a}{rank} <=> $panel->{scores}{$judge_id}{$b}{rank}
					} @entries;
				}

				foreach my $entry_id (@entries) {

					my $entry = $panel->{entries}{$entry_id};

					print $texout "\\begin{tabular}{p{.3in}p{.15in}p{.15in}p{.15in}}\n";
					print $texout "\\rowcolor[rgb]{.90,.90,.90}\n" unless $switch++ % 2;
					print $texout Tab::texify($entry->{code});

					if ($panel->{scores}{$judge_id}{$entry_id}{win}) {
						print $texout " & ";
						print $texout $panel->{scores}{$judge_id}{$entry_id}{win};
					}

					if ($panel->{scores}{$judge_id}{$entry_id}{rank}) {
						print $texout " & ";
						print $texout $panel->{scores}{$judge_id}{$entry_id}{rank};
					}

					if ($panel->{scores}{$judge_id}{$entry_id}{points}) {
						print $texout " & ";
						print $texout $panel->{scores}{$judge_id}{$entry_id}{points};
					}

					print $texout "\\end{tabular}\n";
					print $texout "\\newline\n";
				}

				print $texout "}\n";
				print $texout "\\hspace{4mm}\n";
			}
		}

		print $texout "\\newpage\n";
	}

	close $texout;

    $m->comp("/funclib/printout.mas",
		tourn     => $tourn,
		filename  => $filename,
		landscape => 1,
		tail      => 1
	);

</%init>

