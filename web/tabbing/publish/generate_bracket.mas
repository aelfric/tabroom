<%args>
	$event
	$breakout => undef
	$label    => undef
</%args>
<%init>

	my $tourn = $event->tourn;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now(
		time_zone => $tz
	);

	my $bracket_label = "Bracket";
	$bracket_label = $label if $label;

	my $bracket = Tab::ResultSet->search(
		event   => $event->id,
		label   => $bracket_label,
		bracket => 1
	)->first;

	unless ($bracket) {
		$bracket = Tab::ResultSet->create({
			tourn     => $tourn->id,
			event     => $event->id,
			label     => $bracket_label,
			generated => $now,
			bracket   => 1
		});
	}

	my %keys = map {$_->tag => $_} $bracket->result_keys();

    Tab::ResultValue->set_sql( rm_bracket_rv => "
		delete result_value.*
			from result, result_value
			where result.id = result_value.result
			and result.result_set = ?
		");

	Tab::ResultValue->sql_rm_bracket_rv->execute($bracket->id);

    Tab::Result->set_sql(
		rm_bracket_r => "delete from result where result_set = ? "
	);

	Tab::Result->sql_rm_bracket_r->execute( $bracket->id );

	my $last_prelim;
	my @elims;
	my $final;

	foreach my $round ($event->rounds) {

		next if $round->type eq 'runoff';

		if ($round->type ne "elim" && $round->type ne "final") {
			if ($last_prelim) {
				$last_prelim = $round if $last_prelim->name < $round->name;
			} else {
				$last_prelim = $round;
			}
		} elsif ($breakout) {
			next if $round->setting("use_for_breakout") != $breakout;
		} else {
			next if $round->setting("use_for_breakout");
		}

		$final = $round if $round->type eq "final";
		push (@elims, $round) if $round->type eq "elim";
	}

	@elims = sort {$a->name <=> $b->name} @elims;

	my $first_elim = shift @elims;

	my ($entries_ref, $tbs_ref, $desc_ref, $forfeit_ref, $bah, $mah, $entry_letter_ref)
		= $m->comp(
			"/tabbing/results/order_entries.mas",
			round => $last_prelim
		);

	my @broke = $m->comp("/funclib/round_entries.mas", round => $first_elim);

	my %i_broke = map {$_->id => $_} @broke;
	my %last_seed;

	my $counter;

	foreach my $seed (sort {$a <=> $b} keys %{$entries_ref}) {

		foreach my $entryid (@{${$entries_ref}{$seed}}) {

			next unless $i_broke{$entryid};
			$counter++;

			my $result = Tab::Result->create({
				result_set => $bracket->id,
				entry      => $entryid,
				round      => $first_elim->id,
				rank       => $counter
			});

			$last_seed{$entryid} = $counter;
		}
	}

	ELIM:
	foreach my $elim (@elims, $final) {

		next unless $elim;

		my @broke = $m->comp("/funclib/round_entries.mas", round => $elim);

		my $break_numbers = scalar @broke;
		my $hinge_point = $break_numbers / 2;

		foreach my $broke (@broke) {

			my $seed = $last_seed{$broke->id};

			# If the worse seed won a debate they become the seed they beat
			$seed = ($break_numbers * 2 )- $seed + 1
				if $seed > $break_numbers;

			my $result = Tab::Result->create({
				result_set => $bracket->id,
				entry      => $broke->id,
				round      => $elim->id,
				rank       => $seed,
				place      => $seed
			});

			$last_seed{$broke->id} = $seed;
		}

		$final = $elim if (scalar @broke == 2) && not defined $final;
	}


	return $bracket;

</%init>
