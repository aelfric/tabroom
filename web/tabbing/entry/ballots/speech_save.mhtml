<%args>
	$person
	$panel_id => undef
	$judge_id => undef
</%args>
<%init>

    my $panel = Tab::Panel->retrieve($panel_id);
    my $judge = Tab::Judge->retrieve($judge_id);

	my $now = DateTime->now;

    unless ($panel && $judge) {
        my $err = "No ballots found for that judge and that panel.";
        $m->redirect("/tabbing/entry/index.mhtml?err=$err");
    }

	my $round = $panel->round;

    my @all_ballots = Tab::Ballot->search(
		judge => $judge->id,
		panel => $panel->id
	);

	my @scores = $m->comp(
		"/funclib/panel_scores.mas",
		panel => $panel,
		judge => $judge
	);

	my @ballots;

	BALLOT:
	foreach my $ballot (@all_ballots) {
		next unless $ballot->entry;
		if ($ballot->entry->dropped) {
			$ballot->audit(1);
			$ballot->update();
			next BALLOT;
		}
		push @ballots, $ballot;
	}

	my $event = $round->event;
    my $type = $event->type;

	my %event_settings = $event->all_settings();

	my $allow_lowpoints++ if $event_settings{"allow_lowpoints"};
    my $tiebreaks = $round->protocol;

	my $truncate_fill = $event_settings{"truncate_fill"};

	my %tb_types = $m->comp(
		"/funclib/tiebreak_types.mas",
		round => $round
	);

    my $tourn = $judge->category->tourn;

    my $forfeit++ if $tiebreaks->setting("forfeits_never_break");
    my $forfeit_last++ if $tiebreaks->setting("forfeits_rank_last");

    my $max_points = $event_settings{"max_points"};
    my $min_points = $event_settings{"min_points"};

	$min_points = 0 unless $min_points;
	$max_points = 100 unless $max_points;

    my $point_increments = $event_settings{"point_increments"};
    my $point_ties = $event_settings{"point_ties"};

	my %ballot_errs;
	my %scores = ();
	my %ballot_forfeit = ();

	if ($tb_types{"point"}) {

		my %points_taken;

		foreach my $ballot (@ballots) {

			my $points = $ARGS{$ballot->id."_points"};

			$ballot_errs{$ballot->id} .= "<p>Points missing</p>" if not defined $points || $ballot_forfeit{$ballot->id};
			next unless $points;

			$points = int($points + 0.5) if $point_increments eq "whole";

			if ($point_increments eq "tenths") {
				$points = $points * 10;
				$points = int($points + 0.5);
				$points = $points/10;
			}

			if ($point_increments eq "half" && $points > 0 && $points eq $points + 0) {
				$points = $points * 2;
				$points = int($points + 0.5);
				$points = $points/2;
			}

			$ballot_errs{$ballot->id} .= "<p>$points Points must be a number</p>"
				unless ($points eq $points + 0);

			$ballot_errs{$ballot->id} .= "<p>Tied points forbidden: you have two speakers with points $points </p>"
				if $points_taken{$points} && $point_ties < 1;

			$ballot_errs{$ballot->id} .= "<p>Points $points are outside of range</p>"
				if $points < $min_points || ($points > $max_points && $points != $truncate_fill);

			$points_taken{$points}++;
			$scores{$ballot->id."_points"} = $points;
		}
	}

	my %ballot_tv = ();

	if ($tb_types{"rank"}) {

		my %rank_taken;
		my %rank_points;

		my $sample_ballot;

		my $max_rank;

		foreach my $ballot (@ballots) {

			$sample_ballot = $ballot unless $ballot->entry->dropped;

			$ballot_forfeit{$ballot->id} = $ARGS{"forfeit_".$ballot->id};
			$ballot_tv{$ballot->id} = $ARGS{"tv_".$ballot->id};
			$ballot_tv{$ballot->id} = 0 unless defined $ARGS{"tv_".$ballot->id};

			my $rank = $ARGS{$ballot->id."_ranks"};
			$rank = $truncate_fill unless $rank;

			undef $ballot_errs{$ballot->id} if $ballot_forfeit{$ballot->id};
			$ballot_errs{$ballot->id} .= "<p>Rank missing</p>" unless $rank || $ballot_forfeit{$ballot->id};
			next unless $rank;

			$ballot_errs{$ballot->id} .= "<p>Rank must be a number</p>" unless ($rank eq $rank + 0);

			$ballot_errs{$ballot->id} .= "<p>You have repeated the rank $rank.  All ranks must be unique.</p>"
				if $rank_taken{$rank}
				&& (not defined $event_settings{"allow_rank_ties"})
				&& $rank != $truncate_fill;

			$ballot_errs{$ballot->id} .= "<p>Rank $rank is outside of range.</p>"
				if $rank < 1
				|| ($rank > scalar @ballots && $rank != $truncate_fill);

			$rank_taken{$rank}++;
			$scores{$ballot->id."_rank"} = $rank;

			$max_rank = $rank if $rank > $max_rank;

			if ($tb_types{"point"}) {
				$rank_points{$rank} = $ARGS{$ballot->id."_points"};
			}
		}

		if ($forfeit_last) {
			$max_rank++;
			foreach my $ballot (@ballots) {
				if ($ballot_forfeit{$ballot->id}) {
					$scores{$ballot->id."_rank"} = $max_rank;
					if ($tb_types{"point"}) {
						$ARGS{$ballot->id."_points"} = 0;
					}
				}
			}
		}

		my $current;

		unless ($allow_lowpoints) {

			foreach my $rk (reverse sort keys %rank_points) {

				$ballot_errs{$sample_ballot->id} .= "<p>Entry ranked $rk has lower points than a worse-ranked ballot (".$rank_points{$rk}." vs ".$current.")</p>"
				if $rank_points{$rk} < $current;

				$current = $rank_points{$rk};
			}
		}

	}

	$m->comp("/funclib/panel_dedupe.mas", panel => $panel);

	my $all_errs;

	foreach my $ballot (@ballots) {
		unless ($ballot->entry->dropped) {
			$all_errs .= $ballot_errs{$ballot->id};
		}
	}

	if ($all_errs) {
		$m->redirect("/tabbing/entry/index.mhtml?timeslot_id=".$round->timeslot->id."&judge_id=$judge_id&flight=".$panel->flight."&errs=$all_errs&err=Trouble in Paradise!");
	}

	my $ballot_err;

	my $audit_method = $event->category->setting("audit_method");
	$audit_method = "twice" unless $audit_method;

	my $audit = 0;
	$audit = 1 if $audit_method eq "none";

	my $shenanigan;

	if (@scores && $audit_method eq "twice") {

		my %ballot_rank;
		my %ballot_points;

		foreach my $bv (@scores) {
			$ballot_rank{$bv->ballot->id} = $bv->value
				if $bv->tag eq "rank";

			$ballot_points{$bv->ballot->id} = $bv->value
				if $bv->tag eq "point";
		}

		foreach my $ballot (@ballots) {
			$ballot_err = "Time violations differed for results"
				if $ballot->tv != $ballot_tv{$ballot->id};

			$ballot_err = "No-shows differed for results"
				if $ballot->forfeit != $ballot_forfeit{$ballot->id};
		}

		if ($tb_types{"rank"}) {
			foreach my $ballot (@ballots) {

				next if $ballot_rank{$ballot->id} == $scores{$ballot->id."_rank"};

				$ballot_err .= "Ranks for ".$ballot->entry->code." differed from first entry ";
				$ballot_err .= $scores{$ballot->id."_rank"}." vs ". $ballot_rank{$ballot->id} ."<br />";
			}
		}

		if ($tb_types{"point"}) {
			foreach my $ballot (@ballots) {
				next if $ballot_points{$ballot->id} == $scores{$ballot->id."_points"};
				$ballot_err .= "Points for ".$ballot->entry->code." differed from first entry ";
				$ballot_err .= $scores{$ballot->id."_points"}." vs ".$ballot_points{$ballot->id}." <br />";
			}
		}

		$audit = 2 unless ($ballot_err);

		if ($audit) {

			unless ($person->site_admin || $tourn->id == 9700) {
				foreach my $ballot (@ballots) {
					next unless $ballot->entered_by;
					next if $ballot->entered_by && $person->id != $ballot->entered_by->id;
					$ballot_err = "You did the first entry for that ballot, and thus are not permitted to do the second. <br/>";
					$shenanigan++;
				}
			}
		}

	}

	unless ($audit == 2) {

		#Clear the old cruft

		Tab::Score->set_sql( clear_cruft => "
			delete score.*
			from score, ballot
			where ballot.panel = ?
			and ballot.judge = ?
			and (
				score.tag = 'rank'
				or score.tag = 'point'
				or score.tag = 'winloss'
			)
			and ballot.id = score.ballot");

		Tab::Score->sql_clear_cruft->execute($panel->id, $judge->id);

	}

	unless ($shenanigan) {

		foreach my $ballot (@ballots) {

			$ballot->audit(0);

			if ($audit >= 1) {
				$ballot->audit(1);
				$ballot->audited_by($person->id);
			} else {
				$ballot->entered_by($person->id);
			}

			if ($ballot->entry->dropped) {
				$ballot->audit(1);
			}

			$ballot_forfeit{$ballot->id} = 0 unless defined $ballot_forfeit{$ballot->id};
			$ballot_tv{$ballot->id} = 0 unless defined $ballot_forfeit{$ballot->id};

			$ballot->tv($ballot_tv{$ballot->id});
			$ballot->forfeit($ballot_forfeit{$ballot->id});

			$ballot->update;

			unless ($audit == 2) {

				if ($tb_types{"point"} && defined ($scores{$ballot->id."_points"})) {

					eval {

						unless (
							Tab::Score->search(
								ballot => $ballot->id,
								tag    => "point"
							)
						) {

							Tab::Score->create({
								ballot   => $ballot->id,
								tag      => "point",
								value    => $scores{$ballot->id."_points"},
								student  => 0
							});
						}
					};

				}

				if ($tb_types{"rank"} && defined ($scores{$ballot->id."_rank"})) {

					eval {
						unless (Tab::Score->search(
								ballot => $ballot->id,
								tag    => "rank"
							)
						) {
							Tab::Score->create({
								ballot   => $ballot->id,
								tag      => "rank",
								value    => $scores{$ballot->id."_rank"},
								student  => 0
							});
						}
					};
				}
			}
		}
	}

	my $yellowmsg;
	my $greenmsg;
	my $err;

	if ($ballot_err) {
		$err = "Trouble in paradise!";
	} else {
		$yellowmsg = "Ballot first entry complete.  Ready for a doublecheck" unless $audit > 0;
		$greenmsg = "Ballot entry complete." if $audit > 0;
	}

	my $next_code = $ARGS{"next_code"};

	$m->comp("/funclib/round_done.mas", round => $round);

	$m->redirect("/tabbing/entry/index.mhtml?timeslot_id=".$round->timeslot->id."&judge_code=$next_code&greenmsg=$greenmsg&yellowmsg=$yellowmsg&err=$err&ballot_err=$ballot_err");


</%init>
