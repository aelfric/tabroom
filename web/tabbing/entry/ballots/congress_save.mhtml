<%args>
	$person
	$panel_id => undef
	$judge_id => undef
</%args>
<%init>

    my $panel = Tab::Panel->retrieve($panel_id);
    my $judge = Tab::Judge->retrieve($judge_id);

    unless ($panel && $judge) {
        my $err = "No ballots found for that judge and that panel.";
        $m->redirect("/tabbing/entry/index.mhtml?err=$err");
    }

    my $tourn = $judge->category->tourn;

	my $now = DateTime->now();
	my $round = $panel->round;
	my $event = $round->event;
	my %event_settings = $event->all_settings;

    my @all_ballots = Tab::Ballot->search(
		judge => $judge->id,
		panel => $panel->id
	);

	my @scores = $m->comp(
		"/funclib/panel_scores.mas",
			panel => $panel,
			judge => $judge
	);

	my @ballots;
	my $chair;

	foreach my $ballot (@all_ballots) {

		next unless $ballot->entry;
		next if $ballot->entry->dropped;
		$chair++ if $ballot->chair;
		push @ballots, $ballot;
	}

    my $type = $event->type;
    my $tiebreaks = $round->protocol;

	my $truncate_fill = $event_settings{"truncate_fill"};

	undef $truncate_fill
		if $event_settings{"parli_ballot"}
		&& $chair;

	my %tb_types = $m->comp(
		"/funclib/tiebreak_types.mas",
		round => $round
	);

    my $forfeit++ if $tiebreaks->setting("forfeits_never_break");

    my $max_points = $event_settings{"max_points"};
    my $min_points = $event_settings{"min_points"};
	$min_points = 0 unless $min_points;
	$max_points = 100 unless $max_points;

    my $point_increments = $event_settings{"point_increments"};
    my $point_ties = $event_settings{"point_ties"};

	my $errs;

	my %scores = ();
	my %ballot_forfeit = ();

	if ($tb_types{"point"}) {

		my %points_taken;

		foreach my $ballot (@ballots) {

			my $points = $ARGS{$ballot->id."_points"};

			$errs .= "<p>Points missing</p>"
				if not defined $points
				|| $ballot_forfeit{$ballot->id};

			next unless $points;

			$points = int($points + 0.5) if $point_increments eq "whole";

			if ($point_increments eq "tenths") {
				$points = $points * 10;
				$points = int($points + 0.5);
				$points = $points/10;
			}

			if ($point_increments eq "half" && $points > 0) {
				my $rounded_points;

				eval {
					$rounded_points = $points + .5;
					$rounded_points = $rounded_points - ($points % .5);
					$points = $rounded_points;
				};
			}

			$errs .= "<p>$points Points must be a number</p>" unless ($points eq $points + 0);

			$errs .= "<p>Tied points forbidden: you have two speakers with points $points </p>"
				if $points_taken{$points} && $point_ties < 1;

			$errs .= "<p>Points $points are outside of range</p>"
				if $points < $min_points || $points > $max_points;

			$points_taken{$points}++;
			$scores{$ballot->id."_points"} = $points;
		}
	}

	my %ballot_tv = ();

	if ($tb_types{"rank"}) {

		my %rank_taken;
		my %rank_points;

		foreach my $ballot (@ballots) {

			$ballot_forfeit{$ballot->id} = $ARGS{"forfeit_".$ballot->id};
			$ballot_forfeit{$ballot->id} = 0 unless $ballot_forfeit{$ballot->id};

			$ballot_tv{$ballot->id} = $ARGS{"tv_".$ballot->id};
			$ballot_tv{$ballot->id} = 0 unless $ballot_tv{$ballot->id};

			my $rank = $ARGS{$ballot->id."_ranks"};

			$rank = $truncate_fill if ($truncate_fill && ($rank < 1));

			$rank = int($rank);

			undef $errs if $ballot_forfeit{$ballot->id};

			$errs .= "<span class='quarter'>Rank missing for ".$ballot->entry->code."</span>"
				unless $rank
				|| $ballot_forfeit{$ballot->id};

			next unless $rank;

			$errs .= "<p>Rank ".$rank." for ".$ballot->entry->code."  must be a number</p>"
				unless ($rank eq $rank + 0);

			$errs .= "<span class='full centeralign'>You have repeated the rank $rank.  All ranks must be unique.</span>"
				if $rank_taken{$rank}
				&& (not defined $event_settings{"allow_rank_ties"})
				&& $rank
				&& ($rank != $truncate_fill);

			$errs .= "<span class='half centeralign'>Rank $rank is outside of range.</span>"
				if $rank < 1 || $rank > scalar @ballots;

			$rank_taken{$rank}++;
			$scores{$ballot->id."_rank"} = $rank;

			if ($tb_types{"point"}) {
				$rank_points{$rank} = $ARGS{$ballot->id."_points"};
			}

		}

		my $current;

		foreach my $rk (reverse sort keys %rank_points) {
			$errs .= "<p>Entry ranked $rk has lower points than a worse-ranked ballot (".$rank_points{$rk}." vs ".$current.")</p>"
				if $rank_points{$rk} < $current;

			$current = $rank_points{$rk};
		}
	}


	if ($errs) {

		$m->redirect("/tabbing/entry/index.mhtml?timeslot_id=".$round->timeslot->id."&judge_id=$judge_id&flight=".$panel->flight."&errs=$errs&err=Trouble in Paradise!");

	} else {

		my $ballot_err;

		my $audit_method = $event->category->setting("audit_method");
		$audit_method = "twice" unless $audit_method;

		my $audited;

		if (@scores && $audit_method eq "twice") {

			my %ballot_rank;

			my %ballot_points;

			foreach my $bv (@scores) {
				$ballot_rank{$bv->ballot->id} = $bv->value
					if $bv->tag eq "rank";
				$ballot_points{$bv->ballot->id} = $bv->value
					if $bv->tag eq "point";
			}

			foreach my $ballot (@ballots) {
				$ballot_err = "Time violations differed for results" if $ballot->tv != $ballot_tv{$ballot->id};
				$ballot_err = "No-shows differed for results" if $ballot->forfeit != $ballot_forfeit{$ballot->id};
			}

			if ($tb_types{"rank"}) {
				foreach my $ballot (@ballots) {
					next if $ballot_rank{$ballot->id} == $scores{$ballot->id."_rank"};
					$ballot_err .= "Ranks for ".$ballot->entry->code." differed from first entry";
					$ballot_err .= $scores{$ballot->id."_rank"}." vs ". $ballot_rank{$ballot->id} ."<br />";
				}
			}

			if ($tb_types{"point"}) {
				foreach my $ballot (@ballots) {
					next if $ballot_points{$ballot->id} == $scores{$ballot->id."_points"};
					$ballot_err .= "Points for ".$ballot->entry->code." differed from first entry ";
					$ballot_err .= $scores{$ballot->id."_points"}." vs ".$ballot_points{$ballot->id}." <br />";
				}
			}

			unless ($ballot_err || $person->site_admin) {
				foreach my $ballot (@ballots) {
					next if $ballot->entered_by && $person->id != $ballot->entered_by->id;
					$ballot_err .= "You did the first entry for that ballot, and thus are not permitted to do the second. <br/>";
				}
			}

			$audited++ unless $ballot_err;

		}

		unless ($audited) {

			#Clear the old cruft

			Tab::Score->set_sql( clear_cruft => "
				delete score.*
				from score, ballot
				where ballot.panel = ?
				and ballot.judge = ?
				and (
					score.tag = 'rank'
					or score.tag = 'point'
					or score.tag = 'winloss'
				)
				and ballot.id = score.ballot");

			Tab::Score->sql_clear_cruft->execute($panel->id, $judge->id);

		}

		foreach my $ballot (@ballots) {

			$ballot->audit(0);

			if ($audited || $audit_method eq "none") {
				$ballot->audit(1);
			}

			$ballot->entered_by($person->id);
			$ballot->tv($ballot_tv{$ballot->id});
			$ballot->forfeit($ballot_forfeit{$ballot->id});
			$ballot->update;

			if ($tb_types{"best_po"}) {

				if ($ARGS{"best_po"} == $ballot->id) {
					Tab::Score->create({
						ballot  => $ballot->id,
						tag     => "best_po",
						value   => 1,
						student => 0
					});
				}
			}

			unless ($audited) {

				if ($tb_types{"point"}) {

					my $value = $scores{$ballot->id."_points"};
					$value = 0 unless $value;

					eval {
						Tab::Score->create({
							ballot  => $ballot->id,
							tag     => "point",
							value   => $value,
							student => 0
						});
					};
				}

				if ($tb_types{"rank"}) {

					eval {
						Tab::Score->create({
							ballot  => $ballot->id,
							tag     => "rank",
							value   => $scores{$ballot->id."_rank"},
							student => 0
						});
					};
				}
			}
		}

		my $yellowmsg;
		my $greenmsg;
		my $err;

		if ($ballot_err) {
			$err = "Trouble in paradise!";
		} else {

			if ($audited || $audit_method eq "none") {
				$greenmsg = "Ballot entry complete.";
			} else {
				$yellowmsg = "Ballot first entry complete.  Ready for a doublecheck";
			}

		}

		my $next_code = $ARGS{"next_code"};

		$m->comp("/funclib/round_done.mas", round => $round);

		$m->redirect("/tabbing/entry/index.mhtml?timeslot_id=".$round->timeslot->id."&judge_code=$next_code&greenmsg=$greenmsg&yellowmsg=$yellowmsg&err=$err&ballot_err=$ballot_err");

	}

</%init>
