<%args>
	$entry_id
</%args>
<%init>

	my $entry = Tab::Entry->retrieve($entry_id);
	my $event = $entry->event;

	my @students = $entry->students;

    Tab::Student->set_sql(by_entry => "
        select distinct student.*
        from student, score, ballot
        where ballot.id = score.ballot
        and score.student = student.id
        and ballot.entry = ?
    ");

    push @students, Tab::Student->search_by_entry($entry->id) if $entry;

    my %seen = ();
    @students = grep { ! $seen{$_->id} ++ } @students;


	foreach my $panel ($m->comp("/funclib/entry_panels.mas", entry => $entry)) {

		my $protocol = $panel->round->protocol;

		my %tb_types = $m->comp(
			"/funclib/tiebreak_types.mas",
			round => $panel->round
		);

		my $forfeit = $protocol->setting("forfeits_never_break");

		foreach my $judge (
			$m->comp("/funclib/panel_judges.mas", panel => $panel), 0
		) {

			my $ballot = Tab::Ballot->search(
				judge => $judge,
				panel => $panel->id,
				entry => $entry->id
			)->first;

			next unless $ballot;
			next if $event->type eq "wudc" &! $ballot->chair;

			my @scores = $ballot->scores;

			my %seen = ();
			@scores = grep { ! $seen{$_->id} ++ } @scores;

			$ballot->tv($ARGS{"tv_".$ballot->id});
			$ballot->bye($ARGS{"bye_".$ballot->id});

			my $forfeit = $ARGS{"forfeit_".$ballot->id};
			$forfeit = 0 if $ballot->bye;
			$ballot->forfeit($forfeit);

			if ($event->type eq "congress") {
				my $chair = $ARGS{"chair_".$ballot->id};
				$chair = 0 if $ballot->bye;
				$ballot->chair($chair);
			}

			my $audit = $ARGS{"audit_".$ballot->id};
			$audit = 0 unless $audit;
			$ballot->audit($audit);
			$ballot->update;

			if ($tb_types{"winloss"}) {

				my $win_score;
				foreach my $score (@scores) {
					$win_score = $score
						if $score->tag eq "winloss"
						&& not defined $win_score;
				}

				my $won = 0;
				$won++ if $ARGS{"winner_".$ballot->id};

				if ($win_score) {
					$win_score->value($won);
					$win_score->update;
				} else {
					Tab::Score->create({
						ballot => $ballot->id,
						tag    => "winloss",
						value  => $won
					});
				}
			}

			if ($event->type eq "speech" || $event->type eq "congress") {

				if ($tb_types{"point"}) {

					if (length $ARGS{"point_".$ballot->id}) {
						my $point_score;

						foreach my $score (@scores) {
							$point_score = $score
								if $score->tag eq "point"
								&& not defined $point_score;
						}

						if ($point_score) {
							$point_score->value($ARGS{"point_".$ballot->id});
							$point_score->update;
						} else {

							Tab::Score->create({
								ballot => $ballot->id,
								tag    => "point",
								value  => $ARGS{"point_".$ballot->id},
							});
						}

					} elsif ($ballot->bye == 1 || $ballot->forfeit == 1) {

						foreach my $score (@scores) {
							next unless $score && $score->tag eq "point";
							$score->delete;
							undef $score;
						}

					}
				}
			}

			if ($event->type eq "speech"
				|| $event->type eq "congress"
				|| $event->type eq "wudc"
			) {

				if ($tb_types{"rank"}) {

					if (length $ARGS{"ranks_".$ballot->id}) {

						my $ranks_score;

						foreach my $score (@scores) {
							$ranks_score = $score
								if $score->tag eq "rank"
								&& not defined $ranks_score;
						}

						if ($ranks_score) {
							$ranks_score->value($ARGS{"ranks_".$ballot->id});
							$ranks_score->update;
						} else {

							Tab::Score->create({
								ballot => $ballot->id,
								tag    => "rank",
								value  => $ARGS{"ranks_".$ballot->id},
							});
						}

					} elsif ($ballot->bye == 1 || $ballot->forfeit == 1) {
						foreach my $score (@scores) {
							next unless $score &&  $score->tag eq "rank";
							$score->delete;
							undef $score;
						}
					}
				}
			}

			unless ($event->type eq "speech" || $event->type eq "congress") {

				foreach my $student (@students) {

					if ($tb_types{"point"}) {

						if (length $ARGS{"point_".$ballot->id."-".$student->id}) {

							my $point_score;

							foreach my $score (@scores) {

								next unless $score;

								$point_score = $score
									if $score->tag eq "point"
									&& $score->student
									&& $score->student->id == $student->id
									&& (not defined $point_score);
							}

							if ($point_score) {
								$point_score->value($ARGS{"point_".$ballot->id."-".$student->id});
								$point_score->update;
							} else {

								Tab::Score->create({
									ballot  => $ballot->id,
									tag     => "point",
									student => $student->id,
									value   => $ARGS{"point_".$ballot->id."-".$student->id},
								});
							}

						} elsif ($ballot->bye == 1 || $ballot->forfeit == 1) {

							foreach my $score (@scores) {
								next unless $score && $score->tag eq "point";
								$score->delete;
								undef $score;
							}

						} else {

							foreach my $score (@scores) {
								next unless $score && $score->tag eq "point";
								next unless $score->student->id == $student->id;
								$score->delete;
								undef $score;
							}

						}
					}
				}
			}

			unless ($event->type eq "speech" || $event->type eq "congress" || $event->type eq "wudc") {

				if ($tb_types{"rank"}) {

					foreach my $student (@students) {

						if (length $ARGS{"ranks_".$ballot->id."-".$student->id}) {

							my $ranks_score;

							foreach my $score (@scores) {

								next unless $score;
								$ranks_score = $score
									if $score->tag eq "rank"
									&& (not defined $ranks_score)
									&& $score->student
									&& $score->student->id == $student->id;
							}

							if ($ranks_score) {
								$ranks_score->value($ARGS{"ranks_".$ballot->id."-".$student->id});
								$ranks_score->update;

							} else {

								Tab::Score->create({
									ballot  => $ballot->id,
									tag     => "rank",
									student => $student->id,
									value   => $ARGS{"ranks_".$ballot->id."-".$student->id},
								});
							}

						} elsif ($ballot->bye == 1 || $ballot->forfeit == 1) {

							foreach my $score (@scores) {
								next unless $score && $score->tag eq "rank";
								$score->delete;
							}
						} else {
							foreach my $score (@scores) {
								next unless $score && $score->tag eq "rank";
								next unless $score->student->id == $student->id;
								$score->delete;
								undef $score;
							}
						}
					}
				}
			}
		}
	}

	$m->redirect("card.mhtml?entry_id=".$entry_id);

</%init>


