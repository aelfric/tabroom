<%args>
	$tourn
	$school   => undef
	$limit    => undef
</%args>
<%init>

	my @types = ("supp", "stefan");

	my @entry_settings = (
		"rejected_by", "rejected_at", "accepted_by", "accepted_at", "coach_points", "coach_script",
		"script_file",
		"title", "author", "publisher", "publish_date", "publish_isbn",
		"publish_print_date", "publish_url",
		"online_hybrid"
	);

	my %students;

	my $search_id;

	my $status_limit;

	if ($limit eq "unconfirmed") {
		$status_limit = " and entry.unconfirmed = 1 ";
	} elsif ($limit eq "all") {
		undef $status_limit;
	} else {
		$status_limit = " and entry.unconfirmed = 0 ";
	}

	if ($school) {

		Tab::Student->set_sql( at_nationals => "
			select distinct student.*
				from (student, entry_student, entry, event)
			where student.chapter = ?
				and student.id = entry_student.student
				and entry_student.entry = entry.id
				and entry.event = event.id
				and entry.dropped = 0
				$status_limit
			and event.tourn = ?
		");

		$search_id = $school->chapter->id;
	}

	return unless $search_id;

	foreach my $student (
		Tab::Student->search_at_nationals(
			$search_id,
			$tourn->id
		)
	) {
		$students{$student->id}{'object'} = $student;
	}

	my $eventtype_stanzas;
	my $eventtype_result;

	foreach my $type (@types) {

		Tab::Entry->columns( TEMP => $type);

		$eventtype_stanzas .= "
			left join event_setting $type
			on $type.event = entry.event
			and $type.tag = '$type'
		";

		$eventtype_result .= ", " if $eventtype_result;
		$eventtype_result .= "$type.value  $type";

	}

	my $entrysetting_result;
	my $entrysetting_stanzas;

	foreach my $es (@entry_settings) {

		Tab::Entry->columns( TEMP => $es);

		$entrysetting_stanzas .= "
			left join entry_setting $es
			on $es.entry = entry.id
			and $es.tag = '$es'
		";

		$entrysetting_result .= ", " if $entrysetting_result;

		if ($es eq "rejected_at") {
			$entrysetting_result .= "$es.value_date  $es";
		} else {
			$entrysetting_result .= "$es.value  $es";
		}
	}

	Tab::Entry->columns(TEMP => "studentids");
	Tab::Entry->columns(TEMP => "eventabbr");
	Tab::Entry->columns(TEMP => "eventtype");
	Tab::Entry->columns(TEMP => "reveal_codes");
	Tab::Entry->columns(TEMP => "usa_wsdc");

	if ($school) {

		Tab::Entry->set_sql( nationals => "

			select entry.*,
				entry.event eventid,
				GROUP_CONCAT(distinct student.id SEPARATOR ',') studentids,
				reveal_codes.value as reveal_codes,
				usa_wsdc.value as usa_wsdc,
				event.abbr as eventabbr,
				event.type as eventtype,
				$eventtype_result,
				$entrysetting_result

			from (entry, event, entry_student, student)

				left join event_setting reveal_codes
					on reveal_codes.event = event.id
					and reveal_codes.tag = 'reveal_codes'

				left join event_setting usa_wsdc
					on usa_wsdc.event = event.id
					and usa_wsdc.tag = 'usa_wsdc'

				$eventtype_stanzas
				$entrysetting_stanzas

			where student.chapter = ?
				and student.id = entry_student.student
				and entry_student.entry = entry.id
				and entry.event = event.id
				and event.tourn = ?
				and entry.dropped = 0
				$status_limit
			group by entry.id

		");
	}

	foreach my $entry (
		Tab::Entry->search_nationals(
			$search_id,
			$tourn->id
		)
	) {

		my $event_type;

		foreach my $type (@types) {
			$event_type = $type if $entry->$type;
		}

		$event_type = "main" unless $event_type;

		foreach my $student_id (split(/\,/, $entry->studentids)) {

			push @{$students{$student_id}{$event_type}}, $entry;

			if ($event_type eq "main") {
				$students{$student_id}{"main_id"} = $entry->id;
				$students{$student_id}{"main_event"} = $entry->eventid;
			}
		}
	}

	return %students;

</%init>

