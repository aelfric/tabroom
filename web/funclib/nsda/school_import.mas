<%args>
	$nsda_school_id => undef
	$chapter        => undef
</%args>
<%init>

	use Data::Dumper;

	unless ($chapter) {

		return "No ID number sent" unless $nsda_school_id;
		return "ID number is not a valid NSDA school" unless $nsda_school_id > 10000;

		# Check if there's already a school by that ID
		my $already = Tab::Chapter->search(
			nsda => $nsda_school_id
		)->first;

		if ($already) {
			return "NSDA Member $nsda_school_id is already in Tabroom.";
		}

	} elsif (not defined $nsda_school_id) {

		$nsda_school_id = $chapter->nsda;

		if (not defined $nsda_school_id) {
			return "Chapter does not have an NSDA member number and none was provided";
		}

	} else {

	}

	my ($jsonref, $raw) = $m->comp(
		"api_client.mas",
		path => "/schools/".$nsda_school_id
	);

	my $school_address;

	if ($jsonref) {

		unless ($chapter) {

			my $already = Tab::Chapter->search(
				name  => $jsonref->{"official_name"},
				state => $jsonref->{"state"}
			)->first;

			if ($already && $nsda_school_id) {
				$already->nsda($nsda_school_id);
				$already->update();
			}

			if ($already) {
				return "NSDA Member ".$jsonref->{"official_name"}." already exists in ".$jsonref->{"state"}." with id ".$already->id;
			}
		}

		my @addresses = eval {
			return @{$jsonref->{"addresses"}};
		};

		if (@addresses) {

			foreach my $address (@addresses) {

				if ($address->{"primary"}) {
					$school_address = $address
				}

				last if $school_address;
			}
		}

		my $coach_names;
		my %already;

		unless ($chapter) {

			$chapter = Tab::Chapter->create({
				name    => $jsonref->{"official_name"},
			});

			my ($roles_ref, $roles_raw) = $m->comp("api_client.mas",
				path => "/schools/$nsda_school_id/members?current=true&confirmed=true"
			);

			# Import the coaches as admins
			# Import the coaches as judges
			# Import the student roster

			my $dbh = Tab::DBI->db_Main();
			my $sth = $dbh->prepare("
				insert into student_setting (student, tag, value) values (?, ?, ?);
			");

			my $sth_date = $dbh->prepare("
				insert into student_setting (student, tag, value, value_date) values (?, ?, 'date', ?);
			");

			foreach my $role (@{$roles_ref}) {

				my $person;

				if ($role->{email}) {
					$person = Tab::Person->search( email => $role->{email})->first;
				}

				$person = 0 unless $person;

				if ($role->{role} eq "Student") {

					my $student = Tab::Student->create({
						chapter   => $chapter->id,
						first     => $role->{'first'},
						middle    => $role->{'middle'},
						last      => $role->{'last'},
						gender    => $role->{'gender'},
						grad_year => $role->{'grad_year'},
						nsda      => $role->{"person_id"},
						person    => $person
					});

					$sth->execute($student->id, "nsda_paid", "1") if $role->{paid};
					$sth->execute($student->id, "nsda_points", $role->{points}) if $role->{points};
					$sth->execute($student->id, "districts_eligible", $role->{districts_eligible});
					$sth->finish();

				} elsif ($role->{role} eq "Coach" || $role->{"role"} eq "Advisor") {

					unless ($already{$role->{"first"}." ".$role->{"last"}}++) {
						if ($coach_names) {
							$coach_names .= ", ";
						}

						$coach_names .= $role->{"first"}." ".$role->{"last"};
					}

					my $chapter_judge = Tab::ChapterJudge->create({
						chapter   => $chapter->id,
						first     => $role->{'first'},
						middle    => $role->{'middle'},
						last      => $role->{'last'},
						phone     => $role->{'phone'},
						email     => $role->{'email'},
						person    => $person
					});

				}

				if ($role->{role} eq "Advisor") {

					unless ($already{$role->{"first"}." ".$role->{"last"}}++) {
						if ($coach_names) {
							$coach_names = $role->{first}." ".$role->{last}.", ".$coach_names;
						} else {
							$coach_names = $role->{"first"}." ".$role->{"last"};
						}
					}

					unless ($person) {
						$person = $m->comp("user_import.mas", nsda_id => $role->{person_id});
					}

					if ($person) {

						Tab::Permission->create({
							person  => $person->id,
							chapter => $chapter->id,
							tag     => "chapter"
						});
					}

					$person = 0 unless $person;

					my $chapter_judge = Tab::ChapterJudge->create({
						chapter   => $chapter->id,
						first     => $role->{'first'},
						middle    => $role->{'middle'},
						last      => $role->{'last'},
						phone     => $role->{'phone'},
						email     => $role->{'email'},
						person    => $person
					});

				}
			}
		}

		$school_address->{zip} = substr($school_address->{zip}, 0, 5);

		$chapter->state($jsonref->{"state"});
		$chapter->country($jsonref->{"country"});
		$chapter->district($jsonref->{"district_id"});
		$chapter->nsda($jsonref->{"school_id"});

		$chapter->setting("nces", $jsonref->{"nces_id"});
		$chapter->setting('coaches', $coach_names);

		my $level = "highschool";
		$level = "middle" if $jsonref->{"realm"} eq "ms";

		$chapter->level($level);

		if ($school_address) {

			$chapter->street($school_address->{street});
			$chapter->city($school_address->{city});

			if ($school_address->{country} eq "US") {
				$chapter->zip($school_address->{zip});
			} else {
				$chapter->postal($school_address->{postal});
			}
		}

		$chapter->update();

		if ($level eq "highschool") {

            unless (Tab::ChapterCircuit->search(
                chapter     => $chapter->id,
                circuit     => 6,
            	)
			) {

				Tab::ChapterCircuit->create({
					chapter     => $chapter->id,
					circuit     => 6,
					full_member => 1
				});
			}

            unless (Tab::ChapterCircuit->search(
                chapter     => $chapter->id,
                circuit     => 83,
            	)
			) {

				eval {
					Tab::ChapterCircuit->create({
						chapter     => $chapter->id,
						circuit     => 83,
						full_member => 1
					});
				};
			}

        } elsif ($level eq "middle") {

			eval {
				Tab::ChapterCircuit->create({
					chapter     => $chapter->id,
					circuit     => 25,
					full_member => 1
				});
			};
		}
	}

	return $chapter;

	$jsonref->{district_name} =~ s/\([^)]+\)//g;

</%init>
