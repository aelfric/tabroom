<%args>
	$school
	$category
	$category_settings
	$tourn_settings => undef
	$debug          => 0
	$waitlist       => undef
	$confirmed      => undef
	$bulk           => undef
	$hires          => undef
	$judges         => undef
	$shifts         => undef
</%args>
<%init>

	use POSIX;

	# Find out how many judges we're obligated for.
	%{$tourn_settings} = $school->tourn->all_settings() unless $tourn_settings;

	my @shifts = eval {
		return @{$shifts};
	};

	@shifts = $category->shifts() unless @shifts;

    my $judge_burden = $m->comp(
		"/funclib/judgemath/judges_needed_by_category.mas",
		category          => $category,
		category_settings => $category_settings,
		tourn_settings    => $tourn_settings,
		school            => $school,
		confirmed         => $confirmed,
		waitlist          => $waitlist,
		bulk              => $bulk
	);

	my @useful_judges;
	@useful_judges = @{$judges} if $judges;

  	@useful_judges = $m->comp(
		"/funclib/judgemath/judges_by_category.mas",
		category          => $category,
		category_settings => $category_settings,
		school            => $school,
		confirmed         => $confirmed,
		waitlist          => $waitlist,
	) unless @useful_judges || $bulk;

	my ($uncovered, $overage) = $m->comp(
		"/funclib/judgemath/uncovered_burden_by_category.mas",
		category          => $category,
		category_settings => $category_settings,
		school            => $school,
		confirmed         => $confirmed,
		waitlist          => $waitlist,
		judges            => $judges,
		hires             => $hires,
		bulk              => $bulk
	);

	$uncovered = ceil($uncovered / $category->setting("judge_per"))
		if $category->setting("judge_per") > 0;

	my ($requested, $accepted) = $m->comp(
		"/funclib/school_hires.mas",
		school            => $school,
		category_settings => $category_settings,
		category          => $category,
		hires             => $hires
	);

	$accepted = ceil($accepted / $category->setting("judge_per"))
		if $category->setting("judge_per") > 0;

	my $totals = scalar @useful_judges;
	$totals += $accepted;

	# Excess establishes how many judges over obligation we are, so if someone
	# has covered all their judging with extra judges, it won't penalize them

	my $excess = $totals - $judge_burden;
	my %shifts_under = ();

	foreach my $shift (@shifts) {

		my @struck_judges = $m->comp(
			"/funclib/judge_shifts.mas",
			school            => $school,
			category          => $category,
			category_settings => $category_settings,
			shift             => $shift,
			hires             => $hires,
			fee_only          => 1
		);

		my $shift_strikes = scalar @struck_judges;
		next unless $shift_strikes;

		if ($shift_strikes > ($excess + $uncovered) ) {
			$shifts_under{$shift->id} = $shift_strikes - $excess - $uncovered;
		}


	} #end of foreach stime

	return %shifts_under;

</%init>
