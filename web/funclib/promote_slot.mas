<%args>
	$person
	$entry
</%args>
<%init>

	if ($entry->setting("autoqual")) {
		return "That slot was an auto-qualifier; no additional entry was promoted";
	}

	if ($entry->setting("lastchance")) {
		return "That slot was from the Last Chance qualifier; no additional entry was promoted";
	}

	if ($entry->event->tourn->setting("no_autopromotion")) {
		return "This tournament is now set to not allow auto-promotion."
	}
	if ($entry->event->setting("no_autopromotion")) {
		return "This event is set to not allow auto-promotion."
	}

	my $school     = $entry->school;
	my $dest_event = $entry->event;
	my $tourn      = $school->tourn;
	my $district   = $school->district;
	my $err;

	unless ($tourn
		&& $school->district
		&& $tourn->setting("nsda_nats")
	) {
		return "This only is appropriate for Nationals";
	}

	my $original_id = $entry->setting("source_entry");

	my $original_entry = Tab::Entry->retrieve($original_id)
		if $original_id
		&& $original_id eq int($original_id);

	unless ($original_entry) {
		return "No promotion necessary; entry did not originate from a District tournament";
	}

	my $event = $original_entry->event;
	$original_entry->setting("nsda_vacate", 1);

	my %qualifiers = $m->comp(
		"/funclib/district_qualifiers.mas",
		event => $event
	);

    my @district_entries =
        $m->comp("/funclib/nationals_entry.mas",
            district => $district,
            tourn => $tourn
	);

	my %existing_entries  =
		map {$_->source_entry => $_}
		@district_entries;

	my $msg;
	my @ties;
	my $new_entry;
	my $max_reached;

	foreach my $key (
		sort {$a <=> $b}
		keys %qualifiers
	) {

		next if $key eq "tags";
		next if $key eq "ties";
		next if $key eq "descs";

		my $entry = $qualifiers{$key}{"entry"};
		next unless $entry;
		next if $qualifiers{$key}{"vacated"};
		next if $existing_entries{$entry->id};

		my $rank = $qualifiers{$key}{"rank"};

		if ($rank > 14) {

			$max_reached = "Maximum number of 14 alternates/qualifiers reached.  No promotion occurred";

		} elsif (
			$qualifiers{"ties"}{$rank}
			&& scalar @{$qualifiers{"ties"}{$rank}} > 1)
		{
			@ties = @{$qualifiers{"ties"}{$rank}};

		} else {
			$new_entry = $m->comp(
				"/funclib/transfer_entry.mas",
				person   => $person,
				entry    => $entry,
				event    => $dest_event,
				district => $district->id
			);

			my $id = eval {
				return $new_entry->id;
			};

			if ($id) {
				$new_entry->setting('alternate', 1);
			} else {
				$err = $new_entry;
				undef $new_entry;
			}
		}

		next unless $new_entry;

		if ($max_reached) {
			$msg = $original_entry->id." ".$original_entry->name." rejected slot into ".$event->abbr." ";
			$msg .= $max_reached;
		} else {
			$msg = "Because of rejection of ".$original_entry->id." ".$original_entry->name.", $new_entry ".$new_entry->name." promoted into ".$event->abbr;
		}

		$m->comp("/funclib/log.mas",
			tourn       => $tourn,
			event       => $dest_event,
			entry       => $new_entry->id,
			school      => $new_entry->school->id,
			type        => "promotions",
			person      => $person,
			description => $msg
		);

	}

	my $body = "\n";
	$body .= $person->first." ".$person->last." from ".$original_entry->school->name." has rejected ";
	$body .= "or dropped an entry in ".$dest_event->abbr;
	$body .= " for the ".$tourn->name.".\n\n";

	my $cc;
	my $oops;

	if (@ties) {

		$body .= "The next alternate entry on your Districts result sheet is an ";
		$body .= "unbroken tie between\n";

		my $notfirst;

		foreach my $tie (@ties) {
			$body .= " and \n" if $notfirst++;
			$body .= " ".$tie->code." ".$tie->name." of ".$tie->school->short_name."\n";
		}

		$body .= "\n\n";

		$body .= "This tie must be resolved before an entry can be admitted to Nationals\n";
		$body .= "via a run-off round or someone refusing a slot.  If a tied competitor refuses ";
		$body .= "the slot or is already registered in Nationals in a slot they prefer, mark ";
		$body .= "their slot in this category as 'vacated' and then re-post your Nationals entry ";
		$body .= "on Tabroom.com.\n\n";

		$body .= "If you need another solution or help, contact the National Office by ";
		$body .= "replying to this email ";

	} elsif ($new_entry) {

		$body .= "The next alternate entry from Districts is:\n";
		$body .= $new_entry->name."\n";
		$body .= $new_entry->school->name."\n";
		$body .= "and has been automatically promoted into Nationals registration";
		$body .= "\n\n";

		$body .= "New entries can be accepted or rejected on Tabroom.com.  Full details and a link ";
		$body .= "to registration are available at http://www.speechanddebate.org/nationals.";
		$body .= "\n\n";

		$body .= "If any of the above details are incorrect, please contact the NSDA ";
		$body .= "office immediately; you can do so by simply replying to this email.";
		$body .= "\n\n";

	} elsif ($max_reached) {

		$body .= "We have already hit the 14th alternate from your District.  No further";
		$body .= "slots will be promoted into Nationals.\n";
		$body .= "If you believe this is in error, please contact the National office";

		$cc = 'info@speechanddebate.org';

	} else {

		$oops++;
		$body .= "The next alternate entry from Districts could not be found\n";
		$body .= "The NSDA office has been copied to this email to figure out who to advance.";
		$body .= $err;
		$body .= "\n\n";

		$cc = 'info@speechanddebate.org';
	}

	my %contacts;
	$contacts{$person->id} = $person;

	my $old_school = $entry->school;

	my $district_chair = Tab::Permission->search(
		tag      => "chair",
		district => $district->id
	)->first;

	$contacts{$district_chair->person->id} = $district_chair->person
		if $district_chair
		&& $district_chair->person > 0;

	my @schools;
	push @schools, $old_school;

	if ($new_entry) {
		push @schools, $new_entry->school;
	}

	foreach my $school (@schools) {

		foreach my $coach (Tab::Permission->search(
			tag     => "chapter",
			chapter => $school->chapter->id)
		) {

			$contacts{$coach->person->id} = $coach->person
				if $coach->person > 0;
		}
	}

	my @tos;

	foreach my $contact (keys %contacts) {
		push @tos, $contacts{$contact};
	}

	my $subject = "Nationals Entry Reject/Promotion";
	$subject .= " - Promotion not found" if $oops;

	$body .= "\n\n";
	$body .= $district->code." ".$district->name;

	my $reply = $m->comp("/funclib/send_email.mas",
		subject     => $subject,
		body        => $body,
		from_string => "nsda",
		cc          => $cc,
		accounts    => \@tos
	);

	$msg .= "<br />".$reply if $reply;

	return $msg;

</%init>
