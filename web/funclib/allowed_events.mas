<%args>
	$tourn
	$perms
	$type => undef
</%args>
<%init>

	if ($ARGS{"newschool"}) {

		my $dbh = Tab::DBI->db_Main();
		my $results;

		if (${$perms}{"by_event"}) {

			my $event_string;

			foreach my $event_id (keys %{$perms->{"details"}}) {

				if (
					($perms->{"details"}{$event_id} eq $type) || (not defined $type)
					|| ($type eq "admin" && $perms->{details}{$event_id} eq "tabber")
				) {
					$event_string .= ',' if $event_string;
					$event_string .= $event_id;
				}
			}

			my $sth = $dbh->prepare("
				select
					event.id event, event.name cat_name, event.abbr cat_abbr,
					category.id category, category.name cat_name, category.abbr cat_abbr,
					nats_category.value nats_category
				from (event, category)
					left join category_setting nats_category
						on nats_category.category = category.id
						and nats_category.tag = 'nats_category'
				where event.id IN (".$event_string.")
					and event.category = category.id
			");

			$sth->execute();
			$results = $sth->fetchall_hash();

		} else {

			my $sth = $dbh->prepare("
				select
					event.id event, event.name cat_name, event.abbr cat_abbr,
					category.id category, category.name cat_name, category.abbr cat_abbr,
					nats_category.value nats_category
				from (event, category)
					left join category_setting nats_category
						on nats_category.category = category.id
						and nats_category.tag = 'nats_category'
				where event.tourn = ?
					and event.category = category.id
			");

			$sth->execute($tourn->id);
			$results = $sth->fetchall_hash();
		}

		my %events;
		my %categories;

		foreach my $result (@{$results}) {
			unless ($categories{$result->{category}}) {
				$categories{$result->{category}} = ({
					id            => $result->{category},
					name          => $result->{cat_name},
					abbr          => $result->{cat_abbr},
					nats_category => $result->{nats_category}
				});
			}

			unless ($events{$result->{category}}) {
				$events{$result->{category}} = ({
					id   => $result->{event},
					name => $result->{event_name},
					abbr => $result->{event_abbr}
				});
			}
		}

		return \%events, \%categories;

	}

	my @events;
	my @categories;

	if (${$perms}{"by_event"}) {

		@events = $tourn->events();

		@events = $m->comp(
			"/funclib/event_perms.mas",
			perms  => $perms,
			events => \@events,
			type   => $type
		);

		my %done;

		foreach my $event (@events) {
			push @categories, $event->category unless $done{$event->category}++;
		}

	} else {
		@events = $tourn->events;
		@categories = $tourn->categories();
	}

	@events = sort {$a->name cmp $b->name} @events;
	@events = sort {$a->type cmp $b->type} @events;

	return \@events, \@categories;

</%init>
