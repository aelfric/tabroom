<%args>
	$tourn
	$perms
</%args>
<%init>

	my $event_limiter;
	my $category_limiter;

	unless (
		$perms->{tourn}{$tourn} eq "owner"
		|| $perms->{tourn}{$tourn} eq "tabber"
	) {

		if ($perms->{"event"}) {
			$event_limiter = "and event.id IN (".join(',', keys %{$perms->{"event"}}).")";
		}

		if ($perms->{"category"}) {
			$category_limiter = "and category.id IN (".join(',', keys %{$perms->{"category"}}).")";
		}

		unless ($event_limiter || $category_limiter) {
			return;
		}
	}

	if ($ARGS{"newschool"}) {

		my $dbh = Tab::DBI->db_Main();
		my $results;

		my $event_sth = $dbh->prepare("
			select
				event.id, event.name name, event.abbr abbr, supp.value supp, event.type type
			from event
				left join event_setting supp
					on supp.event = event.id
					and supp.tag = 'supp'
			where event.tourn = ?
				$event_limiter
		");

		$event_sth->execute($tourn->id);
		my $events = $event_sth->fetchall_hash();

		my $category_sth = $dbh->prepare("
			select
				category.id, category.name name, category.abbr abbr,
				nats_category.value nats_category
			from (category)

				left join category_setting nats_category
					on nats_category.category = category.id
					and nats_category.tag = 'nats_category'

			where category.tourn = ?
				$category_limiter
		");

		$category_sth->execute($tourn->id);
		my $categories = $category_sth->fetchall_hash();

		my %events = map {$_->{id} => $_} @{$events};
		my %categories = map {$_->{id} => $_} @{$categories};

		return \%events, \%categories;
	}

	my @events;
	my @categories;

	if ($perms->{tourn}{$tourn} eq "limited") {

		my @all_events = $tourn->events();

		foreach my $event (@all_events) {
			if ($perms->{event}{$event->id} eq "tabber") {
				push @events, $event;
			}
		}

		my @all_categories = $tourn->categories();

		foreach my $category (@all_categories) {
			if ($perms->{category}{$category->id} eq "tabber") {
				push @categories, $category;
			}
		}

	} else {
		@events = $tourn->events;
		@categories = $tourn->categories();
	}

	@events = sort {$a->name cmp $b->name} @events;
	@events = sort {$a->type cmp $b->type} @events;

	return \@events, \@categories;

</%init>
