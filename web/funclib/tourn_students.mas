<%args>
	$tourn
	$by_region   => undef
	$by_entry    => undef
	$by_result   => undef
	$no_drops    => undef
	$category_id => undef
	$weekend     => undef
</%args>
<%perl>

	my $limit = " and entry.active = 1 " if $no_drops;

	my $order;
	$order = " school.name, " if $ARGS{"order_by"} eq "school";

	# Only you can prevent sql injections!
	$category_id = int($category_id);

	$limit = " and event.category = ".$category_id if $category_id;

	if ($by_entry) {

		my $dbh = Tab::DBI->db_Main();

		my $sth = $dbh->prepare("
			select distinct entry_student.id, entry.id, entry_student.student, entry.school,
				concat_ws(' ',student.first, student.last), student.nsda
			from entry_student, entry, event, student
			where entry.event = event.id
				and event.tourn = ?
				and entry.id = entry_student.entry
				$limit
				and entry_student.student = student.id
			group by entry_student.id
			order by $order event.name, entry.code, student.last
		");

		my %entry_students;

		$sth->execute($tourn->id);

		while (my ($id, $entry, $student, $school, $name, $nsda)  = $sth->fetchrow_array() ) {
			push @{$entry_students{$entry}{"students"}}, $student;
			$entry_students{$entry}{$student}{"name"} = $name;
			$entry_students{$entry}{$student}{"school"} = $school;
			$entry_students{$entry}{$student}{"nsda"} = $nsda;
		}

		return %entry_students;

	} elsif ($by_region) {

		Tab::Student->set_sql( region_by_tourn => "
			select distinct student.*, entry.id as entry, region.id as region
			from student, entry_student, entry, school, region
			where student.id = entry_student.student
			and entry_student.entry = entry.id
			and entry.school = school.id
			and school.tourn = ?
			$limit
			and school.region = region.id
			order by region.name, school.name, student.last ");

		return Tab::Student->search_region_by_tourn($tourn->id);

	} elsif ($by_result) {

		Tab::Student->set_sql( by_result_tourn => "
			select distinct student.*,
				chapter.name as school,
				chapter.id as code,
				chapter.level as event,
				event.id as entry
			from student, score, ballot, entry, event, chapter
			where event.tourn = ?
			and entry.event = event.id
			and entry.id = ballot.entry
			$limit
			and ballot.id = score.ballot
			and score.student = student.id
			and student.chapter = chapter.id
			order by chapter.name, student.last ");

		return Tab::Student->search_by_result_tourn($tourn->id);

	} elsif ($weekend) {

		Tab::Student->columns(TEMP => "entrycode");

		Tab::Student->set_sql( by_tourn => "
			select distinct student.*, entry.id as entry, school.id as school, entry.code as entrycode
				from student, entry_student, entry, school, event, event_setting weekend
			where student.id = entry_student.student
				and entry_student.entry = entry.id
				and entry.event = event.id
				and event.id = weekend.event
				and weekend.tag = 'weekend'
				and weekend.value = ?
				and event.tourn = ?
				and entry.school = school.id
				$limit
			group by student.id
			order by $order student.last
		");

		return Tab::Student->search_by_tourn($weekend, $tourn);

	} else {

		Tab::Student->columns(TEMP => "schoolid");
		Tab::Student->columns(TEMP => "chapter_nsda");
		Tab::Student->columns(TEMP => "entrycode");

		Tab::Student->set_sql( by_tourn => "
			select student.*,
				entry.id as entry, entry.code as entrycode,
				school.id as schoolid,
				chapter.nsda as chapter_nsda

			from (student, entry_student, entry, school, event)
				left join chapter on school.chapter = chapter.id
			where student.id = entry_student.student
				and entry_student.entry = entry.id
				and entry.event = event.id
				and event.tourn = ?
				and entry.school = school.id
			$limit
			group by student.id
			order by $order student.last
		");

		return Tab::Student->search_by_tourn($tourn->id);

	}

</%perl>

