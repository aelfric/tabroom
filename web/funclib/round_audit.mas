<%args>
	$round    => undef
	$round_id => undef
</%args>
<%init>

	$round = Tab::Round->retrieve($round_id) if $round_id;
	return unless $round;

	Tab::Ballot->set_sql( audit_round => "
		update ballot, score, panel
		set ballot.audit = 1
		where panel.round = ?
		and panel.id = ballot.panel
		and ballot.id = score.ballot
		and score.value is not null
	");

	Tab::Ballot->set_sql( audit_byes => "
		update ballot, panel
		set ballot.audit = 1
		where panel.round = ?
		and panel.id = ballot.panel
		and
			(panel.bye = 1
			or ballot.bye = 1
			or ballot.forfeit = 1
		)
	");

	Tab::Ballot->set_sql( zero_round => "
		update ballot, panel
		set ballot.audit = 0
		where panel.round = ?
		and panel.id = ballot.panel
		and ballot.bye != 0
		and ballot.forfeit != 0
		and not exists (
			select score.id
			from score
			where score.ballot = ballot.id
			and score.value is not null)
	");


	Tab::Ballot->sql_audit_round->execute($round->id);
	Tab::Ballot->sql_audit_byes->execute($round->id);
	Tab::Ballot->sql_zero_round->execute($round->id);

	if ($round->type eq "elim" || $round->type eq "final") {

	} elsif ($round->type eq "prelim") {

	} else {

		my $round_before = Tab::Round->search(
			event => $round->event->id,
			name => ($round->name - 1)
		)->first;

		my %entry_wins = $m->comp("/funclib/entry_wins.mas",
			event => $round->event,
			round => $round_before
		);

		my @panels = $round->panels;

		foreach my $panel (@panels) {

			my $bracket;

			foreach my $entry ($m->comp("/funclib/panel_entries.mas", panel => $panel)) {
				$bracket = $entry_wins{$entry->id} if $entry_wins{$entry->id} > $bracket;
			}

			$panel->bracket($bracket);
			$panel->update;

		}

	}

	return;

</%init>
