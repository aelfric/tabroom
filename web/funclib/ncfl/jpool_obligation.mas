<%args>
	$diocese
	$jpool => undef
	$category => undef
</%args>
<%perl>

	if ($jpool) {

		return if $jpool->setting("event_based");

		my $category = $jpool->category;

		my $judge_quota = $m->comp(
			"judge_obligation.mas",
			diocese  => $diocese,
			category => $category
		);

		my $max_owed = max_owed($diocese, $category, $judge_quota);
		my $jpool_burden = jpool_burden($diocese, $jpool, $judge_quota);

		my $owed = $max_owed;
		my $style = "overall";

		if ($jpool_burden < $max_owed) {
			$owed = $jpool_burden;
			$style = "jpool";
		}

		return $owed, $style, $judge_quota * 2;

	} elsif ($category) {

		return if $category->setting("tab_room");

		my @elim_jpools =  $m->comp(
			"/funclib/category_jpools.mas",
			category => $category,
			limit    => "ncfl_elims"
		);

		return unless @elim_jpools;

		my $judge_quota = $m->comp(
			"judge_obligation.mas",
			diocese  => $diocese,
			category => $category
		);

		my $max_owed = max_owed($diocese, $category, $judge_quota);

		my $total_jpool_burden;

		foreach my $jpool (@elim_jpools) {
			$total_jpool_burden += jpool_burden($diocese, $jpool, $judge_quota);
		}

		my $owed = $max_owed;
		my $style = "overall";

		if ($total_jpool_burden < $max_owed) {
			$owed = $total_jpool_burden;
			$style = "jpool";
		}

		return $owed, $style, $judge_quota * 2;

	}

	return;

	sub jpool_burden {

		my ($diocese, $jpool, $judge_quota) = @_;
		my $jpool_burden = POSIX::ceil($judge_quota * $jpool->setting("burden") * .01);

		my @pool_judges = $m->comp(
			"/funclib/region_judges.mas",
			region => $diocese,
			jpool  => $jpool
		);

		$jpool_burden -= scalar @pool_judges;
		$jpool_burden = 0 if $jpool_burden < 0;
		return $jpool_burden;

	}

	sub max_owed {

		my ($diocese, $category, $judge_quota) = @_;

		my $max_owed = ($judge_quota * 2);

		Tab::JPoolJudge->set_sql( jpools => "
			select distinct jpool_judge.id
			from jpool_judge, judge, jpool, school
			where jpool_judge.judge = judge.id
			and jpool_judge.jpool = jpool.id
			and jpool.category = ?
			and exists (
				select jpool_setting.id
					from jpool_setting
					where jpool_setting.jpool = jpool.id
					and jpool_setting.tag = 'registrant'
			)
			and not exists (
				select jpool_setting.id
				from jpool_setting
				where jpool_setting.jpool = jpool.id
				and jpool_setting.tag = 'event_based'
			)
			and judge.school = school.id
			and school.region = ?
		");

		my @elim_rounds = Tab::JPoolJudge->search_jpools($category->id, $diocese->id);

		$max_owed -= scalar @elim_rounds;
		$max_owed = 0 if $max_owed < 0;
		return $max_owed;

	}

</%perl>

