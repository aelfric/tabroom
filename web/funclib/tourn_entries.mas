<%args>
	$tourn
	$event       => undef
	$all         => undef
	$code        => undef
	$last        => undef
	$novii       => undef
	$by_region   => undef
	$codebreaker => undef
</%args>
<%perl>

	my $limits;

	if ($codebreaker) {

		$limits = "
			and exists (
				select event_setting.id
				from event_setting
				where event_setting.event = entry.event
				and event_setting.tag = 'code_style'
				and (
					event_setting.value = 'numbers'
					or event_setting.value = 'last_names'
				)
			)";
	}

	if ($event && $event eq int($event)) {
		$limits .= " and entry.event = ".int($event);
	}

	if ($ARGS{"school_id"}) {
		$limits .= " and school.id = ".int($ARGS{school_id});
	}

	if ($code) {

		Tab::Entry->set_sql( by_tourn => "
			select distinct entry.*
			from entry, event
			where entry.event = event.id
			and event.tourn = ?
			and entry.code = ?
			and entry.dropped = 0
			and entry.unconfirmed = 0
			$limits
			order by event.name, entry.code");

		return Tab::Entry->search_by_tourn($tourn->id, $code);

	} elsif ($last) {

		Tab::Entry->set_sql( by_tourn => "
			select distinct entry.*
			from entry, event, entry_student, student
			where entry.event = event.id
			and event.tourn = ?
			and entry.id = entry_student.entry
			and entry_student.student = student.id
			and student.last = ?

			and entry.dropped = 0
			and entry.unconfirmed = 0
			$limits
			order by event.name, entry.code");

		return Tab::Entry->search_by_tourn($tourn->id, $code);

	} elsif ($novii) {

		Tab::Entry->set_sql( novii_by_tourn => "
			select distinct entry.*
			from entry, event
			where entry.event = event.id
			and event.tourn = ?

			and entry.dropped = 0
			and entry.unconfirmed = 0
			$limits
			and not exists (
				select student.id
				from student, entry_student
				where entry_student.entry = entry.id
				and entry_student.student = student.id
				and student.novice = 0
			)
			order by event.name, entry.code");

		return Tab::Entry->search_novii_by_tourn($tourn->id);

	} elsif ($all && $ARGS{"names"}) {

		Tab::Entry->columns(TEMP => "fullnames");

		Tab::Entry->set_sql( all_by_tourn => "
			select distinct entry.*,
				school.name as schname, school.code as othername,
				school.id as schoolid, event.id as eventid, event.category as categoryid,
				GROUP_CONCAT(CONCAT_WS(' ',student.first,student.last) SEPARATOR ' , ')
					as fullnames
			from entry, school, event, entry_student, student
			where entry.school = school.id
			and entry.event = event.id
			and school.tourn = ?
			and entry.unconfirmed = 0
			and entry_student.entry = entry.id
			and entry_student.student = student.id
			$limits
			group by entry.id
			order by school.name, entry.code
		");

		return Tab::Entry->search_all_by_tourn($tourn->id);

	} elsif ($all) {

		Tab::Entry->columns(TEMP => "no_judges");

		Tab::Entry->set_sql( all_by_tourn => "
			select distinct entry.*,
				school.name as schname, school.code as othername,
				school.id as schoolid, event.id as eventid, event.category as categoryid,
				no_judges.value as no_judges,
				GROUP_CONCAT(CONCAT_WS(' ',student.first,student.last) SEPARATOR ' , ')
					as fullnames
			from (entry, school, event)
				left join entry_student on entry_student.entry = entry.id
				left join student on student.id = entry_student.student
				left join event_setting no_judges on no_judges.event = event.id and no_judges.tag = 'no_judge_burden'

			where entry.school = school.id
			and entry.event = event.id
			and school.tourn = ?
			and entry.unconfirmed = 0
			$limits
			group by entry.id
			order by school.name, entry.code, entry.id
		");

		return Tab::Entry->search_all_by_tourn($tourn->id);

	} elsif ($by_region)  {

		Tab::Entry->set_sql( region_by_tourn => "
			select distinct entry.*,
				school.name as schname,
				region.name as regname, region.code as regcode, region.id as region
			from entry, event, school, region
			where entry.event = event.id
			and event.tourn = ?

			and entry.active = 1
			and entry.school = school.id
			and school.region = region.id
			$limits
			order by event.name, entry.code, entry.school");

		return Tab::Entry->search_region_by_tourn($tourn->id);

	} elsif ($ARGS{"minimal"}) {

		my $dbh = Tab::DBI->db_Main();

		my $sth = $dbh->prepare("
			select distinct entry.id, entry.school, entry.event, entry.code, entry.name, event.category
				from entry, event
				where event.tourn = ?
				and entry.event = event.id
				order by entry.school, entry.event, entry.code
		");

		$sth->execute( $tourn->id );

		my %entries;

		while (my ($id, $school, $event, $code, $name, $category) = $sth->fetchrow_array() ) {

			$entries{$id}{"name"} = $name;
			$entries{$id}{"school"} = $school;
			$entries{$id}{"code"} = $code;
			$entries{$id}{"category"} = $category;
			$entries{$id}{"event"} = $event;
		}

		return %entries;

	} else {

		Tab::Entry->columns( TEMP => "schoolname" );

		Tab::Entry->set_sql( by_tourn => "
			select distinct entry.*,
				entry.school as schoolid, entry.event as eventid, event.category as categoryid,
				school.name as schoolname
			from (entry, event)
				left join school on entry.school = school.id
			where entry.event = event.id
			and event.tourn = ?
			and entry.active = 1
			$limits
			order by event.name, entry.code, entry.school");

		return Tab::Entry->search_by_tourn($tourn->id);

	}

</%perl>

