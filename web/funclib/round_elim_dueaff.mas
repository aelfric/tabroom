<%args>
	$panel    => undef
	$panel_id => undef
</%args>
<%init>

	$panel_id = int($panel) unless $panel_id;
	$panel_id = int($panel_id);

	return unless $panel_id;

	my $dbh = Tab::DBI->db_Main();

	my $check_sth = $dbh->prepare("
		select
			event.id, event.type event_type,
			round.type,
			no_side_constraints.value no_sidelocks,
			sidelock_elims.value sidelock_elims,
			no_elim_sidelocks.value no_elim_sidelocks

		from (panel, round, event)

			left join event_setting sidelock_elims
				on sidelock_elims.tag = 'sidelock_elims'
				and sidelock_elims.event = event.id

			left join event_setting no_elim_sidelocks
				on no_elim_sidelocks.tag = 'no_elim_sidelocks'
				and no_elim_sidelocks.event = event.id

			left join event_setting no_side_constraints
				on no_side_constraints.tag = 'no_side_constraints'
				and no_side_constraints.event = event.id

		where panel.id = ?
			and panel.round = round.id
			and round.event = event.id
	");

	$check_sth->execute($panel_id);
	my $results = $check_sth->fetchall_hash();

	my $ref = eval {
		return shift @{$results};
	};

	unless ($ref) {
		return;
	}

	if (
		$ref->{event_type} ne "debate"
		&& $ref->{event_type} ne "wsdc"
	) {
		return;
	}

	if (
		$ref->{type} ne "final"
		&& $ref->{type} ne "elim"
		&& $ref->{type} ne "runoff"
	) {
		return;
	}

	# Elims or rounds are never sidelocked
	if ($ref->{no_sidelocks} || $ref->{no_elim_sidelocks}) {
		return;
	}

	# Elims are always sidelocked
	if ($ref->{sidelock_elims}) {

		my $sth = $dbh->prepare("
			select ballot.entry
				from ballot
			where ballot.panel = ?
				and ballot.side = 1
		");

		$sth->execute($panel_id);

		my $affs = $sth->fetchall_hash();
		my $aff = eval {
			return shift @{$affs}
		};

		return $aff->{entry};
	}

	my $sth = $dbh->prepare("
		select distinct panel.id, round.name,
			p1b1.entry, p1b1.side,
			p1b2.entry, p1b2.side
		 from panel, round, panel p2, round r2, ballot p1b1, ballot p1b2, ballot p2b1, ballot p2b2

		 where p1b1.panel = panel.id
			 and p1b2.panel = panel.id
			 and panel.round = round.id
			 and panel.bye != 1
			 and p1b1.bye != 1
			 and p1b1.forfeit != 1
			 and p1b1.entry = p2b1.entry
			 and p1b2.entry = p2b2.entry

			 and p2b1.panel = p2.id
			 and p2b2.panel = p2.id
			 and p2b1.entry != p2b2.entry
			 and p2.id = ?
			 and p2.round = r2.id
			 and r2.name > round.name
		 group by panel.id
	");

	$sth->execute($panel_id);

	my %negcount;

	while(
		my (
			$panel_id, $round_name, $entry1, $side1, $entry2, $side2
		)  = $sth->fetchrow_array()
	) {
		if ($side1 == 2) {
			$negcount{$entry1}++;
		} elsif ($side2 == 2) {
			$negcount{$entry2}++;
		}
	}

	my $aff;
	my $current_count;

	foreach my $entry (keys (%negcount)) {
		if ($negcount{$entry} > $current_count) {
			$aff = $entry;
			$current_count = $negcount{$entry};
		} elsif ($negcount{$entry} == $current_count) {
			undef $aff;
		}
	}

	return $aff;

</%init>
