<%args>
	$person
	$tourn
	$chapter
	$tourn_settings
</%args>
<%init>

	return unless $chapter && $chapter->id;

	my $err;

	if ($ARGS{"nodeadlines"}) {

	} elsif ($tourn_settings->{"nsda_members_only"}) {

		unless ($chapter->nsda > 0) {
			$err = "Only NSDA Member Schools may register for this tournament. <br />";
			$err .= "To confirm your NSDA membership, Link your Tabroom school to the NSDA below";
		}

		unless ($chapter->setting("nsda_paid") > 0) {
			$err = "To register for this tournament, you must first pay your NSDA annual membership dues. <br />";
		}

	} elsif ($tourn_settings->{"nsda_district"}) {

		$m->comp("/funclib/nsda/chapter_sync.mas", chapter => $chapter);

		unless ($chapter->nsda > 0 ) {
			$err = "Only NSDA Member Schools may register for nationals. <br />";
			$err .= "To confirm your NSDA membership, Link your Tabroom school to the NSDA below";
		}

		unless ($chapter->setting("nsda_paid") > 0) {
			$err = "Your school is not marked as having paid this year. ";
			$err .= "Have you paid your annual dues?  Please confirm and then try again.";
		}

		unless ($chapter->district->id == $tourn_settings->{"nsda_district"}) {
			$err = "To register for districts you must first be ";
			$err .= "a member of that district.  Check the NSDA tab ";
			$err .= "above to link to your school record.";
		}

		if ($tourn_settings->{"nsda_district_questions"}
			&& $tourn_settings->{"nsda_district_questions"}{"nsda_tabbing_software"} ne "tabroom"
		) {

			$err = "This tournament is being tabbed on ";
			$err .= ucfirst($tourn_settings->{"nsda_tabbing_software"})." and not Tabroom. ";
			$err .= "You should register for the tournament there.  Contact your district ";
			$err .= "chair if you need further information.";
		}
	}

	my $existing_school = $chapter->schools(
		tourn => $tourn->id
	)->first;

	if ($existing_school) {
		$err .= "School already exists!";
		return $existing_school, $err;
	}

	my $now = DateTime->now();

	unless ($ARGS{"nodeadlines"}) {

		if ($tourn_settings->{"nsda_district"}) {

			my $closed = 1;
			my $not_yet = 1;

			foreach my $weekend ($tourn->weekends()) {
				undef $not_yet if $weekend->reg_start < $now;
				undef $closed if $weekend->reg_end > $now;
			}

			if ($not_yet) {
				$err .= "Registration is not yet open for this tournament";
			} elsif ($closed) {
				$err .= "Registration is closed for this tournament";
			}

		} else {

			if ($tourn->reg_start > $now) {
				$err .= "Registration is not yet open for this tournament";
			}

			if ($tourn->reg_end < $now) {
				$err .= "Registration is closed for this tournament";
			}
		}
	}

	return 0, $err if defined $err;

	my $school_region = $ARGS{"region"};
	my $school_code;
	my $school_district = $ARGS{"district"};

	if ($tourn_settings->{"ncfl"} &! $school_region) {
		my $school_region_id = $ARGS{"region_id"};

		$school_region = Tab::Region->retrieve($school_region_id)
			if $school_region_id;

		$err .= "No valid Diocese was sent to register school into.  ID was $school_region_id <br />"
			unless $school_region;

	} elsif ($tourn_settings->{"nsda_nats"} &! $school_district) {

		my $school_district_id = $ARGS{"district_id"};

		$school_district = Tab::District->retrieve($school_district_id)
			if $school_district_id;

		$school_district = $chapter->district unless $school_district_id;

		$err .= "No valid District was sent to register school into" unless $school_district;

		$school_region = eval {
			return $school_district->region;
		};
	}

	return 0, $err if $err;

	($school_code, $school_region) = $m->comp(
		"/funclib/chapter_code.mas",
			tourn   => $tourn,
			chapter => $chapter
	) unless $school_region || $school_code || $school_district;

	$school_code = substr($school_code, 0, 15);

	my $school = Tab::School->create({
		tourn    => $tourn->id,
		chapter  => $chapter->id,
		name     => $chapter->name,
		code     => $school_code,
		region   => $school_region,
		district => $school_district
	});

	$school->setting("entered_on", "date", $now);

	unless ($ARGS{"admin"}
		|| $tourn_settings->{"ncfl"}
		|| $tourn_settings->{"nsda_nats"}
	) {
		$school->setting("contact", $person->id);
		$school->setting("contact_name", $person->first." ".$person->last);
		$school->setting("contact_number", $person->phone);
		$school->setting("contact_email", $person->email);
	}

	$m->comp('/funclib/chapter_conflicts.mas', school => $school);

	if ($tourn_settings->{"track_reg_changes"}) {

		my $description = "School registered by ".$person->first." ".$person->last;

		my $change = $m->comp("/funclib/log.mas",
			tourn       => $tourn->id,
			school      => $school->id,
			type        => "registration",
			description => $description,
			person      => $person->id
		);

	}

	unless ($ARGS{"no_fees"}) {

		foreach my $fine ($tourn->tourn_fees) {

			next unless $fine->amount > 0;

			next if $fine->start
				&& $fine->start->epoch
				&& $fine->start->epoch > $now->epoch;

			next if $fine->end
				&& $fine->end->epoch
				&& $fine->end->epoch < $now->epoch;

			my $fee = Tab::Fine->create({
				school    => $school->id,
				amount    => $fine->amount,
				reason    => $fine->reason,
				tourn     => $tourn->id,
				levied_at => $now,
				parent    => $fine->id,
				payment   => 0,
				deleted   => 0
			});
		}
	}

	return $school, $err;

</%init>
