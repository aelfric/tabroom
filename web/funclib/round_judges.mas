<%args>
	$round
	$not_in      => undef
	$unstarted   => undef
	$unentered   => undef
	$flight      => undef
</%args>
<%init>

	Tab::Judge->columns(TEMP => qw/panelletter/);
	Tab::Judge->columns(TEMP => qw/chair/);

	my $ballot_limit;
	my $panel_limit = " and panel.flight = $flight " if $flight;

	if ($not_in || $unentered || $unstarted) {
		$panel_limit .= " and panel.bye != 1 ";
		$ballot_limit .= " and ballot.audit != 1 ";
	}

	$panel_limit .= " and (ballot.judge_started is null or ballot.judge_started = 0) " if $unstarted;

	Tab::Judge->columns(TEMP => "schoolname");
	Tab::Judge->columns(TEMP => "schoolcode");

	Tab::Judge->columns(TEMP => "regionname");
	Tab::Judge->columns(TEMP => "roomname");
	Tab::Judge->columns(TEMP => "regioncode");

	Tab::Judge->columns(TEMP => "districtname");
	Tab::Judge->columns(TEMP => "districtcode");
	Tab::Judge->columns(TEMP => "districtid");

	Tab::Judge->columns(TEMP => "state");

	Tab::Judge->columns(TEMP => "personid");
	Tab::Judge->columns(TEMP => "person_noemail");
	Tab::Judge->columns(TEMP => "personemail");

	Tab::Judge->columns(TEMP => "started");
	Tab::Judge->columns(TEMP => "parlis");

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare('
		select
			rating.id, rating.name
		from rating_tier rating
		where rating.category = ?
	');

	$sth->execute($round->event->category);
	my $tiers = $sth->fetchall_hash();

	my %decoder = map {$_->{id} => $_->{name}} @{$tiers};

	Tab::Judge->set_sql(by_round => "
		select distinct judge.*,
			group_concat(distinct panel.id) as panelid,
			group_concat(distinct panel.letter) as panelletter,
			group_concat(distinct ballot.chair) as chair,
			ballot.chair as chair, tab_rating.value as tab_rating, room.site as site, parli.value as parli,
			coach_rating_tier.id coach_rating,
			ballot.judge_started as started,

			school.name as schoolname,
			school.code as schoolcode,

			district.name as districtname,
			district.code as districtcode,
			district.id as districtid,

			room.name as roomname,

			region.name as regionname,
			region.code as regioncode,

			chapter.state as state,

			person.id as personid,
			person.email as personemail,
			person.no_email as personnoemail

			from panel
			inner join ballot on ballot.panel = panel.id $ballot_limit
			inner join judge on ballot.judge = judge.id
			inner join round on panel.round = round.id
			inner join event on round.event = event.id

			left join entry on ballot.entry = entry.id and entry.dropped != 1

			left join judge_setting as parli
				on parli.judge = judge.id
				and parli.tag = 'parli'

			left join judge_setting as tab_rating
				on tab_rating.judge = judge.id
				and tab_rating.tag = 'tab_rating'

			left join rating coach_rating
				on coach_rating.type = 'coach'
				and coach_rating.judge = judge.id
				and (coach_rating.rating_subset = event.rating_subset OR coach_rating.rating_subset IS NULL)

			left join rating_tier coach_rating_tier
				on coach_rating_tier.id = coach_rating.rating_tier

			left join rating generic_rating
				on generic_rating.type = 'coach'
				and generic_rating.judge = judge.id
				and (generic_rating.rating_subset = event.rating_subset OR generic_rating.rating_subset IS NULL)

			left join rating_tier generic_rating_tier
				on generic_rating_tier.id = generic_rating.rating_tier

			left join judge_setting as neutral
				on neutral.judge = judge.id
				and neutral.tag = 'neutral'

			left join room on panel.room = room.id

			left join school on judge.school = school.id
			left join region on school.region = region.id
			left join chapter on school.chapter = chapter.id
			left join district on school.district = district.id
			left join person on judge.person = person.id

			where panel.round = ?
				$panel_limit
			group by judge.id
			order by judge.code, judge.last
	");

	my @results = Tab::Judge->search_by_round($round->id);

	foreach my $result (@results) {
		if ($decoder{$result->coach_rating}) {
			$result->coach_rating($decoder{$result->coach_rating});
		}
	}

	return @results;

</%init>
