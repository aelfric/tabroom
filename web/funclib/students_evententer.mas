<%args>
	$event
	$school        => undef
	$chapter       => undef
	$drops         => undef
	$retired       => undef
	$skip_district => undef
	$signups       => undef
	$unconfirmed   => 0
</%args>
<%init>

	my $tourn = $event->tourn;
	$m->redirect('/user/home.mhtml') unless $tourn;

	my $dbh = Tab::DBI->db_Main();

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my %tourn_settings = $tourn->all_settings;
	my %event_settings = $event->all_settings;

	my $nsda_district;
	if ($tourn_settings{'nsda_district'} && (not defined $skip_district)) {
		$nsda_district = Tab::District->retrieve($tourn_settings{'nsda_district'});
	}

    my @patterns = $tourn->patterns;
    my %pattern_by_id = map {$_->id => $_} @patterns;

	my $pattern = $event->pattern;
	my %excludeds = ();

	foreach my $other (@patterns) {

		my $exclude = $other->exclude;

		if ($exclude && ($pattern_by_id{$exclude})) {

			$excludeds{$other->id}{$exclude}++;
			$other->exclude(JSON::encode_json($excludeds{$other->id}));
			$other->update;

		} elsif ($exclude eq int($exclude)) {
		} elsif ($exclude) {

			$excludeds{$other->id} = eval{
				return JSON::decode_json($exclude);
			};

			if ($excludeds{$other->id}) {
			foreach my $only_one (keys %{$excludeds{$other->id}}) {

				if ($excludeds{$other->id}{$only_one} eq "same_pattern_only") {

					$excludeds{$other->id."_sameonly"} .= "," if $excludeds{$other->id."_sameonly"};
					$excludeds{$other->id."_sameonly"} .= $only_one;

					delete($excludeds{$other->id}{$only_one});
				}
			}}
		}
	}

	my @chapters;
	my @clean_students;
	push @chapters, $school->chapter if $school && $school->chapter;

	if ($event_settings{"usa_wsdc"}) {

		my $sth = $dbh->prepare("
			select
				student.id, student.first, student.middle, student.last, student.nsda,
				chapter.id, chapter.name, chapter.nsda
			from student, chapter
			where student.chapter = chapter.id
			and chapter.district = ?
			and student.retired != 1
			and not exists (
				select entry.id
					from entry, entry_student es, event
				where es.student = student.id
					and es.entry = entry.id
					and entry.event = event.id
					and event.tourn = ?
					and entry.active = 1

					and not exists (
						select supp.id
						from event_setting supp
						where supp.tag = 'supp'
						and supp.event = event.id
					)
			)
			order by chapter.name, student.last
		");

		$sth->execute($school->district->id, $tourn->id);
		my %students;

		while (
			my (
				$student_id, $student_first, $student_middle, $student_last, $student_nsda,
				$chapter_id, $chapter_name, $chapter_nsda
			) = $sth->fetchrow_array()
		) {

			$students{$student_id}{"first"} = $student_first;
			$students{$student_id}{"middle"} = $student_middle;
			$students{$student_id}{"last"} = $student_last;
			$students{$student_id}{"nsda"} = $student_nsda;
			$students{$student_id}{"chapter_id"} = $chapter_id;
			$students{$student_id}{"chapter_name"} = $chapter_name;
			$students{$student_id}{"chapter_nsda"} = $chapter_nsda;

		}

		$dbh->disconnect();
		return %students;
	}

	my $now = DateTime->now;
	$now->set_time_zone($tz);

	my $year = $now->year;
	$year++ if $now->month > 6;
	my %pattern_by_event = map {$_->id => $_->pattern} $tourn->events();

	my $setting_sth = $dbh->prepare("
		select ss.student, ss.tag, ss.value, ss.value_date value_date, ss.value_text value_text
			from student_setting ss, student
		where student.chapter = ?
			and student.retired = 0
			and student.id = ss.student
	");

	my %student_settings;

	foreach my $chapter (@chapters) {

		next unless $chapter;

		my @students = $chapter->students(retired => 0);

		$setting_sth->execute($chapter->id);

		my $settings_ref = $setting_sth->fetchall_hash();

		if ($settings_ref) {
			foreach my $setref (@{$settings_ref}) {

				if ($setref->{"value"} eq "text") {
					$student_settings{$setref->{"student"}}{$setref->{"tag"}} = $setref->{"value_text"};
				} elsif ($setref->{"value"} eq "date") {
					$student_settings{$setref->{"student"}}{$setref->{"tag"}} = eval {
						return DateTime::Format::MySQL->parse_datetime($setref->{"value_date"});
					};
					unless ($student_settings{$setref->{"student"}}{$setref->{"tag"}}) {
						$student_settings{$setref->{"student"}}{$setref->{"tag"}} = eval {
							return DateTime::Format::MySQL->parse_date($setref->{"value_date"});
						};
					}
				} elsif ($setref->{"value"} eq "json") {
					$student_settings{$setref->{"student"}}{$setref->{"tag"}} = eval {
						return JSON->decode_json($setref->{"value_text"});
					};
				} else {

					$student_settings{$setref->{"student"}}{$setref->{"tag"}} = $setref->{"value"};
				}
			}
		}

		# Check the students to be sure that they're not entered in an event
		# restricted against this one.

		my %entry_by_id = ();

		my $limit = "and entry.unconfirmed = 0";
		$limit .= " and not exists (
			select nec.id
				from event_setting nec
			where nec.event = event.id
				and nec.tag = 'nsda_event_category'
				and nec.value = 108
		)" if $nsda_district;

		if ($school) {

			if ($signups || $unconfirmed) {

				%entry_by_id=
					map {$_->id => $_}
					$school->entries();

				undef $limit;

			} else {
				%entry_by_id=
					map {$_->id => $_}
					$school->entries(unconfirmed => 0);
			}
		}

		Tab::EntryStudent->set_sql(by_chapter => "
			select distinct entry_student.*
			from entry_student, entry, student, event
			where entry.id = entry_student.entry
				and entry_student.student = student.id
				and student.chapter = ?
				and entry.event = event.id
				$limit
				and event.tourn = ?
		");

		my %entries_by_student = ();

		foreach my $entry_student (
			Tab::EntryStudent->search_by_chapter($chapter->id, $tourn->id)
		) {

			push (@{$entries_by_student{$entry_student->student->id}},
				$entry_by_id{$entry_student->entry->id});

		}

		my %done;
		my %district_entry;

		if ($nsda_district) {
			%district_entry = $m->comp(
				"/funclib/district_entry.mas",
				chapter => $chapter
			);
		}

		my $count;

		STUDENT:
		foreach my $student (@students) {

			my $student_id = $student->id;
			my $entered;

			next if $done{$student_id}++;

			# This is for tourns where the kid has to be district eligible even
			# if they're not districts

			if ($tourn_settings{"district_eligible"}
				|| ($tourn_settings{"nsda_members_only"} && (not defined $skip_district) && (not defined $nsda_district))
			) {
				next STUDENT unless $student_settings{$student_id}{"districts_eligible"};
			}

			# If this is districts, students who are not NSDA members in good
			# standing and with linked email addresses

			if ($nsda_district) {

				next STUDENT unless $student_settings{$student_id}{"districts_eligible"};

				if (
					$district_entry{"in_event"}{$student_id}{"HOU"} ||
					$district_entry{"in_event"}{$student_id}{"HSE"} ||
					$district_entry{"in_event"}{$student_id}{"SEN"} ||
					$district_entry{"in_event"}{$student_id}{"BQ"}
					)
				{
					$entered--;
				}

				if ($event->type eq "congress") {

					next STUDENT if $district_entry{"in_event"}{$student_id}{"HOU"};
					next STUDENT if $district_entry{"in_event"}{$student_id}{"HSE"};
					next STUDENT if $district_entry{"in_event"}{$student_id}{"SEN"};

				} elsif ($event_settings{"nsda_event_category"} == 108) {

					next STUDENT if $district_entry{"in_event"}{$student_id}{"BQ"};

					# Apparently BQ is part of districts but not actually but
					# follows the rules except where it does not follow the
					# rules which depends on the phase of the moon and the mood
					# of the asker and nobody needs to tell programmers this
					# until February.  Sigh.

				} else {

					if ($event->abbr eq "PF") {
						next STUDENT if $district_entry{"in_event"}{$student_id}{"DUO"}
							&& $district_entry{"in_event"}{$student_id}{"CX"};
					} elsif ($event->abbr eq "CX") {
						next STUDENT if $district_entry{"in_event"}{$student_id}{"DUO"}
							&& $district_entry{"in_event"}{$student_id}{"PF"};
					} elsif ($event->abbr eq "DUO") {
						next STUDENT if $district_entry{"in_event"}{$student_id}{"CX"}
							&& $district_entry{"in_event"}{$student_id}{"PF"};
					}

					next STUDENT if $district_entry{"student_count"}{$student_id} > 1;
				}
			}

			# Students who aren't students anymore.

			unless ($retired) {

				next STUDENT if $student->retired;

				next STUDENT unless $student->first && $student->last;

				next STUDENT if ($student->grad_year)
					&& ($student->grad_year < $year)
					&& (not defined $event_settings{"alumni"});
			}


			# Class specific double entry restrictions
			my @entries = @{$entries_by_student{$student_id}} if $entries_by_student{$student_id};

			my %pattern_scoreboard = ();

			foreach my $entry (@entries) {
				next unless $entry && $entry->id;
				$pattern_scoreboard{$pattern_by_event{$entry->event->id}}++;
			}

			foreach my $entry (@entries) {

				next unless $entry && $entry->id;

				my $this_event_id = $entry->event->id;
				my $this_event = $entry->event;

				if ($unconfirmed
					|| $signups
					|| $entry->active
					|| ($tourn_settings{"no_waitlist_double_entry"} && ($entry->dropped < 1) )
				) {

					# Am I already entered in this event?

					next STUDENT if $this_event_id == $event->id
						&& not defined $event_settings{'enter_me_twice'};

					# Am I already entered in the tournament and in off the
					# waitlist?

					$entered++;

					# No double entry permitted if you're entered in this pattern
					# and that's not ok

					next STUDENT if $pattern && $pattern->type == 2 && $entered > 0;

					# No double entry with a mutually-excluded group

					next STUDENT if $pattern
						&& $excludeds{$pattern->id}
						&& $this_event->pattern
						&& $excludeds{$pattern->id}{$this_event->pattern->id};


					if ($pattern && $excludeds{$pattern->id."_sameonly"}) {

						my $search_pattern = $excludeds{$pattern->id."_sameonly"}.",".$pattern->id;

						# This implements the nonsense around the only_one
						# exclusions. I have to Pull a Bruschke on this one and
						# define this in hard coded instead of using the proper
						# calls because the SQL injection guards won't let me
						# auto define a self expanding array.

						# I hate computers.

						Tab::Student->set_sql("clash_on_only_one" => "

							select student.*

							from student, student as me,
								entry_student, entry_student as my_es, entry_student as other_es,
								entry, entry as my_entry, entry as other_entry,
								event as my_event, event as other_event

							where entry.event = ?

								and me.id = ?
								and my_es.student = me.id
								and my_es.entry = my_entry.id
								and my_es.entry != entry.id
								and my_entry.event = my_event.id
								and my_event.pattern in (".$search_pattern.")

							and student.id != me.id

								and student.id = entry_student.student
								and entry_student.entry = entry.id
								and student.id = other_es.student
								and other_es.entry = other_entry.id
								and other_entry.id != entry.id
								and other_entry.event = other_event.id
								and my_event.pattern in (".$search_pattern.")
						");


						my $other_student = Tab::Student->search_clash_on_only_one(
							$event->id,
							$student_id,
						)->first;

						next STUDENT if $other_student;
					}

					if ($pattern_by_event{$this_event_id}) {

						# No double entry permitted if you're already entered and
						# the new pattern forbids double entry

						next STUDENT if $pattern_by_event{$this_event_id}->type == 2;

						# No double entry within the pattern

						next STUDENT if
							$pattern_by_event{$this_event_id}->type == 1
							&& (
								$pattern
								&& $pattern_by_event{$this_event_id}->id == $pattern->id
							);

						# No double entry beyond a limit within the pattern

						next STUDENT if
							$pattern_by_event{$this_event_id}->type == 3
							&& (
								$pattern
								&& $pattern_by_event{$this_event_id}->id == $pattern->id
								&& $pattern_scoreboard{$pattern->id} >= $pattern->max
							);

						# No double entry if the other pattern excludes mine

						next STUDENT if (
							$pattern
							&& $excludeds{$pattern_by_event{$this_event_id}}
							&& $excludeds{$pattern_by_event{$this_event_id}}{$pattern->id} == 1
						);

					}
				}
			}

			# Unlimited double entry

			if ($tourn_settings{"double_entry"} eq "unlimited") {
				push (@clean_students, $student);
				next STUDENT;
			}

			# No double entry
			next STUDENT if ($entered > 0 && $tourn_settings{"double_entry"} eq "none");

			# One event double entry
			if (
				(not defined $nsda_district)
				|| (
					$nsda_district
					&& $event->type ne "congress"
					&& ($event_settings{"nsda_event_category"} != 108)
				)
			) {

				next STUDENT
					if ( $tourn_settings{"double_entry"} eq "max_events"
						&& $entered >= $tourn_settings{"double_max"}
					);

			}
			push (@clean_students, $student);
		}
	}

	$dbh->disconnect();
	return @clean_students;

</%init>
