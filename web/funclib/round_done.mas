<%args>
	$round
</%args>
<%init>

	return unless $round;

	my $now = DateTime->now();

	my @left = $m->comp(
		"/funclib/round_judges.mas",
			round  => $round,
			not_in => "1"
	);

	my $judges_left = scalar @left;

	my $event = $round->event;
	my %event_settings = $event->all_settings();
	my $tourn = $event->tourn;

	#First ballot in notification
	my $first_notified = $event_settings{"first_round_notified"};

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		update round_setting
			set value_date = NOW()
		where round = ?
			and tag = 'last_ballot'
	");

	unless ($ARGS{"admin_done"}) {
		unless ($ARGS{"not_first"} || $round->setting("first_ballot")) {
			$round->setting("first_ballot", "date", $now);
			$round->setting("last_ballot", "date", $now);
		} else {
			$sth->execute($round->id);
		}
	}

	if ( (not defined $ARGS{"not_first"}) && ($first_notified < $round->name)) {

		my $follower_ids = $event_settings{"followers"};
		my $subject = $event->name;

		my $body = "\n\n".$round->realname." of ".$event->name." first ballot entered.  $judges_left left.\n\n";
		$body .= "Tournament: ".$tourn->name."\n\n";

		foreach my $id (split(/,/, $follower_ids)) {

			my $to;
			next unless $id;

			my $person = Tab::Person->retrieve($id);
			next unless $person;

			if ($person->phone && $person->provider) {

				my $phone = $person->phone;
				$phone =~ s/[\D_]//g;
				$to = $phone.'@'.$person->provider;

			} else {
				$to = $person->email;
			}

			$m->comp( "/funclib/send_notify.mas",
				from    => 'Tab Central <live@www.tabroom.com>',
				to      => $to,
				subject => $subject,
				body    => $body,
				admin   => 1
			);
		}

		$event->setting("first_round_notified", $round->name);
	}

	return if $judges_left > 0;

	# Last ballot in notification
	my $notified = $event_settings{"round_notified"};

	if ($notified < $round->name) {

		my $follower_ids = $event_settings{"followers"};
		my $subject = $event->name;
		my $body = "\n\n".$round->realname." of ".$event->name." last ballot entered.\n\n";
		$body .= "Tournament: ".$tourn->name."\n\n";

		foreach my $id (split(/,/, $follower_ids)) {

			next unless $id;

			my $person = Tab::Person->retrieve($id);
			next unless $person;
			my $to;

			if ($person->phone && $person->provider) {
				my $phone = $person->phone;
				$phone =~ s/[\D_]//g;
				$to = $phone.'@'.$person->provider;
			} else {
				$to = $person->email;
			}

			$m->comp( "/funclib/send_notify.mas",
				from    => 'Tab Central <live@www.tabroom.com>',
				to      => $to,
				subject => $subject,
				body    => $body,
				admin   => 1
			);
		}

		$event->setting("round_notified", $round->name);

		$m->comp(
			"/funclib/auto_backups.mas",
			subject => "Last Ballot Entered",
			round   => $round
		);

		my $breakout;

		if ($round->setting("use_for_breakout")) {
			$breakout = " and exists (
				select round_setting.id
				from round_setting
				where round_setting.tag = 'use_for_breakout'
				and round_setting.value = ".$round->setting("use_for_breakout")."
				and round_setting.round = round.id
			) ";
		} else {
			$breakout = " and not exists (
				select round_setting.id
				from round_setting
				where round_setting.tag = 'use_for_breakout'
				and round_setting.round = round.id
			) ";
		}

		Tab::Round->columns(TEMP => "panelcount");

		Tab::Round->set_sql( next_round => "
			select round.*, count(panel.id) as panelcount
			from (round)
				left join panel on panel.round = round.id
			where round.name > ?
			and round.event = ?
			$breakout
			group by round.id
			order by round.name
		");

		unless ($event_settings{"no_autopair"} || $tourn->setting("nsda_district")) {

			my $next = Tab::Round->search_next_round($round->name, $event->id)->first;

			if ( $next && $next->panelcount < 1) {

				if ($next
					&& $next->type ne "final"
					&& $next->type ne "elim"
					&& $next->type ne "runoff"
				) {

					Tab::Autoqueue->create({
						round      => $next->id,
						tag        => "pair_prelim",
						created_by => 0,
						created_at => $now,
					});

				} elsif (
					($next->type eq "elim" || $next->type eq "final")
					&& $round->type eq "elim"
				) {

					Tab::Autoqueue->create({
						round      => $next->id,
						tag        => "pair_elim",
						created_by => 0,
						created_at => $now,
					});
				}
			}
		}

		unless ($tourn->setting("nsda_district")) {

			my $next = Tab::Round->search_next_round($round->name, $event->id)->first;

			if ($next
				&& $next->type eq "elim"
				&& $round->type ne "elim"
			) {

				Tab::Autoqueue->create({
					event      => $event->id,
					round      => $round->id,
					tag        => "prelim_results",
					created_by => 0,
					created_at => $now,
				});

			} elsif ($round->type eq "final") {

				Tab::Autoqueue->create({
					event      => $event->id,
					round      => $round->id,
					tag        => "final_results",
					created_by => 0,
					created_at => $now,
				});
			}

			if ($round->type eq "elim" && $round->id == $event_settings{"bid_round"}) {
				Tab::Autoqueue->create({
					event      => $event->id,
					round      => $round->id,
					tag        => "toc_bids",
					created_by => 0,
					created_at => $now,
				});
			}

		} else {

			my $next = Tab::Round->search_next_round($round->name, $event->id)->first;

			if (
				$round->type eq "final"
				|| ( $event->setting("round_robin") && (not defined $next))
			) {

				Tab::Autoqueue->create({
					event      => $event->id,
					round      => $round->id,
					tag        => "final_results",
					created_by => 0,
					created_at => $now,
				});
			}

		}
	}

</%init>
