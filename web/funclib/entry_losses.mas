<%args>
	$event      => undef
	$event_id   => undef
	$all        => undef
	$type       => undef
	$round      => undef
	$last       => undef
	$chair      => "all"
	$post_level => undef
</%args>
<%init>

	unless ($event) {
		if ($event_id) {
			$event = Tab::Event->retrieve($event_id);
		} elsif ($round) {
			$event = $round->event;
		} else {
			$m->comp("/funclib/abort.mas", message => "No event or round was sent to the win calculator");
		}
	}

	my $dbh = Tab::DBI->db_Main();

	my $limit;

	if ($last && $round) {
		$limit  = " and round.name = ".$round->name
	} elsif ($round) {
		$limit .= " and round.name <= ".$round->name." ";
	}

	if ($all || $last) {

	} elsif ($type eq "prelim") {
		$limit .= " and round.type in ('prelim', 'highlow', 'highhigh') ";
	} elsif ($type) {
		$limit  .= " and round.type = '$type'";
	} else {
		$limit .= ' and round.type != "elim" and round.type != "final" ';
	}

	my $winner_limit;
	my $loser_limit;

	if ($event->type eq "mock_trial") {

		my $setting_sth = $dbh->prepare("
			select
				tb.id, tb.chair
			from tiebreak tb, round
			where round.event = ?
				$limit
				and round.protocol = tb.protocol
				and tb.name = 'winloss'
		");

		$setting_sth->execute($event);
		my $results = $setting_sth->fetchall_hash();
		my $only;
		undef $chair;

		foreach my $res (@{$results}) {

			if ($res->{'chair'} eq "all") {
				$only++;
			} elsif ($chair && $res->{'chair'} && $chair ne $res->{'chair'}) {
				$only++;
			} else {
				$chair = $res->{'chair'};
			}
		}

		if ($only) {
			$chair = "all";
		}
	}

	if ($chair eq "chair") {
		$winner_limit .= ' and winner.chair = 1 ';
		$loser_limit .= ' and loser.chair = 1 ';
	} elsif ($chair eq "nonchair") {
		$winner_limit .= ' and winner.chair != 1 ';
		$loser_limit .= ' and loser.chair != 1 ';
	}

	$limit .= " and round.post_primary >= ".int($post_level) if $post_level;

	my %entry_losses = ();

	my $sth = $dbh->prepare("
		select entry.id
			from entry
			where event =?
			and active = 1
	");

	if ($event) {

		$sth->execute($event->id);

		while (
			my ($entry_id) = $sth->fetchrow_array()
		) {
			$entry_losses{$entry_id} = 0;
		}
	}

	$sth->finish();

	$sth = $dbh->prepare('
	    select entry.id, count(distinct panel.id) as losses
			from round, panel, entry, ballot exist
        where entry.event = ?
			and entry.id    = exist.entry
			and panel.id    = exist.panel
			and panel.round = round.id
			and panel.bye  != 1
			and not exists (
				select round_setting.id
					from round_setting
					where round_setting.tag = "ignore_results"
					and round_setting.round = round.id
			)

			'.$limit .'

			and (
				select count(distinct winner.id) as winner
					from ballot as winner, score
				where winner.entry = entry.id
					and winner.panel   = panel.id
					and winner.forfeit = 0
					and winner.bye     = 0
					'.$winner_limit.'
					and score.ballot   = winner.id
					and score.tag      = "winloss"
					and (score.value   = 0 or score.value is null)
			) > (
				select count(distinct loser.id) as loser
					from ballot as loser, score
				where loser.entry = entry.id
					and loser.panel   = panel.id
					and loser.forfeit = 0
					and loser.bye     = 0
					'.$loser_limit.'
					and score.ballot  = loser.id
					and score.tag     = "winloss"
					and score.value   = 1
			)
        group by entry.id
        order by entry.code
	');

	$sth->execute($event->id);

	while( my ($entry_id, $losses) = $sth->fetchrow_array() ) {
		$entry_losses{$entry_id} = 0 unless $entry_losses{$entry_id};
		$entry_losses{$entry_id} += $losses;
	}

	my $ballot_bye_sth = $dbh->prepare('
		select entry.id, count(distinct panel.id) as losses
			from round, panel, entry, ballot
        where entry.event = ?
			and entry.id = ballot.entry
			and panel.id = ballot.panel
			and panel.round = round.id
			'.$limit .'

		and not exists (
			select round_setting.id
			from round_setting
			where round_setting.tag = "ignore_results"
			and round_setting.round = round.id
		)
	    and (
			ballot.forfeit = 1
			OR panel.bye = 1 AND exists (
				select score.id
					from score, ballot bany
				where bany.panel     = panel.id
					and score.ballot = bany.id
					and bany.entry != entry.id
					and score.tag    = "winloss"
					and score.value  = 1
			)
		)

        group by entry.id
        order by entry.code
	');

	$ballot_bye_sth->execute($event->id);

	while(
		my (
			$entry_id, $losses
		) = $ballot_bye_sth->fetchrow_array()
	) {
		$entry_losses{$entry_id} += $losses;
	}

	my $wsdc_byes = $event->setting("wsdc_bye_win_average");

	if ($wsdc_byes) {

		my %wsdc_bye_add = ();
		my $round_count;

		foreach my $other ($event->rounds) {

			next if $round && $round->name && ($other->name > $round->name);

			next if $other->type eq "elim";
			next if $other->type eq "final";
			$round_count++;
		}

		foreach my $entry_id ( keys %entry_losses ) {
			$wsdc_bye_add{$entry_id} = 0;
			$wsdc_bye_add{$entry_id} = 1
				if $entry_losses{$entry_id} > ($round_count / 2);
		}

		my $bye_sth = $dbh->prepare('
			select entry.id, count(distinct panel.id) as losses
				from round, panel, entry, ballot exist
			where entry.event = ?
				and entry.id = exist.entry
				and panel.id = exist.panel
				and panel.round = round.id

				and not exists (
					select round_setting.id
					from round_setting
					where round_setting.tag = "ignore_results"
					and round_setting.round = round.id )

				and panel.bye = 1
				and exist.bye < 1
				and exist.forfeit < 1
				'.$limit.'
				and (not exists (
					select score.id
					from score, ballot bany
					where score.tag = "winloss"
						and score.ballot = bany.id
						and score.value = 1
						and bany.panel = panel.id
				) or not exists (
					select opp.id
					from entry opp, ballot oppballot
					where opp.id != entry.id
					and opp.id = oppballot.entry
					and oppballot.panel = panel.id
				))
			group by entry.id
			order by entry.code
		');

		$bye_sth->execute($event->id);

		while(
			my (
				$entry_id, $losses
			) = $bye_sth->fetchrow_array()
		) {

			if ($wsdc_byes) {

				$entry_losses{$entry_id} += $wsdc_bye_add{$entry_id} * $losses;

			} else {

				$entry_losses{$entry_id} = 0 unless $entry_losses{$entry_id};
				$entry_losses{$entry_id} += $losses;

			}
		}

		my $ballot_bye_sth = $dbh->prepare('
			select entry.id, count(distinct panel.id) as losses
				from round, panel, entry, ballot
			where entry.event = ?
				and entry.id = ballot.entry
				and panel.id = ballot.panel
				and panel.round = round.id

				and not exists (
					select round_setting.id
					from round_setting
					where round_setting.tag = "ignore_results"
					and round_setting.round = round.id
				)

				'.$limit .'
				and ballot.bye = 1
				and ballot.forfeit = 1
			group by entry.id
			order by entry.code
		');

		$ballot_bye_sth->execute($event->id);

		while(
			my ($entry_id, $wins) = $ballot_bye_sth->fetchrow_array() ) {

			if ($wsdc_byes) {

				$entry_losses{$entry_id} += $wsdc_bye_add{$entry_id} * $wins;

			} else {
				$entry_losses{$entry_id} = 0 unless $entry_losses{$entry_id};
				$entry_losses{$entry_id} += $wins;
			}
		}
	}

	return %entry_losses;

</%init>
