<%args>
	$timeslot
	$site   => undef
	$flight => undef
	$limit  => undef
	$status => undef
	$event  => undef
	$audit  => undef
	$events => undef
</%args>
<%init>

	my $type = 'and score.tag = "point" ' if $audit eq "Points";
	$type = 'and score.tag = "rank" ' if $audit eq "Rank";

	my $audit_line = "and ballot.audit != 1 " if $audit ne "Points";
	my $flight_line = "and panel.flight = $flight " if $flight;
	my $site_line = "and round.site = ".$site->id if $site;

	$limit = "and round.event = ".$event->id if $event;

	Tab::Judge->columns(TEMP => "panelletter");
	Tab::Judge->columns(TEMP => "entrycode");
	Tab::Judge->columns(TEMP => "roomname");
	Tab::Judge->columns(TEMP => "eventabbr");
	Tab::Judge->columns(TEMP => "eventid");

	my $eventlimit;

    if ($events) {
        $eventlimit = " and event.id in (".
        my $notfirst;
        foreach my $eid (@{$events}) {
            if ($notfirst++) {
                $eventlimit .= ",";
            }
            $eventlimit .= $eid->id;
        }
        $eventlimit .= ")";
    }

	if ($status eq "half") {

		Tab::Judge->set_sql( half_by_timeslot => "
			select distinct judge.*,
				panel.id as panelid,
				event.type as eventtype,
				event.id as eventid,
				entry.code as entrycode,
				ballot.chair as chair,
				panel.letter as panelletter,
				room.name as roomname,
				event.abbr as eventabbr
			from (panel, round, ballot, judge, event, entry)
				left join room on panel.room = room.id
			where judge.id = ballot.judge
			and ballot.panel = panel.id
			and panel.round = round.id
			and round.timeslot = ?
			$eventlimit
			".$audit_line."
			".$flight_line."
			".$site_line."
			".$limit."
			and ballot.entry = entry.id
			and (entry.dropped = 0 or event.type = 'debate')
			and event.type != 'wudc'
			and round.event = event.id
			and (exists (
				select id from score
				where score.ballot = ballot.id
				and score.value is not null
				and score.value > 0
				and score.tag in ('point', 'rank', 'winloss')
				".$type."
			) or ballot.bye = 1 or ballot.forfeit = 1)
			group by panel.id, judge.id
			order by ballot.side, ballot.speakerorder,
				judge.code, judge.last,
				event.name, round.name, panel.letter
		");

		Tab::Judge->set_sql( wudc_half_by_timeslot => "
			select distinct judge.*, panel.id as panelid,
				room.name as roomname,
				event.abbr as eventabbr,
				event.id as eventid
			from (panel, round, ballot, judge, event, entry)
				left join room on panel.room = room.id
			where judge.id = ballot.judge
			and ballot.panel = panel.id
			and panel.round = round.id
			and round.timeslot = ?
			$eventlimit
			".$audit_line."
			".$flight_line."
			".$site_line."
			".$limit."
			and ballot.entry = entry.id
			and (entry.dropped = 0 or event.type = 'debate')
			and event.type = 'wudc'
			and round.event = event.id
			and ballot.chair = 1
			and exists (
				select id
				from score
				where score.ballot = ballot.id
				".$type."
			)
			group by panel.id
			order by ballot.side,ballot.speakerorder,
				judge.code, judge.last,
				event.name, round.name, panel.letter
		");

		return (
			Tab::Judge->search_half_by_timeslot($timeslot->id),
			Tab::Judge->search_wudc_half_by_timeslot($timeslot->id));

	} elsif ($status eq "full") {

		Tab::Judge->set_sql( full_by_timeslot => "
			select distinct judge.*,
				panel.id as panelid,
				ballot.id as ballbuster,
				event.type as eventtype,
				ballot.chair as chair,
				entry.code as entrycode,
				panel.letter as panelletter,
				room.name as roomname,
				event.abbr as eventabbr,
				event.id as eventid
			from (panel, round, ballot, judge, event, entry)
				left join room on panel.room = room.id
			where judge.id = ballot.judge
			and ballot.panel = panel.id
			and panel.round = round.id
			and round.timeslot = ?
			and event.type != 'wudc'
			and round.event = event.id
			$eventlimit
			".$audit_line."
			".$flight_line."
			".$site_line."
			".$limit."
			and ballot.entry = entry.id
			and ballot.bye != 1
			and ballot.forfeit != 1
			and (entry.dropped = 0 or event.type = 'debate')
			and not exists (
				select id from score
				where score.ballot = ballot.id
				and score.value is not null
				and score.tag in ('point', 'rank', 'winloss')
				".$type."
			)
			group by panel.id, judge.id
			order by ballot.side, ballot.speakerorder,
				judge.code, judge.last,
				event.name,
				round.name,
				panel.letter
		");

		Tab::Judge->set_sql( wudc_full_by_timeslot => "
			select distinct judge.*,
				panel.id as panelid,
				event.type as eventtype,
				event.id as eventid,
				ballot.chair as chair
			from panel, round, ballot, judge, event, entry
			where judge.id = ballot.judge
			and ballot.panel = panel.id
			and panel.round = round.id
			and round.timeslot = ?
			$eventlimit
			".$audit_line."
			".$flight_line."
			".$site_line."
			".$limit."
			and ballot.entry = entry.id
			and (entry.dropped = 0 or event.type = 'debate')
			and round.event = event.id
			and event.type = 'wudc'
			and ballot.chair = 1
			and not exists (
				select id from score where score.ballot = ballot.id
				".$type."
			)
			group by panel.id
			order by ballot.side,ballot.speakerorder,judge.code, judge.last, event.name, round.name, panel.letter
		");

		return (Tab::Judge->search_full_by_timeslot($timeslot->id),
			Tab::Judge->search_wudc_full_by_timeslot($timeslot->id));

	} elsif ($status eq "started") {

		Tab::Judge->set_sql( full_by_timeslot => "
			select distinct judge.*, panel.id as panelid, ballot.id as ballbuster,
				event.type as eventtype,
				event.id as eventid,
				ballot.chair as chair,
				panel.letter as panelletter,
				room.name as roomname,
				event.abbr as eventabbr
			from (panel, round, ballot, judge, event, entry)
				left join room on room.id = panel.room

			where judge.id = ballot.judge
			and ballot.panel = panel.id
			and ballot.judge_started is not null
			and ballot.judge_started > 0
			and panel.round = round.id
			and round.timeslot = ?
			and event.type != 'wudc'
			and round.event = event.id
			$eventlimit
			".$audit_line."
			".$flight_line."
			".$site_line."
			".$limit."
			and ballot.entry = entry.id
			and ballot.bye != 1
			and ballot.forfeit != 1
			and (entry.dropped = 0 or event.type = 'debate')
			and not exists (
				select id from score
				where score.ballot = ballot.id
				and score.value is not null
				and score.tag in ('point', 'rank', 'winloss')
				".$type."
			)
			group by panel.id, judge.id
			order by ballot.side,ballot.speakerorder,judge.code, judge.last, event.name, round.name, panel.letter
		");

		Tab::Judge->set_sql( wudc_full_by_timeslot => "
			select distinct judge.*, panel.id as panelid
			from panel, round, ballot, judge, event, entry
			where judge.id = ballot.judge
			and ballot.panel = panel.id
			and ballot.judge_started is not null
			and ballot.judge_started > 0
			and panel.round = round.id
			and round.timeslot = ?
			$eventlimit
			".$audit_line."
			".$flight_line."
			".$site_line."
			".$limit."
			and ballot.entry = entry.id
			and (entry.dropped = 0 or event.type = 'debate')
			and round.event = event.id
			and event.type = 'wudc'
			and ballot.chair = 1
			and not exists (
				select id from score where score.ballot = ballot.id
				".$type."
			)
			group by panel.id
			order by ballot.side,ballot.speakerorder,judge.code, judge.last, event.name, round.name, panel.letter
		");

		return (Tab::Judge->search_full_by_timeslot($timeslot->id),
			Tab::Judge->search_wudc_full_by_timeslot($timeslot->id));

	} elsif ($status eq "done") {

		Tab::Judge->set_sql( done_by_timeslot => "
			select distinct judge.*,
				event.type as eventtype,
				entry.code as entrycode,
				ballot.chair as chair,
				panel.letter as panelletter,
				room.name as roomname,
				event.abbr as eventabbr,
				event.id as eventid
			from (panel, round, ballot, judge, event, entry)
				left join room on panel.room = room.id
			where judge.id     = ballot.judge
			and ballot.panel   = panel.id
			and panel.round    = round.id
			and round.timeslot = ?
			and ballot.audit   = 1
			".$flight_line."
			".$site_line."
			".$limit."
			and ballot.entry   = entry.id
			and (entry.dropped = 0 or event.type = 'debate')
			and round.event    = event.id
			and event.type != 'wudc'
			group by panel.id, judge.id
			order by ballot.side, ballot.speakerorder,
				judge.code, judge.last,
				event.name, round.name,
				panel.letter
		");

		Tab::Judge->set_sql( wudc_done_by_timeslot => "
			select distinct judge.*
			from panel, round, ballot, judge, event, entry
			where judge.id = ballot.judge
			and ballot.panel = panel.id
			and panel.round = round.id
			and round.timeslot = ?
			and round.event = event.id
			and event.type = 'wudc'
			".$flight_line."
			".$site_line."
			".$limit."
			and ballot.audit = 1
			and ballot.entry = entry.id
			and (entry.dropped = 0 or event.type = 'debate')
			and ballot.chair = 1
			group by panel.id
			order by ballot.side,ballot.speakerorder,judge.code, judge.last, event.name, round.name, panel.letter
		");

		return (Tab::Judge->search_done_by_timeslot($timeslot->id),
				Tab::Judge->search_wudc_done_by_timeslot($timeslot->id)
			);

	} elsif ($status eq "unstarted") {

		Tab::Judge->set_sql( unstarted_by_timeslot => "
			select distinct judge.*, panel.flight as tier, panel.id as panelid,
				event.type as eventtype,
				ballot.chair as chair,
				panel.letter as panelletter,
				room.name as roomname,
				event.abbr as eventabbr,
				event.id as eventid
			from (panel, round, ballot, judge, event, entry)
				left join room on panel.room = room.id
			where judge.id = ballot.judge
			and ballot.panel = panel.id
			and panel.round = round.id
			and round.timeslot = ?
			".$flight_line."
			".$site_line."
			".$limit."
			and ballot.entry = entry.id
			and entry.dropped = 0
			and ballot.judge_started is not null
			and ballot.judge_started > 0
			and round.event = event.id
			and event.type != 'wudc'
			and ballot.audit = 0
			group by panel.id, judge.id
			order by ballot.side,ballot.speakerorder,judge.code, judge.last, event.name, round.name, panel.letter
		");

		Tab::Judge->set_sql( wudc_unstarted_by_timeslot => "
			select distinct judge.*
			from panel, round, ballot, judge, event, entry
			where judge.id = ballot.judge
			and ballot.panel = panel.id
			and panel.round = round.id
			and (ballot.judge_started is null OR and ballot.judge_started = 0)
			and round.timeslot = ?
			and round.event = event.id
			and event.type = 'wudc'
			".$flight_line."
			".$site_line."
			".$limit."
			and ballot.entry = entry.id
			and entry.dropped = 0
			and ballot.audit = 0
			and ballot.chair = 1
			group by panel.id
			order by ballot.side,ballot.speakerorder,judge.code, judge.last, event.name, round.name, panel.letter
		");

		return (Tab::Judge->search_unstarted_by_timeslot($timeslot->id),
			Tab::Judge->search_wudc_unstarted_by_timeslot($timeslot->id));

		} elsif ($status eq "unentered") {

			Tab::Judge->set_sql( unentered_by_timeslot => "
				select distinct judge.*, panel.flight as tier, panel.id as panelid,
					event.type as eventtype,
					entry.code as entrycode,
					ballot.chair as chair,
					panel.letter as panelletter,
					room.name as roomname,
					event.abbr as eventabbr,
					event.id as eventid
				from (panel, round, ballot, judge, event, entry)
				left join room on panel.room = room.id
				where judge.id = ballot.judge
				and ballot.panel = panel.id
				and panel.round = round.id
				and round.timeslot = ?
				".$site_line."
				".$limit."
				and ballot.entry = entry.id
				and entry.dropped != 1
				and round.event = event.id
				and event.type != 'wudc'
				and not exists (
					select score.id
					from score
					where score.ballot = ballot.id
					and score.tag in ('rank', 'winloss', 'point')
				)
				group by panel.id, judge.id
				order by ballot.side, ballot.speakerorder,
					judge.code, judge.last,
					event.name, round.name, panel.letter
			");

			Tab::Judge->set_sql( wudc_unentered_by_timeslot => "
				select distinct judge.*
				from panel, round, ballot, judge, event, entry
				where judge.id = ballot.judge
				and ballot.panel = panel.id
				and panel.round = round.id
				and round.timeslot = ?
				and round.event = event.id
				and event.type = 'wudc'
				".$flight_line."
				".$site_line."
				".$limit."
				and ballot.entry = entry.id
				and entry.dropped = 0
				and ballot.chair = 1
				and not exists (
					select score.id
					from score
					where score.ballot = ballot.id
					and score.tag in ('rank', 'winloss', 'point')
				)
				group by panel.id
				order by ballot.side, ballot.speakerorder,
					judge.code, judge.last,
					event.name,
					round.name, panel.letter
			");

			return (Tab::Judge->search_unentered_by_timeslot($timeslot->id),
				Tab::Judge->search_wudc_unentered_by_timeslot($timeslot->id));

	} else {

		Tab::Judge->set_sql( by_timeslot => "
			select distinct judge.*,
				ballot.audit as avg,
				event.type as eventtype,
				entry.code as entrycode,
				ballot.chair as chair,
				panel.letter as panelletter,
				room.name as roomname,
				event.abbr as eventabbr,
				event.id as eventid
			from (panel, round, judge, ballot, entry, event)
				left join room on room.id = panel.room
			where panel.round = round.id
			and round.timeslot = ?
			and panel.id = ballot.panel
			and round.event = event.id
			and ballot.judge = judge.id
			and ballot.entry = entry.id
			and (entry.dropped = 0 or event.type = 'debate')
			".$flight_line."
			".$site_line."
			".$limit."
			group by panel.id, judge.id
			order by ballot.side,ballot.speakerorder,event.name, round.name, judge.last, panel.letter
		");

		return Tab::Judge->search_by_timeslot($timeslot->id);
	}

</%init>

