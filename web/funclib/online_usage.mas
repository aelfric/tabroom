<%args>
	$round => undef
	$tourn => undef
	$debug => undef
</%args>
<%init>

	if ($r->hostname ne "www.tabroom.com") {
		return (1, 1);
	}

	my $dbh = Tab::DBI->db_Main();

	my $mode;
	my $hybrid;
	my $event;

	my $now = DateTime->now();
	my $pricing_setting = Tab::TabroomSetting->search(tag => 'pricing')->first;
	my $pricing = eval {
		return JSON::decode_json($pricing_setting->value_text);
	};

	if ($round) {

		$event = $round->event;
		$tourn = $event->tourn;

		my $online_mode = $event->setting('online_mode');
		$hybrid = $event->setting("online_hybrid");

		if (
			$online_mode eq "nsda_campus_observers"
			|| $online_mode eq "public_jitsi_observers"
		) {
			$mode = "observers";
		} elsif (
			$online_mode eq "nsda_campus"
			|| $online_mode eq "public_jitsi"
		) {
			$mode = "campus";
		} else {
			$mode = "tabroom";
		}
	}

	return unless $event;

	if ($debug) {
		$m->print("<p class='padleft'>Event ".$event->abbr." mode is $mode</p>");
	}

	if (
		$mode eq "observers"
		|| $mode eq "campus"
	) {

		my $timeslot = $round->timeslot();

		my $tag;
		my $purchase;
		my $limit;
		my $hybrid_limit;

		if ($debug) {
			$m->print("<h6>Checking Campus usage</h6>");
		}

		if ($mode eq "observers") {
			$tag = "nsda_campus_observer_days";
			$limit = "'nsda_campus_observers', 'public_jitsi_observers'";
			$purchase = "nco_purchased";
		} else {
			$tag = "nsda_campus_days";
			$limit = "'nsda_campus', 'public_jitsi'";
			$purchase = "nc_purchased";
		}

		if ($hybrid) {
			$hybrid_limit = "
				and exists (
					select ps.id
						from panel_setting ps
					where ps.tag = 'online_hybrid'
						and ps.panel = panel.id
				)
			";
		}

		my $sth = $dbh->prepare("

			select
				tourn.id,
				tourn.tz,
				oround.id, oround.name, oround.flighted, oround.event, oevent.abbr,
				oevent.type oevent_type,
				count(distinct panel.id),
				nc_purchased.value purchased,
				nsda_campus_days.value_text campus_days,
				campus_room_limit.value event_limit,
				online_hybrid.value hybrid,
				mock_trial_registration mock_trial

			from (
				round, timeslot, event,
				event_setting online_mode,
				tourn,
				timeslot otimeslot,
				event oevent,
				round oround,
				panel,
				event_setting oonline_mode
			)

			left join event_setting online_hybrid
				on online_hybrid.event = oevent.id
				and online_hybrid.tag = 'online_hybrid'

			left join event_setting campus_room_limit
				on campus_room_limit.event = oevent.id
				and campus_room_limit.tag = 'campus_room_limit'

			left join tourn_setting mock_trial_registration
				on mock_trial_registration.tourn = tourn.id
				and mock_trial_registration.tag = 'mock_trial_registration'

			left join tourn_setting nc_purchased
				on nc_purchased.tourn = tourn.id
				and nc_purchased.tag = '".$purchase."'

			left join tourn_setting nsda_campus_days
				on nsda_campus_days.tourn = tourn.id
				and nsda_campus_days.tag = '".$tag."'

			where round.id = ?
				and round.timeslot = timeslot.id
				and round.event = event.id

				and event.id = online_mode.event
				and online_mode.tag = 'online_mode'
				and online_mode.value in (".$limit.")

				and tourn.id = event.tourn

				and timeslot.start <= otimeslot.end
				and timeslot.start >= otimeslot.start

				and otimeslot.tourn = tourn.id

				and otimeslot.id = oround.timeslot
				and oround.event = oevent.id

				and oevent.id = oonline_mode.event
				and oonline_mode.tag = 'online_mode'
				and oonline_mode.value in (".$limit.")

				and oround.id = panel.round
				and panel.bye != 1

				and exists (
					select ballot.id
					from ballot
					where ballot.panel = panel.id
					and ballot.bye != 1
					and ballot.forfeit != 1
				)

				and not exists (
					select normal_rooms.id
					from round_setting normal_rooms
					where normal_rooms.tag = 'use_normal_rooms'
					and normal_rooms.round = round.id
				)

				and not exists (
					select normal_rooms.id
					from round_setting normal_rooms
					where normal_rooms.tag = 'use_normal_rooms'
					and normal_rooms.round = oround.id
				)

				$hybrid_limit

			group by oround.id
		");

		$sth->execute($round->id);

		my $id;
		my $tz;
		my $panel_count;
		my $total;
		my $campus_days;
		my $event_limit;

		my %round_count;
		my %used_event;
		my $rounds;
		my $round_string;

		while (
			my (
				$tid, $ttz,
				$rid, $rname, $flights, $revent, $abbr,
				$event_type,
				$pcount, $purchase, $daycounts, $event_lim,
				$hybrid, $mock_trial
			) = $sth->fetchrow_array()
		) {

			next if $used_event{$revent}++;

			unless ($id) {
				$id = $tid;
				$tz = $ttz;
				$total = $purchase;
				$campus_days = eval {
					return JSON::decode_json($daycounts);
				};
				$event_limit = $event_lim;
			}

			if ($flights > 1) {
				$pcount = POSIX::ceil($pcount / $flights);
			}

			if ($round_string) {
				$round_string .= "<br />";
			}

			$round_string .= "<span class='spacer'></span>Round $rname of $abbr: $pcount online sections";

			if ($event_lim
				&& $rid == $round->id
				&& $pcount > $event_lim
			) {

				my $message = "You are over your room limit for this event.  <br /><br />";
				$message .= " You are using $pcount NSDA Campus rooms and have <br /> ";
				$message .= " limited the event to $event_lim.<br /><br />";
				$message .= " Increase your allocations under Settings -> Event -> Online.<br />";

				if ($ARGS{"return"}) {
					return $message;
				}

				$m->comp("/funclib/abort.mas", message => $message);
			}

			$panel_count += $pcount;
			unless ($round_count{$rid}++) {
				$rounds .= " ".$abbr." ".$rname;
			}

		}

		$sth->finish();
		$tz = "UTC" unless $tz;

		if ((not defined $panel_count) && (not defined $hybrid)) {
			return (1, 1);
		}

		if ($debug) {
			$m->print("<p class='padleft'>I count $panel_count online sections at the start of this time slot</p>");
			$m->print("<p class='padleft'>$round_string</p>");
		}

		if ($id) {

			my $tourn = Tab::Tourn->retrieve($id);
			my %days = $m->comp("/funclib/campus_days.mas", tourn => $tourn,);

			my $day_key;
			my $start = $timeslot->start->set_time_zone("UTC");
			my $end = $timeslot->start->set_time_zone("UTC");

			$start->set_time_zone($tz);
			$end->set_time_zone($tz);

			foreach my $id (sort keys %days) {
				next if $start->epoch < $days{$id}{start}->epoch;
				next if $end->epoch > $days{$id}{end}->epoch;
				$day_key = $id;
				last;
			}

			my $day_total = $campus_days->{$day_key}{"count"};
			my $margin = $day_total - $panel_count;

			if ($debug) {
				$m->print("<p class='padleft'>I have $day_total campus rooms allocated today of type $tag</p>");
			}

			if ($panel_count > $day_total) {

				my $message = "You are over your daily room allocation for this timeslot.  <br /><br />";
				$message .= " You are using $panel_count NSDA Campus rooms and have <br /> ";
				$message .= " allocated $day_total to day $day_key <br /><br />";
				$message .= " Increase your allocations under Settings -> Sites & Rooms -> NSDA Campus, <br />";
				$message .= " or adjust your schedule to continue <br />";

				$message .= " Rounds: ".$rounds;

				if ($ARGS{"return"}) {
					return $message;
				}

				$m->comp("/funclib/abort.mas", message => $message);

			} elsif (not defined $hybrid) {

				if ($ARGS{"return"}) {
					return (1, $margin);
				}
			}
		}
	}

	if ($ARGS{'district'}) {
		if ($ARGS{"return"}) {
			return (1, 1);
		} else {
			return;
		}
	}

	# Check Tabroom licensing if we've gotten this far.

	my $hybrid_sql;

	if ($hybrid) {
		$hybrid_sql = "
			and not exists (
				select es.id
				from entry_setting es
				where es.entry = entry.id
				and es.tag = 'online_hybrid'
			)
		";
	}

	my $sth = $dbh->prepare("
		select
			count(distinct entry.id),
			tabroom_purchased.value,
			tabroom_grant.value

		from entry, event, tourn

			left join tourn_setting tabroom_purchased
				on tabroom_purchased.tourn = tourn.id
				and tabroom_purchased.tag = 'tabroom_purchased'

			left join tourn_setting tabroom_grant
				on tabroom_grant.tourn = tourn.id
				and tabroom_grant.tag = 'tabroom_grant'

			where tourn.id = ?
			and event.tourn = tourn.id
			and event.id = entry.event
			and entry.active = 1

			and exists (
				select ballot.id
					from ballot, panel, round
				where round.event       = event.id
					and round.id        = panel.round
					and panel.id        = ballot.panel
					and ballot.entry    = entry.id
					and ballot.bye     != 1
					and ballot.forfeit != 1
					and panel.bye      != 1
			)

			and not exists (
				select es.id
					from event_setting es
				where es.event = event.id
					and es.tag = 'online_mode'
					and es.value in (
						'public_jitsi_observers',
						'public_jitsi',
						'nsda_campus',
						'nsda_campus_observers'
					)
				)
			and not exists (
				select es.id
					from entry_setting es
				where es.entry = entry.id
					and es.tag = 'online_hybrid'
			)

			$hybrid_sql
	");

	$sth->execute($tourn);

	if ($debug) {
		$m->print("<h6>Checking Tabroom usage</h6>");
	}

	my ($count, $purchased, $grant) = $sth->fetchrow();

	if ($debug) {
		$m->print("<p class='padleft'>I have $count non-Campus entries</p>");
		$m->print("<p class='padleft'>I have purchased ".($purchased + $grant)." entries</p>");
	}

	my $mt_sth = $dbh->prepare('
		select
			tourn.id, mt.value mock_trial, event.id mt_event
		from tourn
			left join tourn_setting mt on mt.tourn = tourn.id and mt.tag = "mock_trial_registration"
			left join event on event.tourn = tourn.id and event.type = "mock_trial"
		where tourn.id = ?
	');

	$mt_sth->execute($tourn->id);
	my $results = $mt_sth->fetchall_hash();
	my $result = shift @{$results};

	if ($result->{mock_trial} || $result->{mt_event}) {
		undef $pricing->{'tabroom_free_threshold'};
	}

	if ($count > ($purchased + $grant + $pricing->{'tabroom_free_threshold'})) {

		my $total = $purchased + $grant + $pricing->{'tabroom_free_threshold'};

		my $need = Math::Round::nearest(5, ($count - $total));
		$need += 5 if $need < ($count - $total);

		my $message = "Your current Tabroom license only covers $total entries and you have $count ";
		$message .= " Please purchase $need more under Settings -> Tournament -> ";
		$message .= " Payment to continue. <br />";

		if ($ARGS{"return"}) {
			return $message;
		}

		$m->comp("/funclib/abort.mas", message => $message);

	} else {

		if ($ARGS{"return"}) {
			return (1, 1);
		} else {
			return;
		}
	}

	$sth->finish();

</%init>
