<%args>
	$round => undef
</%args>
<%init>

	return unless $round;

	my $event = $round->event;
	my $session_lock = $round->setting("session_lock");

	if ($session_lock eq "none") {

		return ($round);

	} elsif ($session_lock) {

		my @locks;

		my $first_lock = Tab::Round->retrieve($session_lock);

		unless ($first_lock > 0) {
			$round->setting("session_lock", 0);
			return ($round);
		}

		if ($first_lock && ($first_lock->event != $round->event)) {

			my $actual = $event->rounds(
				name => $first_lock->name
			)->first;

			if ($actual) {
				$round->setting("session_lock", $actual);
				$first_lock   = $actual;
				$session_lock = $actual->id;
			} else {
				$round->setting("session_lock", 0);
				undef $first_lock;
				undef $session_lock;
			}
		}

		if ($first_lock) {

			push @locks, $first_lock;

			Tab::Round->set_sql(session_lock => "
				select round.*
					from round, round_setting
				where round.event = ?
					and round.id = round_setting.round
					and round_setting.tag = 'session_lock'
					and round_setting.value = ?
			");

			push @locks, Tab::Round->search_session_lock($event->id, $first_lock);

			my @use;
			my %done;

			foreach my $lock (@locks) {
				next unless $lock;
				next unless $lock->id;
				next if $done{$lock->id}++;
				push @use, $lock;
			}

			if (@use) {
				@use = sort {$a->name cmp $b->name} @use;
			}

			return @use;

		} else {

			# Locked to an invalid round.  Remove the lock, and return just myself

			$round->setting("session_lock", 0);
			my @use = ($round);
			return @use;
		}

	} else {

		Tab::Round->set_sql(not_session_locked => "
			select round.* from round
			where round.event = ?
				and round.type = ?
				and round.id != ?
				and not exists (
					select round_setting.id
						from round_setting
					where round_setting.round = round.id
						and round_setting.tag = 'session_lock'
				)
		");

		my @locks = Tab::Round->search_not_session_locked($event->id, $round->type, $round->id);
		push @locks, $round;
		@locks = sort {$a->name cmp $b->name} @locks;
		return @locks;
	}

	return;

</%init>
