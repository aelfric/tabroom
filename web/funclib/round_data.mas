<%args>
	$round       => undef
	$round_id    => undef
	$timeslot    => undef
	$timeslot_id => undef
	$event       => undef
	$event_id    => undef
</%args>
<%init>

	my $limit;

	if ($round_id || $round) {

		$round = $round_id unless $round;
		$limit = " where round.id = ".int($round);

	} elsif ($timeslot_id || $timeslot) {

		$timeslot = $timeslot_id unless $timeslot;
		$limit = " where round.timeslot = ".int($timeslot);

	} elsif ($event_id || $event) {

		$event = $event_id unless $event;
		$limit = " where round.event = ".int($event);

	} else {
		return "No data delimiter sent.";
	}

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select
			round.id, round.name, round.label, round.flighted,
				CONVERT_TZ(round.start_time, '+00:00', tourn.tz),
			event.id, event.abbr, event.name, event.type,
			ev_online_hybrid.value,
			timeslot.id, timeslot.name,
				CONVERT_TZ(timeslot.start, '+00:00', tourn.tz),
				CONVERT_TZ(timeslot.end, '+00:00', tourn.tz),
			num_judges.value,
			panel.id, panel.letter, panel.bracket, panel.flight, panel.bye,
			online_hybrid.value,
			room.id, room.name, room.url, room.password, room.judge_url, room.judge_password, room.api,
			ballot.id, ballot.chair, ballot.side, ballot.speakerorder, ballot.audit,
			entry.id, entry.code, entry.name, entry.ada, entry.active,
			student.first, student.middle, student.last,
			judge.id, judge.code, judge.first, judge.last, judge.person, judge.ada

		from (round, event, timeslot, panel, ballot, tourn)

			left join entry on ballot.entry = entry.id
			left join entry_student es on es.entry = entry.id
			left join student on es.student = student.id

			left join judge on ballot.judge = judge.id
			left join room on panel.room = room.id

			left join event_setting ev_online_hybrid
				on ev_online_hybrid.tag = 'online_hybrid'
				and ev_online_hybrid.event = event.id

			left join round_setting num_judges
				on num_judges.tag = 'num_judges'
				and num_judges.round = round.id

			left join panel_setting online_hybrid
				on online_hybrid.tag = 'online_hybrid'
				and online_hybrid.panel = panel.id

		$limit
			and event.id = round.event
			and round.id = panel.round
			and panel.id = ballot.panel
			and round.timeslot = timeslot.id
			and event.tourn = tourn.id

		group by ballot.id
	");

	$sth->execute();

	my %rounds;
	my $name;

	while (

		my (
			$round_id, $round_number, $round_label, $round_flighted, $round_start,
			$event_id, $event_abbr, $event_name, $event_type,
			$ev_online,
			$timeslot_id, $timeslot_name, $timeslot_start, $timeslot_end,
			$num_judges,
			$panel_id, $panel_letter, $panel_bracket, $panel_flight, $panel_bye,
			$online_hybrid,
			$room_id, $room_name, $room_url, $room_password, $room_judge_url, $room_judge_password, $room_api,
			$ballot_id, $ballot_chair, $ballot_side, $ballot_speakerorder, $ballot_audit,
			$entry_id, $entry_code, $entry_name, $entry_ada, $entry_active,
			$student_first, $student_middle, $student_last,
			$judge_id, $judge_code, $judge_first, $judge_last, $judge_person, $judge_ada
		) = $sth->fetchrow_array()

	) {

		unless ($name) {
			if ($round_id || $round) {
				if ($round_label) {
					my $rname = $round_label;
					$rname =~ s/[\W_]//g;
					$name = $rname;
				} else {
					$name = "Rd".$round_number;
				}
			} elsif ($timeslot_id || $timeslot) {
				$timeslot_name =~ s/[\W_]//g;
				$name = "Timeslot-".$timeslot_name;
			} elsif ($event_id || $event) {
				$event_abbr =~ s/[\W_]//g;
				$name = $event_abbr;
			}
		}

		unless ($rounds{$round_id}{"name"}) {

			$rounds{$round_id}{"number"} = $round_number;
			$rounds{$round_id}{"event_online"} = $ev_online;

			if ($round_label) {
				$rounds{$round_id}{"name"} = $round_label;
			} else {
				$rounds{$round_id}{"name"} = "Round ".$round_number;
			}

			if ($round_flighted > 1) {
				$rounds{$round_id}{"flights"} = $round_flighted;
			}

			if ($round_start) {
				$rounds{$round_id}{"start"} = DateTime::Format::MySQL->parse_datetime($round_start);
			} else {
				$rounds{$round_id}{"start"} = DateTime::Format::MySQL->parse_datetime($timeslot_start);
			}

			$rounds{$round_id}{"event_id"}      = $event_id;
			$rounds{$round_id}{"event_abbr"}    = $event_abbr;
			$rounds{$round_id}{"event_type"}    = $event_type;
			$rounds{$round_id}{"event_name"}    = $event_name;
			$rounds{$round_id}{"timeslot_id"}   = $timeslot_id;
			$rounds{$round_id}{"timeslot_name"} = $timeslot_name;
		}

		unless ($rounds{$round_id}{"panels"}{$panel_id}) {

			$rounds{$round_id}{"panels"}{$panel_id}{"letter"}  = $panel_letter;
			$rounds{$round_id}{"panels"}{$panel_id}{"bracket"} = $panel_bracket;
			$rounds{$round_id}{"panels"}{$panel_id}{"bye"}     = $panel_bye;
			$rounds{$round_id}{"panels"}{$panel_id}{"flight"}  = $panel_flight;
			$rounds{$round_id}{"panels"}{$panel_id}{"online"}  = $online_hybrid;

			if ($room_id) {
				$rounds{$round_id}{"panels"}{$panel_id}{"room_id"}   = $room_id;
				$rounds{$round_id}{"panels"}{$panel_id}{"room_name"} = $room_name;
				$rounds{$round_id}{"panels"}{$panel_id}{"room_api"}  = $room_api;
			} else {
				$rounds{$round_id}{"panels"}{$panel_id}{"room_name"} = $event_abbr." ".$panel_letter;
			}

			$rounds{$round_id}{"panels"}{$panel_id}{"room_url"}            = $room_url;
			$rounds{$round_id}{"panels"}{$panel_id}{"room_judge_url"}      = $room_judge_url;
			$rounds{$round_id}{"panels"}{$panel_id}{"room_judge_password"} = $room_judge_password;
			$rounds{$round_id}{"panels"}{$panel_id}{"room_password"}       = $room_password;
		}

		unless ($rounds{$round_id}{"panels"}{$panel_id}{"entries"}{$entry_id}) {
			$rounds{$round_id}{"panels"}{$panel_id}{"entry_count"}++;
		}

		$rounds{$round_id}{"entry_list"}{$entry_id}{"code"}  = $entry_code;
		$rounds{$round_id}{"entry_list"}{$entry_id}{"name"}  = $entry_name;
		$rounds{$round_id}{"entry_list"}{$entry_id}{"first"} = $student_first;
		$rounds{$round_id}{"entry_list"}{$entry_id}{"last"}  = $student_last;

		$rounds{$round_id}{"panels"}{$panel_id}{"entries"}{$entry_id}{"code"} = $entry_code;
		$rounds{$round_id}{"panels"}{$panel_id}{"entries"}{$entry_id}{"name"} = $entry_name;

		if ($ballot_side) {

			$rounds{$round_id}{"panels"}{$panel_id}{"entries"}{$entry_id}{"side"} = $ballot_side;

			if ($ballot_side == 1) {
				$rounds{$round_id}{"panels"}{$panel_id}{"entries"}{$entry_id}{"side_name"} = "Aff";
			} elsif ($ballot_side == 2) {
				$rounds{$round_id}{"panels"}{$panel_id}{"entries"}{$entry_id}{"side_name"} = "Neg";
			}
		}

		if ($ballot_speakerorder) {
			$rounds{$round_id}{"panels"}{$panel_id}{"entries"}{$entry_id}{"order"} = $ballot_speakerorder;
		}

		unless ($ballot_audit || (not defined $entry_active)) {
			$rounds{$round_id}{"panels"}{$panel_id}{"not_done"}++;
		}

		unless ($rounds{$round_id}{"panels"}{$panel_id}{"judges"}{$entry_id}) {
			$rounds{$round_id}{"panels"}{$panel_id}{"judge_count"}++;
		}

		unless ($judge_person) {
			$rounds{$round_id}{"panels"}{$panel_id}{"judges"}{$judge_id}{"luddite"}++;
		}

		$rounds{$round_id}{"panels"}{$panel_id}{"judges"}{$judge_id}{"code"} = $judge_code;
		$rounds{$round_id}{"panels"}{$panel_id}{"judges"}{$judge_id}{"last_name"} = $judge_last;
		$rounds{$round_id}{"panels"}{$panel_id}{"judges"}{$judge_id}{"first_name"} = $judge_first;

		if ($entry_ada || $judge_ada) {
			$rounds{$round_id}{"panels"}{$panel_id}{"ada"} = 1;
		}
	}

	foreach my $id (keys %rounds) {

		foreach my $pid (keys %{$rounds{$id}{"panels"}}) {

			if ($rounds{$id}{"max_entries"} < $rounds{$id}{"panels"}{$pid}{"entry_count"}) {
				$rounds{$id}{"max_entries"} = $rounds{$id}{"panels"}{$pid}{"entry_count"};
			}

			if ($rounds{$id}{"max_judges"} < $rounds{$id}{"panels"}{$pid}{"judge_count"}) {
				$rounds{$id}{"max_judges"} = $rounds{$id}{"panels"}{$pid}{"judge_count"};
			}
		}
	}

	unless ($ARGS{"no_name"}) {
		$rounds{"name"} = $name;
	}

	$sth->finish();
	return %rounds;

</%init>
