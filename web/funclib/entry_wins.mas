<%args>
	$event    => undef
	$round    => undef
	$last     => undef
	$public   => undef
	$all      => undef
	$first_tb => undef
	$type     => undef
	$chair	  => "all"
</%args>
<%init>

	unless ($event) {
		if ($round) {
			$event = $round->event;
		} else {
			$m->comp("/funclib/abort.mas", message => "No event or round was sent to the win calculator");
		}
	}

	my $dbh = Tab::DBI->db_Main();
	my $limit;

	if ($last && $round > 0) {
		$limit  = " and round.name = ".$round->name
	} elsif ($round > 0) {
		$limit .= " and round.name <= ".$round->name." ";
	}

	if ($all) {

	} elsif ($last) {

	} elsif ($type eq "prelim") {
		$limit .= " and round.type in ('prelim', 'highlow', 'highhigh') ";
	} elsif ($type) {
		$limit  .= " and round.type = '$type'";
	} else {
		$limit .= ' and round.type != "elim" and round.type != "runoff" and round.type != "final" ' unless $all;
	}

	my $winner_limit;
	my $loser_limit;

	if ($chair eq "chair") {
		$winner_limit .= ' and winner.chair = 1 ';
		$loser_limit .= ' and loser.chair = 1 ';
	} elsif ($chair eq "nonchair") {
		$winner_limit .= ' and winner.chair != 1 ';
		$loser_limit .= ' and loser.chair != 1 ';
	}

	$limit .= " and round.post_primary >= ".int($public) if int($public) > 0;

	my $bye_limit .= " and panel.bye = 0"
		if $round
		&& $round->type ne "elim"
		&& $round->type ne "runoff"
		&& $round->type ne "final";

	my $sth = $dbh->prepare("
	    select ballot.entry entry,
			round.id round, round.name round_name,
			panel.id panel, panel.bye panel_bye,
			ballot.judge, ballot.id ballot, ballot.bye ballot_bye, ballot.forfeit,
			score.id score, score.tag, score.value win,
			rr.value rr

		from (round, panel, entry, ballot)

			left join score on ballot.id = score.ballot
				and score.tag = 'winloss'

			left join event_setting rr on rr.event = round.event and rr.tag = 'round_robin'

        where entry.event = ?
			and entry.id = ballot.entry
			and panel.id = ballot.panel
			and panel.round = round.id

			and not exists (
				select round_setting.id from round_setting
					where round_setting.tag = 'ignore_results'
					and round_setting.round = round.id
			)

			".$limit ."
			".$bye_limit ."

		order by entry.id, round.name
	");

	$sth->execute($event);

	my $results = $sth->fetchall_hash();

	my %entries;
	my %bye_count;
	my $rr;

	foreach my $result (@{$results}) {

		$rr = 1 if $result->{'rr'};

		if (not defined $bye_count{$result->{entry}}) {
			$bye_count{$result->{entry}} = 0;
		}

		if ($result->{"panel_bye"} || $result->{"ballot_bye"}) {

			$entries{$result->{entry}}{rounds}{$result->{round}}{"bye"}++;
			$bye_count{$result->{entry}}++;

		} elsif ($result->{"forfeit"}) {

			$entries{$result->{entry}}{rounds}{$result->{round}}{"fft"}++;

		} else {
			if ($result->{"win"}) {
				$entries{$result->{entry}}{rounds}{$result->{round}}{"win"}++;
			} else {
				$entries{$result->{entry}}{rounds}{$result->{round}}{"loss"}++;
			}
		}
	}

	my $min_byes;
	my %rounds;
	my %entry_wins = ();

	if ($rr) {
		foreach my $entry (keys %entries) {
			if (not defined $min_byes || ($bye_count{$entry} < $min_byes)) {
				$min_byes = $bye_count{$entry};
			}
		}
	}

	my %done_byes;

	foreach my $entry (keys %entries) {

		foreach my $round (keys %{$entries{$entry}{rounds}}) {

			next if $entries{$entry}{rounds}{$round}{"fft"};

			if ($entries{$entry}{rounds}{$round}{"bye"} && $first_tb) {
				next;
			}

			if ($entries{$entry}{rounds}{$round}{"bye"} && ($done_byes{$entry} < $min_byes)) {
				$done_byes{$entry}++;
				next;
			}

			if ($first_tb) {
				$entry_wins{$entry} += $entries{$entry}{rounds}{$round}{"win"};
			} elsif (
				($entries{$entry}{rounds}{$round}{"win"} > $entries{$entry}{rounds}{$round}{"loss"})
				|| $entries{$entry}{rounds}{$round}{"bye"}
			) {
				$entry_wins{$entry}++;
			}

			my $total = ($entries{$entry}{rounds}{$round}{"win"} + $entries{$entry}{rounds}{$round}{"loss"});

			if ($entry == 4119107) {
				Tab::debuglog("Round $round ballot total is $total with wins ".$entry_wins{$entry});
				Tab::debuglog("Wins ".$entries{$entry}{rounds}{$round}{"win"}." and losses ".$entries{$entry}{rounds}{$round}{"loss"});
			}

			if ($total > $rounds{$round}) {
				$rounds{$round} = $total;
			}
		}
	}

	if ($first_tb) {
		foreach my $entry (keys %entries) {
			foreach my $round (keys %{$entries{$entry}{rounds}}) {
				if ($entries{$entry}{rounds}{$round}{"bye"}) {
					$entry_wins{$entry} += $rounds{$round};
				}
			}
		}
	}

	return %entry_wins;

</%init>
