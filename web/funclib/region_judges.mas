<%args>
	$region
	$jpool       => undef
	$tourn       => undef
	$alt         => undef
	$category    => undef
	$elim        => undef
	$covers      => undef
	$ratings     => undef
	$prelim_pool => undef
</%args>
<%init>

	Tab::Judge->columns(TEMP => qw/prelimpool/);

	if ($category && $category->setting("tab_room")) {

		Tab::Judge->set_sql(by_region_and_category => "
			select distinct judge.*
				from judge, school
			where judge.school = school.id
				and school.region = ?
				and judge.category = ?
			group by judge.id
			order by judge.code
		");

		return Tab::Judge->search_by_region_and_category($region->id, $category->id);

	} elsif ($category && $covers) {

		Tab::Judge->set_sql(covers_by_region_and_category => "
			select distinct judge.*, group_concat(distinct rating.id, rating_tier.name) as avg
				from (judge, school)
				left join rating on rating.judge = judge.id
				left join rating_tier on rating_tier.id = rating.rating_tier
			where judge.school = school.id
				and school.region = ?
				and judge.covers = ?
				and judge.id = rating.judge
				and rating.rating_tier = rating_tier.id
			group by judge.id
			order by judge.code
		");

		return Tab::Judge->search_covers_by_region_and_category($region->id, $category->id);

	} elsif ($category && $alt) {

		Tab::Judge->set_sql(alt_by_region_and_category => "
			select distinct judge.*, group_concat(distinct rating.id, rating_tier.name) as avg
				from (judge, school)
				left join rating on rating.judge = judge.id
				left join rating_tier on rating_tier.id = rating.rating_tier
			where judge.school = school.id
				and school.region = ?
				and judge.alt_category = ?
			group by judge.id
			order by judge.code
		");

		return Tab::Judge->search_alt_by_region_and_category($region->id, $category->id);

	} elsif ($category) {

		Tab::Judge->set_sql(by_region_and_category => "
			select distinct judge.*, group_concat(distinct rating.id, rating_tier.name) as avg
				from (judge, school)
				left join rating on rating.judge = judge.id
				left join rating_tier on rating_tier.id = rating.rating_tier
			where judge.school = school.id
				and school.region = ?
				and judge.category = ?
			group by judge.id
			order by judge.code
		");

		return Tab::Judge->search_by_region_and_category($region->id, $category->id);

	} elsif ($jpool) {

		Tab::Judge->set_sql(by_region_and_jpool => "
			select distinct judge.*, group_concat(distinct rating.id, rating_tier.name) as avg
				from (judge, school, jpool_judge)
				left join rating on rating.judge = judge.id
				left join rating_tier on rating_tier.id = rating.rating_tier
			where judge.school = school.id
				and school.region = ?
				and jpool_judge.judge = judge.id
				and jpool_judge.jpool = ?
				and judge.id = rating.judge
				and rating.rating_tier = rating_tier.id
			group by judge.id
			order by judge.code
		");

		return Tab::Judge->search_by_region_and_jpool($region->id, $jpool->id);

	} elsif ($elim) {

		Tab::Judge->set_sql(by_region_and_elim => "
			select distinct judge.*, group_concat(distinct rating.id, rating_tier.name) as avg
				from (judge, school, category)
				left join rating on rating.judge = judge.id
				left join rating_tier on rating_tier.id = rating.rating_tier
			where judge.school = school.id
				and school.region = ?
				and school.tourn = ?
				and judge.category = category.id
				and category.abbr != 'OBS'
				and not exists (
					select jpool_judge.id
					from jpool_judge, jpool
					where jpool_judge.jpool = jpool.id
					and jpool.category != ?
					and jpool_judge.judge = judge.id

					and exists (select jpool_setting.id
						from jpool_setting
						where jpool_setting.jpool = jpool.id
						and jpool_setting.tag = 'registrant'
					)

					and not exists (select jpool_setting.id
						from jpool_setting
						where jpool_setting.jpool = jpool.id
						and jpool_setting.tag = 'event_based'
					)
				)
			group by judge.id
			order by judge.code
		");

		return Tab::Judge->search_by_region_and_elim($region->id, $tourn->id, $elim->id);

	} elsif ($tourn && $ratings) {

		Tab::Judge->set_sql(by_region_and_tourn => "
			select distinct judge.*,
				group_concat(distinct rating.id, rating_tier.name) as avg,
				region.name as regname,
				region.code as regcode,
				school.name as schoolname

			from (judge, school, region)
				left join rating on rating.judge = judge.id
				left join rating_tier on rating_tier.id = rating.rating_tier
			where judge.school = school.id
				and school.region = region.id
				and region.id = ?
				and school.tourn = ?
			group by judge.id
			order by judge.code
		");

		return Tab::Judge->search_by_region_and_tourn($region->id, $tourn->id);

	} elsif ($tourn && $prelim_pool) {

		Tab::Judge->set_sql(by_region_and_tourn => "
			select distinct judge.*,
				region.name as regname,
				region.code as regcode,
				school.name as schoolname,
				prelim.value as prelimpool
			from (judge, school, region)
			left join judge_setting prelim
				on prelim.judge = judge.id
				and prelim.tag = 'prelim_jpool_name'
			where judge.school = school.id
			and school.region = region.id
			and region.id = ?
			and school.tourn = ?
			group by judge.id
			order by judge.code
		");

		return Tab::Judge->search_by_region_and_tourn($region->id, $tourn->id);

	} elsif ($tourn) {

		Tab::Judge->set_sql(by_region_and_tourn => "
			select distinct judge.*,
				region.name as regname,
				region.code as regcode,
				school.name as schoolname
			from judge, school, region
			where judge.school = school.id
			and school.region = region.id
			and region.id = ?
			and school.tourn = ?
			group by judge.id
			order by judge.code
		");

		return Tab::Judge->search_by_region_and_tourn($region->id, $tourn->id);

	}


</%init>

