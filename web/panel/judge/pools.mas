<%args>
	$tourn
	$perms
	$defaults    => undef
	$session     => undef
	$category_id => undef
	$jpool_id    => undef
	$nats        => undef
	$pull_jpool  => undef
</%args>
<%init>

	my ($eventref, $catref) = $m->comp(
		"/funclib/allowed_events.mas",
		tourn     => $tourn,
		perms     => $perms,
		type      => "admin",
		newschool => 'yasskween'
	);

	unless ($catref) {
		$m->comp("/funclib/abort.mas",
			message => "The system found no categories that you have full access to"
		);
	}

	my $dbh = Tab::DBI->db_Main();
	my $category;

	foreach my $cat (sort {$a <=> $b} keys %{$catref}) {
		if ($cat == $category_id) {
			$category = $cat;
		}
	}

	if (not defined $category) {
		foreach my $cat_id (sort {$a <=> $b} keys %{$catref}) {
			if ($cat_id == $defaults->{category}) {
				$category = $cat_id;
			}
		}
	}

	if ($nats &&  (not defined $category)) {
		foreach my $cat (sort {$a <=> $b} keys %{$catref}) {
			if ($catref->{$cat}{"nats_category"}) {
				$category = $cat;
			}
		}
	}

	if (not defined $category) {
		foreach my $cat (sort {$a <=> $b} keys %{$catref}) {
			$category = $cat;
			last;
		}
	}

	my $limit;

	unless ($ARGS{'pull_standby'}) {
		if ($ARGS{'standby'}) {
			$limit = 'and EXISTS (
				select jps.id
					from jpool_setting jps
				where jps.tag = "standby"
					and jps.jpool = jpool.id
			)';
		} else {
			$limit = 'and NOT EXISTS (
				select jps.id
					from jpool_setting jps
				where jps.tag = "standby"
					and jps.jpool = jpool.id
			)';
		}
	}

	my %jpools;
	my %parents;
	my $parent;
	my $jpool;

	if ($jpool_id) {
		$jpool = Tab::JPool->retrieve($jpool_id);
	}

	my $pull;

	if ($pull_jpool) {
		$pull = Tab::JPool->retrieve($pull_jpool);;
	}

	if ($ARGS{"nsda_nats"}
		&& $category
		&& $catref->{$category}{"nats_category"}
		&! $ARGS{"pull_standby"}
	) {

		if ($jpool) {

			if ($pull && $pull->parent) {
				$parent = $pull->parent;
				$ARGS{"parent"} = $parent;
				$defaults->{"parent"} = int($parent);
			} elsif ($jpool->parent) {
				$parent = $jpool->parent;
				$ARGS{"parent"} = $parent;
				$defaults->{"parent"} = int($parent);
			} else {
				delete $defaults->{"parent"};
				delete $ARGS{"parent"};
			}

			$session->default($defaults);
			$session->update();

		} elsif ($ARGS{"parent"} eq "0") {

			delete $defaults->{"parent"};
			$session->default($defaults);
			$session->update();

		} elsif ($ARGS{"parent"} eq int($ARGS{"parent"})) {

			$defaults->{"parent"} = $ARGS{'parent'};
			$parent = Tab::JPool->retrieve($defaults->{"parent"});
			$session->default($defaults);
			$session->update();

		} else {
			$parent = Tab::JPool->retrieve($defaults->{"parent"});
		}

		unless ($perms->{"owner"} || $perms->{"tabber"}) {
			$m->comp("/funclib/abort.mas",
				message => "Only full tournament admins may access judge pooling functions"
			);
		}

		my $sth = $dbh->prepare("
			select jpool.id, jpool.name, jpool.site, jpool.parent,
				count(distinct jpj.judge) as judgecount
			from (jpool, jpool child)
				left join jpool_judge jpj on jpj.jpool = jpool.id

			where jpool.category = ?
				and child.parent = jpool.id
				$limit
			group by jpool.id
			order by jpool.name
		");

		$sth->execute($category);
		my $results = $sth->fetchall_hash();

		# Neither parents nor children but registrants
		$sth = $dbh->prepare("
			select jpool.id, jpool.name, jpool.site, jpool.parent,
				count(distinct jpj.judge) as judgecount
			from (jpool, jpool_setting registrant)
				left join jpool_judge jpj on jpj.jpool = jpool.id
			where jpool.category = ?
	            and not exists (
					select child.id from jpool child where child.parent = jpool.id
				)
				and (jpool.parent = 0 OR jpool.parent IS NULL)
				and registrant.jpool = jpool.id
				and registrant.tag = 'registrant'
				$limit
			group by jpool.id
			order by jpool.name
		");

		$sth->execute($category);

		my $registered = $sth->fetchall_hash();
		push @{$results}, @{$registered};

		%parents = map {$_->{id} => $_} @{$results};

		# Apparently I am super inconsistent about plurals.
		if ($ARGS{"parent"} eq "orphan" || $ARGS{"parent"} eq "orphans") {

			$sth = $dbh->prepare("
				select jpool.id, jpool.name, jpool.site, jpool.parent,
					count(distinct jpj.judge) as judgecount
				from (jpool)
					left join jpool_judge jpj on jpj.jpool = jpool.id
				where jpool.category = ?
				and not exists (
					select jps.id
						from jpool_setting jps
					where jps.jpool = jpool.id
						and jps.tag = 'registrant'
				)

				and (jpool.parent = 0 or jpool.parent is NULL)
				$limit
				group by jpool.id
				order by jpool.name
			");

			$sth->execute($category);
			my $results = $sth->fetchall_hash();
			%jpools = map {$_->{id} => $_} @{$results};

		} elsif ($parent) {

			$sth = $dbh->prepare("
				select jpool.id, jpool.name, jpool.site, jpool.parent,
					count(distinct jpj.judge) as judgecount
				from (jpool)
					left join jpool_judge jpj on jpj.jpool = jpool.id

				where jpool.category = ?
				and jpool.parent = ?

				and not exists (
					select jps.id
					from jpool_setting jps
					where jps.jpool = jpool.id
					and jps.tag = 'registrant'
				)
				$limit

				group by jpool.id
				order by jpool.name
			");

			foreach my $cand (keys %parents) {
				if ($ARGS{"parent"} == $cand) {
					$parent = $cand;
				}
			}
			$sth->execute($category, $parent);

			my $results = $sth->fetchall_hash();
			%jpools = map {$_->{id} => $_} @{$results};

		} else {
			%jpools = %parents;
		}

	} elsif ($category) {

		my $sth = $dbh->prepare("
			select jpool.id, jpool.name, jpool.site, jpool.parent,
				count(distinct jpj.judge) as judgecount
			from (jpool)
				left join jpool_judge jpj on jpj.jpool = jpool.id

			where jpool.category = ?
			$limit
			group by jpool.id
			order by jpool.name
		");

		$sth->execute($category);
		my $results = $sth->fetchall_hash();
		%jpools = map {$_->{id} => $_} @{$results};
	}

	if ($jpool && $jpool->category != $category) {
		$category = $jpool->category->id;
	}

	my $jpool_settings = ();

	if ($category) {
		$jpool_settings = $m->comp(
			"/funclib/jpool_settings.mas",
			category => $category
		);

		$category = Tab::Category->retrieve($category);
	}

	if (
		$defaults
		&& $category > 0
		&& $defaults->{category} ne $category
	) {
		$defaults->{category} = $category->id;
	}

	$session->default($defaults);
	$session->update();

	return ($category, $catref, $jpool, \%jpools, $jpool_settings, $parent, \%parents, $defaults);

</%init>
