<%args>
	$tourn
	$perms
	$defaults    => undef
	$session     => undef
	$category_id => undef
	$jpool_id    => undef
	$nats        => undef
	$pull_jpool  => undef
</%args>
<%init>

	my ($events, $categories) = $m->comp(
		"/funclib/allowed_events.mas",
		tourn     => $tourn,
		perms     => $perms,
		newschool => 'yasskween'
	);

	unless ($categories) {
		$m->comp("/funclib/abort.mas",
			message => "The system found no categories that you have full access to"
		);
	}

	my $dbh = Tab::DBI->db_Main();
	my $category;

	foreach my $cat (sort {$a <=> $b} keys %{$categories}) {
		if ($cat == $category_id) {
			$category = $cat;
		}
	}

	if (
		(not defined $category)
		&& $categories->{$defaults->{category}}
	) {
		$category = int($defaults->{category});
	}

	if ($nats &&  (not defined $category)) {
		foreach my $cat (sort {$a <=> $b} keys %{$categories}) {
			if ($categories->{$cat}{"nats_category"}) {
				$category = $cat;
			}
		}
	}

	if (not defined $category) {
		foreach my $cat (sort {$a <=> $b} keys %{$categories}) {
			$category = $cat;
			last;
		}
	}

	my $limit;

	unless ($ARGS{'pull_standby'}) {
		if ($ARGS{'standby'}) {
			$limit = 'and EXISTS (
				select jps.id
					from jpool_setting jps
				where jps.tag = "standby"
					and jps.jpool = jpool.id
			)';
		} else {
			$limit = 'and NOT EXISTS (
				select jps.id
					from jpool_setting jps
				where jps.tag = "standby"
					and jps.jpool = jpool.id
			)';
		}
	}

	my %jpools;
	my %parents;
	my $parent;
	my $jpool;

	if ($jpool_id) {
		$jpool = Tab::JPool->retrieve($jpool_id);
	}

	my $pull;

	if ($pull_jpool) {
		$pull = Tab::JPool->retrieve($pull_jpool);;
	}

	if ($ARGS{"nsda_nats"}
		&& $category
		&& $categories->{$category}{"nats_category"}
		&! $ARGS{"pull_standby"}
	) {

		if ($jpool) {

			if ($pull && $pull->parent) {
				$parent = $pull->parent;
				$ARGS{"parent"} = $parent;
				$defaults->{"parent"} = int($parent);
			} elsif ($jpool->parent) {
				$parent = $jpool->parent;
				$ARGS{"parent"} = $parent;
				$defaults->{"parent"} = int($parent);
			} else {
				delete $defaults->{"parent"};
				delete $ARGS{"parent"};
			}

			$session->default($defaults);
			$session->update();

		} elsif ($ARGS{"parent"} eq "0") {

			delete $defaults->{"parent"};
			$session->default($defaults);
			$session->update();

		} elsif ($ARGS{"parent"} eq int($ARGS{"parent"})) {

			$defaults->{"parent"} = $ARGS{'parent'};
			$parent = Tab::JPool->retrieve($defaults->{"parent"});
			$session->default($defaults);
			$session->update();

		} else {
			$parent = Tab::JPool->retrieve($defaults->{"parent"});
		}


		my $sth = $dbh->prepare("
			select jpool.id, jpool.name, jpool.site, jpool.parent,
				count(distinct jpj.judge) as judgecount,
				site.name as site_name
			from (jpool, jpool child)
				left join jpool_judge jpj on jpj.jpool = jpool.id
				left join site on jpool.site = site.id

			where jpool.category = ?
				and child.parent = jpool.id
				$limit
			group by jpool.id
			order by jpool.name
		");

		$sth->execute($category);
		my $results = $sth->fetchall_hash();

		# Neither parents nor children but registrants
		$sth = $dbh->prepare("
			select jpool.id, jpool.name, jpool.site, jpool.parent,
				count(distinct jpj.judge) as judgecount,
				site.name as site_name
			from (jpool, jpool_setting registrant)
				left join jpool_judge jpj on jpj.jpool = jpool.id
				left join site on jpool.site = site.id
			where jpool.category = ?
	            and not exists (
					select child.id from jpool child where child.parent = jpool.id
				)
				and (jpool.parent = 0 OR jpool.parent IS NULL)
				and registrant.jpool = jpool.id
				and registrant.tag = 'registrant'
				$limit
			group by jpool.id
			order by jpool.name
		");

		$sth->execute($category);

		my $registered = $sth->fetchall_hash();
		push @{$results}, @{$registered};

		%parents = map {$_->{id} => $_} @{$results};

		# Apparently I am super inconsistent about plurals.
		if ($ARGS{"parent"} eq "orphan" || $ARGS{"parent"} eq "orphans") {

			$sth = $dbh->prepare("
				select jpool.id, jpool.name, jpool.site, jpool.parent,
					count(distinct jpj.judge) as judgecount,
					site.name as site_name
				from (jpool)
					left join jpool_judge jpj on jpj.jpool = jpool.id
					left join site on jpool.site = site.id
				where jpool.category = ?
				and not exists (
					select jps.id
						from jpool_setting jps
					where jps.jpool = jpool.id
						and jps.tag = 'registrant'
				)

				and (jpool.parent = 0 or jpool.parent is NULL)
				$limit
				group by jpool.id
				order by jpool.name
			");

			$sth->execute($category);
			my $results = $sth->fetchall_hash();
			%jpools = map {$_->{id} => $_} @{$results};

		} elsif ($parent) {

			$sth = $dbh->prepare("
				select jpool.id, jpool.name, jpool.site, jpool.parent,
					count(distinct jpj.judge) as judgecount,
					site.name as site_name
				from (jpool)
					left join site on jpool.site = site.id
					left join jpool_judge jpj on jpj.jpool = jpool.id

				where jpool.category = ?
				and jpool.parent = ?

				and not exists (
					select jps.id
					from jpool_setting jps
					where jps.jpool = jpool.id
					and jps.tag = 'registrant'
				)
				$limit

				group by jpool.id
				order by jpool.name
			");

			foreach my $cand (keys %parents) {
				if ($ARGS{"parent"} == $cand) {
					$parent = $cand;
				}
			}
			$sth->execute($category, $parent);

			my $results = $sth->fetchall_hash();
			%jpools = map {$_->{id} => $_} @{$results};

		} else {
			%jpools = %parents;
		}

	} elsif ($category) {

		my $sth = $dbh->prepare("
			select jpool.id, jpool.name, jpool.site, jpool.parent,
				count(distinct jpj.judge) as judgecount,
				site.name as site_name
			from (jpool)
				left join jpool_judge jpj on jpj.jpool = jpool.id
				left join site on jpool.site = site.id

			where jpool.category = ?
			$limit
			group by jpool.id
			order by jpool.name
		");

		$sth->execute($category);
		my $results = $sth->fetchall_hash();
		%jpools = map {$_->{id} => $_} @{$results};
	}

	if ($jpool && $jpool->category != $category) {
		$category = $jpool->category;
	}

	my $new = $m->comp("/funclib/settings.mas",
		source => \%jpools,
		model  => "jpool"
	);

	%jpools = %{$new};

	$new = $m->comp("/funclib/settings.mas",
		source => \%parents,
		model  => "jpool"
	);
	%parents = %{$new};

	if (
		$defaults
		&& $category > 0
		&& $defaults->{category} ne $category
	) {
		$defaults->{category} = $category;
	}

	my $category_obj = Tab::Category->retrieve($category);

	$session->default($defaults);
	$session->update();

	return {
		category   => $category_obj,
		categories => $categories,
		jpool      => $jpool,
		jpools     => \%jpools,
		parent     => $parent,
		parents    => \%parents,
		defaults   => $defaults,
		events     => $events,
	};


</%init>
