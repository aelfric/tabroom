<%args>
	$round   => undef
	$panel   => undef
	$debug   => undef
	$message => undef
	$only    => undef
</%args>
<%init>

	$message = substr($message, 0, 50);

	$round = $panel->round unless $round;
	my $event = $round->event;
	my $tourn = $event->tourn;
	my $from_string = $tourn->name."<".$tourn->webname.'@www.tabroom.com>';

	my $ncfl = $tourn->setting("ncfl");

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $start = $round->start_time;
	$start = $round->timeslot->start unless $start;
	$start->set_time_zone($tz);

	my %event_settings = $event->all_settings();

	if ($round->setting("use_normal_room")) {
		$event_settings{'online_mode'} = "sync";
	}

	my %flight_start;
	my $flight_offset = $event_settings{"flight_offset"};
	my $prep_offset = $event_settings{"prep_offset"};
	my $draw_start;

	if ($prep_offset) {
		$draw_start = $start->clone();
		$draw_start->subtract(minutes => $prep_offset);
	}

	my $online_mode = $event_settings{"online_mode"};

	my $flighted = $round->flighted;
	$flighted = 1 unless $flighted;

	foreach my $flight (1 .. $flighted) {

		my $temp_start = $start->clone;

		$flight_start{$flight} = $temp_start if $flight == 1;
		next if $flight == 1;

		$temp_start->add( minutes => $flight_offset * ($flight - 1) );
		$flight_start{$flight} = $temp_start;
	}

	my @panels;
	my @entries;
	my @judges;
	my @ballots;

	Tab::Panel->columns(TEMP => "roomname");
	Tab::Panel->columns(TEMP => "room_url");
	Tab::Panel->columns(TEMP => "online_hybrid");
	Tab::Panel->columns(TEMP => "eventabbr");

	unless ($panel) {

		Tab::Panel->set_sql( schemat => "
			select panel.*,
				room.name as roomname,
				room.url as roomurl,
				event.abbr as eventabbr,
				online_hybrid.value as online_hybrid

			from panel

				left join room on panel.room = room.id
				left join round on panel.round = round.id
				left join event on round.event = event.id

				left join panel_setting online_hybrid
					on online_hybrid.tag = 'online_hybrid'
					and online_hybrid.panel = panel.id

			where panel.round = ?
			order by panel.letter
		");

		@panels = Tab::Panel->search_schemat($round->id);

		@entries = $m->comp("/funclib/round_entries.mas", round => $round);
		@judges = $m->comp("/funclib/round_judges.mas", round => $round);
		@ballots = $m->comp("/funclib/round_ballots.mas", round => $round);

	} else {

		@panels = ($panel);

		@entries = $m->comp("/funclib/panel_entries.mas", panel => $panel);
		@judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);
		@ballots = $panel->ballots;

		$panel->eventabbr($panel->round->event->abbr);
		$panel->roomname($panel->room->name) if $panel->room;

	}

	my %entries_by_panel = ();

	foreach my $entry (@entries) {
		next unless $entry->active;
		push (@{$entries_by_panel{$entry->panelid}}, $entry);
		push @{$entries_by_panel{$panel->id}}, $entry if $panel;
	}

	my %ballots_by_entry = ();
	my %panel_undone = ();

	foreach my $ballot (@ballots) {
		push (@{$ballots_by_entry{$ballot->entry->id}}, $ballot) if $ballot->entry;
		$panel_undone{$ballot->panel->id}++ unless $ballot->audit;
	}

	my %judges_by_panel = ();

	foreach my $judge (@judges) {
		push (@{$judges_by_panel{$judge->panelid}}, $judge);
		push @{$judges_by_panel{$panel->id}}, $judge if $panel;
	}

	unless ($panel) {
		@panels = sort {$a->roomname cmp $b->roomname} @panels;
		@panels = sort {$panel_undone{$b->id} <=> $panel_undone{$a->id}} @panels;
	}

	foreach my $panel (@panels) {

		my $flight = $panel->flight;
		$flight = 1 unless $flight;
		my $panel_start = $flight_start{$panel->flight};

		unless ($only eq "judges") {

			foreach my $pc (@{$entries_by_panel{$panel->id}}) {

				my $own_txt .= $pc->code." competing in ".$panel->eventabbr." ".$round->label."\n";

				$own_txt .= " Judges: ";

				foreach my $judge (@{$judges_by_panel{$panel->id}}) {
					$own_txt .= $judge->last.",".substr($judge->first,0,1)." - " unless $ncfl;
					$own_txt .= $judge->code." - " if $ncfl;
				}

				my $map_txt;
				$own_txt .= "\n";
				$own_txt .= " Flight ".$panel->flight." \n" if $flighted > 1;

				if ($online_mode eq "async") {
					$own_txt .= " Room: Asychronous. Log into Tabroom for video links \n";
				} elsif (
					$online_mode
					&& $online_mode ne "sync"
					&& (not defined $event_settings{"online_hybrid"})
				) {
					$own_txt .= " Room: Online. Log into Tabroom for meeting link \n";
				} else {
					$own_txt .= " Room ".$panel->roomname."\n" if $panel->roomname;
					if ($panel->room_url) {
						$map_txt = "\n Map: ".$panel->room_url;
					}
					if ($panel->online_hybrid) {
						$own_txt .= " HYBRID ROUND: Some particpants online \n";
					}
				}

				$own_txt .= " Draw: ".Tab::shorttime($draw_start)."\n" if $draw_start;
				$own_txt .= " Start: ".Tab::shorttime($panel_start)."\n";
				$own_txt .= "\n\n$message" if $message;

				if ($ARGS{"followers"}) {
					foreach my $follower ($m->comp("/funclib/entry_follower.mas", entry => $pc)) {
						$m->comp( "/funclib/send_notify.mas",
							from    => $from_string,
							to      => $follower,
							subject => $round->label." ".$pc->code,
							body    => $own_txt
						);
					}
				} else {
					foreach my $student ($pc->students) {
						if ($student->person) {
							$m->comp( "/funclib/send_notify.mas",
								from    => $from_string,
								to      => $student->person,
								subject => $round->label." ".$pc->code,
								body    => $own_txt
							);
						}
					}
				}
			}
		}

		unless ($only eq "entries") {

			foreach my $judge (@{$judges_by_panel{$panel->id}}) {

				my $own_txt = $judge->last." judging ".$panel->eventabbr." ".$round->label."\n" unless $ncfl;
				$own_txt = $judge->code." judging ".$panel->eventabbr." ".$round->label."\n" if $ncfl;

				my $map_txt;

				if ($online_mode eq "async") {
					$own_txt .= " Room: Asychronous \n";
				} elsif ($online_mode && $online_mode ne "sync") {
					$own_txt .= " Room: Online. Log into Tabroom for meeting link \n";
				} else {
					$own_txt .= " in ".$panel->roomname."\n" if $panel->room;
					if ($panel->room_url) {
						$map_txt = "\n Map: ".$panel->room_url;
					}
				}

				foreach my $pc (@{$entries_by_panel{$panel->id}}) {
					$own_txt .= $pc->code." ";
				}

				$own_txt .= " Flight ".$panel->flight." \n" if $flighted > 1;
				$own_txt .= " Start: ".Tab::shorttime($panel_start);
				$own_txt .= "\n$message" if $message;


				my $subject = $round->label." ".$judge->last;
				$subject = $round->label." ".$judge->code if $ncfl;

				foreach my $follower ($m->comp("/funclib/judge_follower.mas", judge => $judge, email => 1)) {

					$m->comp( "/funclib/send_notify.mas",
						from    => 'Tabroom.com <live@www.tabroom.com>',
						to      => $follower,
						subject => $subject,
						body    => $own_txt.$map_txt
					);
				}

				foreach my $follower ($m->comp("/funclib/judge_follower.mas", judge => $judge, phone => 1)) {

					$m->comp( "/funclib/send_notify.mas",
						from    => 'Tabroom.com <live@www.tabroom.com>',
						to      => $follower,
						subject => $subject,
						body    => $own_txt
					);

				}
			}
		}

	}

</%init>
