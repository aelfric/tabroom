<%args>
	$tourn
	$event
	$tourn_settings
	$round   => undef
	$panel   => undef
	$message => undef
	$only    => undef
	$motion  => undef
	$flight  => undef
</%args>
<%init>

	$message = substr($message, 0, 50);

	if ($round) {
		my $now = DateTime->now();
		$round->setting("blasted", "date", $now);
	}

	$round = $panel->round if $panel;
	my %event_settings = $event->all_settings();

	my $aff_string = $event_settings{"aff_label"};
	my $neg_string = $event_settings{"neg_label"};

	if ($round->setting("use_normal_room")) {
		$event_settings{'online_mode'} = "sync";
	}

	my $include_room_notes = $round->setting("include_room_notes");

	$aff_string = "Pro" unless $aff_string;
	$neg_string = "Def" unless $neg_string;

	my $nosides++ if $event_settings{"no_side_constraints"};

	my $sidelocks++ if (
		$round->type eq "elim"
		|| $round->type eq "final"
		|| $round->type eq "runoff"
	) && not defined $nosides;

	if ($event_settings{"sidelock_elims"}) {
		undef $sidelocks;
		undef $nosides;
	}

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $start = $round->start_time;
	$start = $round->timeslot->start unless $start;
	$start->set_time_zone($tz);

	my %flight_start;
	my $flight_offset = $event_settings{"flight_offset"};

	my $flighted = $round->flighted;
	$flighted = 1 unless $flighted;

	foreach my $flight (1 .. $flighted) {

		my $temp_start = $start->clone;

		if ($flight == 1) {
			$flight_start{$flight} = $m->comp(
				"/funclib/showtime.mas",
					return => 1,
					length => "short",
					dt     => $temp_start
			);
		}

		next if $flight == 1;

		$temp_start->add( minutes => $flight_offset * ($flight - 1) );

		$flight_start{$flight} = $m->comp(
			"/funclib/showtime.mas",
				return => 1,
				length => "short",
				dt     => $temp_start
		);
	}

	my $dbh = Tab::DBI->db_Main();

	my $limit;

	if ($panel) {
		$limit = "and panel.id = ".$panel->id;
	} elsif ($flight && $flight == int($flight)) {
		$limit .= " and panel.flight = ".$flight;
	}

	my $sth = $dbh->prepare("
		select
			panel.id, panel.letter, panel.flight, panel.bye,
				online_hybrid.value,
				flip_at.value_date,
				flip_status.value,
				flip_winner.value,
			ballot.entry, ballot.side,
			entry.code, student.last, pentry.pronoun,
			judge.id, judge.code, judge.first, judge.last, pjudge.pronoun, pjudge.id,
			room.name, room.notes, room.url

		from (panel, entry, ballot)

			left join entry_student es on entry.id = es.entry
			left join student on student.id = es.student
			left join person pentry on student.person = pentry.id

			left join room on panel.room = room.id

			left join judge on ballot.judge = judge.id
			left join person pjudge on judge.person = pjudge.id

			left join panel_setting online_hybrid
				on online_hybrid.panel = panel.id
				and online_hybrid.tag = 'online_hybrid'

			left join panel_setting flip_at
				on flip_at.panel = panel.id
				and flip_at.tag = 'flip_at'

			left join panel_setting flip_status
				on flip_status.panel = panel.id
				and flip_status.tag = 'flip_status'

			left join panel_setting flip_winner
				on flip_winner.panel = panel.id
				and flip_winner.tag = 'flip_winner'
				and flip_winner.value = entry.id

		where panel.round = ?
			and panel.id = ballot.panel
			and ballot.entry = entry.id
			$limit
		group by es.id, ballot.id
	");

	$sth->execute($round->id);

	my %panels;
	my %dt_cache;

	while (
		my (
			$panel_id, $panel_letter, $panel_flight, $panel_bye,
			$panel_hybrid,
				$flip_at,
				$flip_status,
				$flip_winner,
			$entry_id, $ballot_side,
			$entry_code, $student_last, $pentry_pronouns,
			$judge_id, $judge_code, $judge_first, $judge_last,
			$pjudge_pronouns, $pjudge_id,
			$room_name, $room_notes, $room_url
		)  = $sth->fetchrow_array()
	) {

		$panels{$panel_id}{"entries"}{$ballot_side} = $entry_code;

		$panels{$panel_id}{"room"}        = $room_name;
		$panels{$panel_id}{"room_notes"}  = $room_notes;
		$panels{$panel_id}{"room_url"}    = $room_url;
		$panels{$panel_id}{"bye"}         = $panel_bye;
		$panels{$panel_id}{"flight"}      = $panel_flight;
		$panels{$panel_id}{"letter"}      = $panel_letter;
		$panels{$panel_id}{"hybrid"}      = $panel_hybrid;
		$panels{$panel_id}{"flight"}      = 1 unless $panel_flight;
		$panels{$panel_id}{"flip_status"} = $flip_status;

		if ($flip_winner == $entry_id) {

			$panels{$panel_id}{"flip_winner"} = $entry_code;

			unless ($dt_cache{$flip_at}) {

				$dt_cache{$flip_at} = $m->comp("/funclib/showtime.mas",
					string      => $flip_at,
					tz          => $tz,
					length      => "day",
					return      => 1
				);

				$dt_cache{$flip_at} = "Deadline at ".$dt_cache{$flip_at};
			}

			$panels{$panel_id}{"flip_deadline"} = $dt_cache{$flip_at};

		} else {
			$panels{$panel_id}{"flip_loser"} = $entry_code;
		}
	}

	my %locked_panels;

	if ($sidelocks) {

		my $locked_sth = $dbh->prepare("

			select panel.id
				from (
					panel, round r1, round r2,
					ballot r1b1, ballot r1b2,
					panel p2, ballot r2b1, ballot r2b2
				)

			where r1.id = ?
				and panel.round = r1.id

				and panel.id = r1b1.panel
				and panel.id = r1b2.panel
				and r1b2.entry  != r1b1.entry

				and r2.id  != r1.id
				and r2.name < r1.name

				and r2.event   = r1.event
				and p2.round   = r2.id
				and p2.id      = r2b1.panel
				and p2.id      = r2b2.panel
				and r2b2.entry = r1b2.entry
				and r2b1.entry = r1b1.entry

				and r2b2.entry  != r2b1.entry
		");

		$locked_sth->execute($round->id);

		while (
			my ($panel_id) = $locked_sth->fetchrow_array()
		) {
			$locked_panels{$panel_id}++;
		}
	}

	my %recipients = $m->comp(
		"/funclib/round_blast.mas",
			round        => $round,
			no_followers => $ARGS{"no_followers"},
			panel        => $panel,
			mt           => 1,
			only         => $only
	);

	my %school_emails;

	PANEL:
	foreach my $panel_id (keys %panels) {

		unless (
			$recipients{"in"}{$panel_id} || $recipients{"school"}{$panel_id}
		) {
			next PANEL;
		}

		my $panel_text;
		my $map_text;

		if ($panels{$panel_id}{"bye"}) {

			my $notfirst;
			foreach my $side (keys %{$panels{$panel_id}{"entries"}}) {
				$panel_text .= " vs. " if $notfirst++;
				$panel_text .= $panels{$panel_id}{"entries"}{$side};
			}

			$panel_text .= " BYE ";

		} else {

			if ($nosides || ($sidelocks && (not defined $locked_panels{$panel_id}))  ) {

				my $notfirst;
				foreach my $side (keys %{$panels{$panel_id}{"entries"}}) {
					$panel_text .= " vs. " if $notfirst++;
					$panel_text .= $panels{$panel_id}{"entries"}{$side};
				}
				$panel_text .= " (Flip) \n";

			} else {
				my $notfirst;
				foreach my $side (sort keys %{$panels{$panel_id}{"entries"}}) {
					$panel_text .= " vs. " if $notfirst++;
					if ($side == 1) {
						$panel_text .= $aff_string." ";
					} elsif ($side == 2) {
						$panel_text .= $neg_string." ";
					}
					$panel_text .= $panels{$panel_id}{"entries"}{$side};
				}

				if ($locked_panels{$panel_id}) {
					$panel_text .= "\nSide locked\n";
				}
				$panel_text .= "\n";
			}


			if ($event_settings{show_panel_letters}) {
				$panel_text .= " Trial #".$panels{$panel_id}{"letter"}."\n";
			}

			if ($flighted > 1) {
				$panel_text .= " Flt ".$panels{$panel_id}{"flight"};
			}

			$panel_text .= " Start ".$flight_start{$panels{$panel_id}{"flight"}}."\n";

			if ($event_settings{"online_mode"} eq "async") {
				$panel_text .= " Courtroom: Asychronous \n";
			} elsif (
				$event_settings{"online_mode"}
				&& $event_settings{"online_mode"} ne "sync"
				&& (not defined $event_settings{"online_hybrid"})
			) {
				$panel_text .= " Courtroom: Online. Log into Tabroom for meeting link\n";
			} else {
				$panel_text .= " Courtroom: ".$panels{$panel_id}{"room"}." \n";
				if ($panels{$panel_id}{"room_url"}) {
					$map_text = "Map: ".$panels{$panel_id}{"room_url"};
				}

				if ($panels{$panel_id}{"hybrid"}) {
					$panel_text .= " HYBRID ROUND: Some particpants online \n";
				}
			}

			if ($include_room_notes) {
				$panel_text .= $panels{$panel_id}{"room_notes"}."\n";
			}

			if ($message) {
				$panel_text .= " Message: ".$message."\n";
			}
		}

		foreach my $code (keys %{$recipients{"in"}{$panel_id}}) {

			my @followers = keys %{$recipients{"in"}{$panel_id}{$code}{phone}};

			$m->comp( "/funclib/send_notify.mas",
				from    => 'Tabroom.com <blasts@www.tabroom.com>',
				array   => \@followers,
				subject => $round->realname,
				body    => $panel_text
			);

   			@followers = keys %{$recipients{"in"}{$panel_id}{$code}{email}};

			$m->comp( "/funclib/send_notify.mas",
				from    => 'Tabroom.com <blasts@www.tabroom.com>',
				array   => \@followers,
				subject => $round->realname,
				body    => $panel_text." ".$map_text
			);
		}

		foreach my $code (keys %{$recipients{"school"}{$panel_id}}) {
			foreach my $email (keys %{$recipients{"school"}{$panel_id}{$code}{email}}) {
				$school_emails{$email} .= "$code:\n";
				$school_emails{$email} .= "$panel_text\n\n";
			}
		}
	}

	foreach my $email (keys %school_emails) {
		$m->comp( "/funclib/send_notify.mas",
			from    => 'Tabroom.com <live@www.tabroom.com>',
			to      => $email,
			subject => $round->realname,
			body    => $school_emails{$email}
		);
	}

	return $recipients{"counter"}." individuals sent pairings from this section";

</%init>
