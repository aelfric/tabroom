<%args>
	$round
</%args>
<%init>

	return unless $round;
	my $round_name = $round->name;

	use Math::Round;

	my $event = $round->event;
	my %record_count = ();

	my $previous_round;

	if ($round_name > 1) {

		Tab::Round->set_sql(previous => "
			select round.*
			from round
			where round.name < ?
			and round.event = ?
			and not exists (
				select rs.id
					from round_setting rs
				where rs.round = round.id
					and rs.tag = 'ignore_results'
			)
			order by round.name DESC limit 1
		");

		$previous_round = Tab::Round->search_previous($round_name, $event->id)->first;
	}

	if ($previous_round) {

		my %records = $m->comp(
			"/funclib/entry_wins.mas",
			round => $previous_round,
			event => $event
		);

		my $dbh = Tab::DBI->db_Main();

		my $sth = $dbh->prepare("
			select
				panel.id, panel.letter, panel.bracket, entry.id

			from panel, ballot, entry
			where panel.round = ?
				and panel.id = ballot.panel
				and ballot.entry = entry.id
			group by entry.id
			order by panel.bracket DESC, panel.letter, panel.id
		");

		$sth->execute($round->id);

		my %brackets;

		while (
			my (
				$panel_id, $panel_letter, $bracket, $entry_id
			) = $sth->fetchrow_array()
		) {
			$brackets{$bracket}{$panel_id}{$entry_id}++;
		}

		foreach my $bracket (sort {$b <=> $a} keys %brackets) {

			my $counter;
			my $record = $bracket;

			foreach my $panel_id (keys %{$brackets{$bracket}}) {

				my $diff;

				foreach my $entry_id (keys %{$brackets{$bracket}{$panel_id}}) {

					$counter++;

					if (defined $record) {

						if ($record != $records{$entry_id}) {
							$diff++;
							$record = $records{$entry_id} if $record < $records{$entry_id};
						}

					} else {
						$record = $records{$entry_id};
						$record = 0 unless $record;
					}
				}

				if ($diff) {

					# The pullup could win so they'll both end up at this record.
					$record_count{$record}{"max"} += 2;

					# Or the pullup loses in which case one ends up below and
					# another above this record.
					$record_count{($record + 1)}{"max"}++;
					$record_count{($record - 1)}{"max"}++;

					$record_count{($record + 1)}{"total"} += .5;
					$record_count{$record}{"total"}++;
					$record_count{($record - 1)}{"total"} += .5;

				} else {

					# One must win and stay on this record;
					# one must lose and have a record above
					$record_count{$record}{"max"}++;
					$record_count{$record}{"min"}++;
					$record_count{$record}{"total"}++;

					$record_count{($record + 1)}{"min"}++;
					$record_count{($record + 1)}{"max"}++;
					$record_count{($record + 1)}{"total"}++;
				}
			}
		}

	} else {

		my @entries = $event->entries( active => 1);

		my $half = scalar (@entries) / 2;

		foreach my $record (0 .. 1) {
			$record_count{$record}{"min"} = POSIX::floor($half);
			$record_count{$record}{"max"} = POSIX::ceil($half);
			$record_count{$record}{"total"} = scalar @entries;
		}
	}

	my $prelim_count;
	my $max_name;
	my %ok_round;
	my %round_count;

	foreach my $round (sort {$a->name <=> $b->name} $event->rounds() ) {
		next if $round->setting("ignore_results");
		next if $round->type eq "elim";
		next if $round->type eq "final";
		next if $round->type eq "runoff";
		$prelim_count++;

		$round->name($prelim_count);

		if ($round->name > $max_name) {
			$max_name = $round->name;
		}
		$ok_round{$round->name} = $round;
		$round_count{$round->name} = $prelim_count;
	}

	my %pascal_rounds;

	foreach my $key (sort keys %record_count) {
		$pascal_rounds{$round_count{$round->name}}{$key} = $record_count{$key}{"max"};
	}

	if ($max_name > $round->name) {

		# Count excludes practice rounds
		foreach my $coming_round (($round->name + 1).. $prelim_count) {

			my $record = $coming_round;

			foreach my $record (reverse (0 .. $coming_round))  {
				$pascal_rounds{$coming_round}{$record} =
					( $pascal_rounds{($coming_round - 1)}{$record} * .5)
					+ ( $pascal_rounds{($coming_round - 1)}{($record - 1)} * .5);
			}
		}
	}

</%init>

	<div class='sidenote'>

		<h6 class="martop bluetext semibold">
			Records after <% $round->realname %>
		</h6>

		<div class="liblrow smallish semibold flexrow nospace">
			<span class="fifth padleft">
				Record
			</span>

			<span class="nospace fourfifths flexrow">
				<span class="third centeralign nospace">
					Min
				</span>

				<span class="third centeralign nospace">
					Max
				</span>

				<span class="third centeralign nospace">
					&amp; above
				</span>
			</span>
		</div>

<%perl>

		my $max_running_total;
		my $min_running_total;

		foreach my $record (
			sort {$b <=> $a}
			keys %record_count
		) {

			my $tr = $record + 1;
			my $switch;
			my $diff;

			while ($record_count{$tr}{"max"}) {
				if ($switch++ % 2) {
					$diff -= $record_count{$tr}{"max"} - $record_count{$tr}{"min"};
				} else {
					$diff += $record_count{$tr}{"max"} - $record_count{$tr}{"min"};
				}
				$tr++;
			}

			$diff = 0 if $diff < 0;

			$min_running_total += $record_count{$record}{"min"};
			$min_running_total += $diff;

			$max_running_total += $record_count{$record}{"max"};
			$max_running_total -= $diff;

</%perl>
			<div class="row flexrow">
				<span class="fifth semibold centeralign bluetext nospace">
					<% $record %>-<% $round_count{$round->name} - $record %>
				</span>

				<span class="fourfifths flexrow">
					<span class="third centeralign nospace">
						<% $record_count{$record}{"min"} %>
					</span>

					<span class="third centeralign nospace">
						<% $record_count{$record}{"max"} %>
					</span>

					<span class="third centeralign nospace">
%						if ($min_running_total == $max_running_total) {
							<% $max_running_total %>
%						} else {
							<span class="twofifths rightalign nospace">
								<% $min_running_total %>
							</span>
							<span class="tenth centeralign nospace">
								&ndash;
							</span>
							<span class="twofifths leftalign nospace">
								<% $max_running_total %>
							</span>
%						}
					</span>
				</span>
			</div>

%		}

%		if ($prelim_count > $round_count{$round->name}) {

			<h6 class="martop bluetext semibold">
				After round <% $prelim_count %>
			</h6>

			<div class="liblrow smallish semibold nospace flexrow padvertless">
				<span class="third centeralign nospace">
					Record
				</span>

				<span class="nospace third centeralign">
					Approx
				</span>

				<span class="nospace third centeralign">
					&amp; Up
				</span>
			</div>
<%perl>
			my $running_total;

			foreach my $record (
				sort {$b <=> $a}
				keys %{$pascal_rounds{$prelim_count}}
			) {

				$running_total += $pascal_rounds{$prelim_count}{$record};
</%perl>

				<div class="row flexrow">
					<span class="third semibold centeralign bluetext nospace">
						<% $record %>-<% $prelim_count - $record %>
					</span>

					<span class="nospace thirds centeralign">
						<% nearest(1, $pascal_rounds{$prelim_count}{$record}) %>
					</span>

					<span class="nospace thirds centeralign">
						<% nearest(1, $running_total) %>
					</span>
				</div>

%			}
%		}

	</div>
