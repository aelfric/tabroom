<%args>
	$tourn
	$event
	$tourn_settings
	$round   => undef
	$panel   => undef
	$message => undef
	$only    => undef
	$motion  => undef
	$flight  => undef
</%args>
<%init>

	if ($round) {
		my $now = DateTime->now();
		$round->setting("blasted", "date", $now);
	}

	$round = $panel->round if $panel;
	my %event_settings = $event->all_settings();

	my $ncfl       = $tourn_settings->{"ncfl"};
	my $nsda       = $tourn_settings->{"nsda_nats"};

	if ($round->setting("use_normal_room")) {
		$event_settings{'online_mode'} = "sync";
	}

	my $include_room_notes = $round->setting("include_room_notes");

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $start = $round->start_time;
	$start = $round->timeslot->start unless $start;
	$start->set_time_zone($tz);

	my %flight_start;
	my $flight_offset = $event_settings{"flight_offset"};

	my $flighted = $round->flighted;
	$flighted = 1 unless $flighted;

	foreach my $flight (1 .. $flighted) {

		my $temp_start = $start->clone;

		if ($flight == 1) {
			$flight_start{$flight} = $m->comp(
				"/funclib/showtime.mas",
					return => 1,
					length => "short",
					dt     => $temp_start
			);
		}

		next if $flight == 1;

		$temp_start->add( minutes => $flight_offset * ($flight - 1) );

		$flight_start{$flight} = $m->comp(
			"/funclib/showtime.mas",
				return => 1,
				length => "short",
				dt     => $temp_start
		);
	}

	my $dbh = Tab::DBI->db_Main();

	my $limit;

	if ($panel) {
		$limit = "and panel.id = ".$panel->id;
	} elsif ($flight && $flight == int($flight)) {
		$limit .= " and panel.flight = ".$flight;
	}

	my $sth = $dbh->prepare("
		select
			panel.id, panel.letter, panel.flight, panel.bye,
				online_hybrid.value hybrid,
			ballot.entry, ballot.speakerorder,
			entry.code, student.last, pentry.pronoun,
			ballot.chair,
			judge.id, judge.code, judge.first, judge.last,
			pjudge.pronoun, pjudge.id,
			room.name, room.notes, room.url

		from (panel, entry, ballot)

			left join entry_student es on entry.id = es.entry
			left join student on student.id = es.student
			left join person pentry on student.person = pentry.id

			left join room on panel.room = room.id

			left join judge on ballot.judge = judge.id
			left join person pjudge on judge.person = pjudge.id

			left join panel_setting online_hybrid
				on online_hybrid.panel = panel.id
				and online_hybrid.tag = 'online_hybrid'

		where panel.round = ?
			and panel.id = ballot.panel
			and ballot.entry = entry.id
			$limit
		group by es.id, ballot.id
	");

	$sth->execute($round->id);

	my %panels;
	my %dt_cache;

	while (
		my (
			$panel_id, $panel_letter, $panel_flight, $panel_bye,
			$panel_hybrid,
			$entry_id, $ballot_order,
			$entry_code, $student_last, $pentry_pronouns,
			$judge_chair,
			$judge_id, $judge_code, $judge_first, $judge_last,
			$pjudge_pronouns, $pjudge_id,
			$room_name, $room_notes, $room_url
		)  = $sth->fetchrow_array()
	) {

		unless ($judge_id == $ARGS{skip_judge}) {

			my $judge_string;

			if ($ncfl && $judge_code) {
				$judge_string = $judge_code;
			} else {
				$judge_string = $judge_last.", ".$judge_first;
			}

			if ($judge_chair) {
				if ($event->type eq "congress") {
					$judge_string .= "(P)";
				} else {
					$judge_string .= "(P)";
				}
			}

			$panels{$panel_id}{"judges"}{$judge_string}++;
		}

		$panels{$panel_id}{"entries"}{$ballot_order} = $entry_code;

		$panels{$panel_id}{"room"}        = $room_name;
		$panels{$panel_id}{"room_notes"}  = $room_notes;
		$panels{$panel_id}{"room_url"}    = $room_url;
		$panels{$panel_id}{"bye"}         = $panel_bye;
		$panels{$panel_id}{"flight"}      = $panel_flight;
		$panels{$panel_id}{"letter"}      = $panel_letter;
		$panels{$panel_id}{"hybrid"}      = $panel_hybrid;
		$panels{$panel_id}{"flight"}      = 1 unless $panel_flight;

		unless ($ncfl) {

			if ($pentry_pronouns) {
				my $string = $entry_code." ".$student_last." pronouns: ".$pentry_pronouns;
				$panels{$panel_id}{"pnoun"}{$string}++;
			}

			if ($pjudge_pronouns) {
				my $string = "Judge ".$judge_last." pronouns: ".$pjudge_pronouns;
				$panels{$panel_id}{"pnoun"}{$string}++;
			}
		}
	}

	my %recipients = $m->comp(
		"/funclib/round_blast.mas",
			round        => $round,
			panel        => $panel,
			ncfl         => $ncfl,
			no_followers => $ARGS{"no_followers"},
			only         => $only

	);

	my %school_emails;

	PANEL:
	foreach my $panel_id (keys %panels) {

		unless (
			$recipients{"in"}{$panel_id} || $recipients{"school"}{$panel_id}
		) {
			next PANEL;
		}

		my $panel_text;
		my $map_text;

		$panel_text .= "Judging:\n";
		foreach my $judge (keys %{$panels{$panel_id}{"judges"}}) {
			next if $judge eq $ARGS{skip_judge};
			$panel_text .= $judge."\n";
		}

		$panel_text .= $event->abbr;
		if ($event_settings{show_panel_letters}) {
			$panel_text .= " Section #".$panels{$panel_id}{"letter"}."\n";
		}

		if ($flighted > 1) {
			$panel_text .= " Flt ".$panels{$panel_id}{"flight"};
		}

		$panel_text .= " Start ".$flight_start{$panels{$panel_id}{"flight"}}."\n";

		if ($event_settings{"online_mode"} eq "async") {
			$panel_text .= " Room: Asychronous \n";
		} elsif (
			$event_settings{"online_mode"}
			&& $event_settings{"online_mode"} ne "sync"
			&& (not defined $event_settings{"online_hybrid"})
		) {
			$panel_text .= " Room: Online. Log into Tabroom for meeting link\n";
		} else {
			$panel_text .= " Room: ".$panels{$panel_id}{"room"}." \n";
			if ($panels{$panel_id}{"room_url"}) {
				$map_text = "Map: ".$panels{$panel_id}{"room_url"};
			}

			if ($panels{$panel_id}{"hybrid"}) {
				$panel_text .= " HYBRID ROUND: Some particpants online \n";
			}
		}

		if ($include_room_notes) {
			$panel_text .= $panels{$panel_id}{"room_notes"}."\n";
		}

		if ($message) {
			$panel_text .= " Message: ".$message."\n";
		}

		my $notfirst;
		foreach my $order (keys %{$panels{$panel_id}{"entries"}}) {
			$panel_text .= ", " if $notfirst++;
			$panel_text .= $panels{$panel_id}{"entries"}{$order};
		}

		foreach my $pronoun (keys %{$panels{$panel_id}{"pnoun"}}) {
			$panel_text .= $pronoun."\n";
		}

		foreach my $code (keys %{$recipients{"in"}{$panel_id}}) {

			my @followers = keys %{$recipients{"in"}{$panel_id}{$code}{phone}};

			$m->comp( "/funclib/send_notify.mas",
				from    => 'Tabroom.com <blasts@www.tabroom.com>',
				array   => \@followers,
				subject => $round->realname." ".$event->abbr,
				body    => $panel_text
			);

   			@followers = keys %{$recipients{"in"}{$panel_id}{$code}{email}};

			if (@followers) {
				$m->comp( "/funclib/send_notify.mas",
					from    => 'Tabroom.com <blasts@www.tabroom.com>',
					array   => \@followers,
					subject => $round->realname." ".$event->abbr,
					body    => $panel_text." ".$map_text
				);
			}
		}

		foreach my $code (keys %{$recipients{"school"}{$panel_id}}) {
			foreach my $email (keys %{$recipients{"school"}{$panel_id}{$code}{email}}) {
				$school_emails{$email} .= "$code:\n";
				$school_emails{$email} .= "$panel_text\n\n";
			}
		}
	}

	foreach my $email (keys %school_emails) {
		$m->comp( "/funclib/send_notify.mas",
			from    => 'Tabroom.com <live@www.tabroom.com>',
			to      => $email,
			subject => $round->realname,
			body    => $school_emails{$email}
		);
	}

	return $recipients{"counter"}." individuals sent pairings from this section";

</%init>
