<%args>
	$tourn
	$tourn_settings
	$person
	$round
	$event
	$event_settings
	$round_id => undef
	$sort_by  => undef
</%args>
<%init>

	$round = Tab::Round->retrieve($round_id)
		if $round_id
		&& (not defined $round);

	$m->abort unless $round;
	$m->abort unless $event->tourn == $tourn->id;

	my %event_settings = $event->all_settings;

	my %panels;
	my %entries;
	my %things;
	my $max_speaker;
	my $has_judges;

	my $this_round_name = $round->name;
	my $last_round_name = $this_round_name - 1;

	my $this_round_id = $round->id;
	my $this_round_type = $round->type;
	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select
			panel.id, panel.letter,
			entry.id, entry.code,
			pairing_seed.value,
			ballot.speakerorder,
			ballot.judge,
			school.id, school.code, school.name,
			region.id, region.name, region.code,
			district.id, district.name, district.code

		from (panel, ballot, entry, school)
			left join region on region.id = school.region
			left join district on district.id = school.district
			left join entry_setting pairing_seed
				on pairing_seed.entry = entry.id
				and pairing_seed.tag = 'pairing_seed'

		where panel.round = ?
			and panel.id = ballot.panel
			and ballot.entry = entry.id
			and entry.school = school.id

		group by entry.id
	");

	$sth->execute($round->id);

	while (
		my (
			$panel_id, $panel_letter,
			$entry_id, $entry_code,
			$pairing_seed,
			$ballot_speakerorder,
			$ballot_judge,
			$school_id, $school_code, $school_name,
			$region_id, $region_name, $region_code,
			$district_id, $district_name, $district_code
		) = $sth->fetchrow_array()
	) {

		$school_name = Tab::short_name($school_name);

		unless ($things{"school"}{$school_id}) {
			$things{"school"}{$school_id}{"code"} = $school_code;
			$things{"school"}{$school_id}{"name"} = $school_name;
		}

		unless ($things{"region"}{$region_id}) {
			$things{"region"}{$region_id}{"code"} = $region_code;
			$things{"region"}{$region_id}{"name"} = $region_name;
		}

		unless ($things{"district"}{$district_id}) {
			$things{"district"}{$district_id}{"code"} = $district_code;
			$things{"district"}{$district_id}{"name"} = $district_name;
		}

		$entries{$entry_id}{code} = $entry_code;
		$entries{$entry_id}{school} = $school_id;
		$entries{$entry_id}{school_code} = $school_code;
		$entries{$entry_id}{school_name} = $school_name;

		$entries{$entry_id}{region} = $region_id;
		$entries{$entry_id}{region_code} = $region_code;

		$entries{$entry_id}{district} = $district_id;
		$entries{$entry_id}{district_code} = $district_code;

		$entries{$entry_id}{order} = $ballot_speakerorder;

		$entries{$entry_id}{"section"} = $panel_id;
		$entries{$entry_id}{"pairing_seed"} = $pairing_seed;

		$panels{$panel_id}{"letter"} = $panel_letter;
		$panels{$panel_id}{"entries"}{$entry_id}++;

		$panels{$panel_id}{"by_order"}{$ballot_speakerorder} = $entry_id;

		$has_judges++ if $ballot_judge;

		if ($max_speaker < $ballot_speakerorder) {
			$max_speaker = $ballot_speakerorder;
		}
	}

	my %crosses_entries;

	unless ($tourn_settings->{ncfl} || $tourn_settings->{nsda_nats}) {
		my %crosses_entries = $m->comp(
			"/funclib/event_doubled.mas",
			round => $round
		);
	}

	my $hit_limit = "and round.name < ?";

	if ($round->type ne "elim") {
		$hit_limit = "and round.name != ?";
	}

	$sth->finish;
	$sth = $dbh->prepare("
		select
			entry.id,
			round.id, round.name, round.type,
			ballot.speakerorder,
			pairing_seed.value,
			otherballot.entry,
			panel.letter

		from (round, entry, ballot, panel, ballot otherballot)
			left join entry_setting pairing_seed
				on pairing_seed.entry = entry.id
				and pairing_seed.tag = 'pairing_seed'

		where round.event = ?
		$hit_limit
		and round.id = panel.round
		and panel.id = ballot.panel
		and ballot.entry = entry.id

		and panel.id = otherballot.panel
		and otherballot.entry != entry.id

		order by entry.id, round.name
	");

	$sth->execute($event->id, $round->name);

	while (
		my (
			$entry_id,
			$round_id, $round_name, $round_type,
			$ballot_speakerorder,
			$pairing_seed,
			$other,
			$letter
		) = $sth->fetchrow_array()
	) {

		next if $entries{$entry_id}{"didthis"}{$round_id}{$other}++;

		if ($round_id != $this_round_id && $round_type eq $this_round_type) {
			$entries{$entry_id}{"hits"}{$other}++;
			$entries{$entry_id}{"hits_bytype"}{$round_type}{$other}++;
			$entries{$entry_id}{"hits_byround"}{$round_name}{$other}++;
		}

		next if $entries{$entry_id}{"didthis"}{$round_id}{general}++;
		next if ($round_type eq "prelim" && $tourn_settings->{"nsda_nats"});
		next if ($round_name >= $this_round_name);

		$entries{$entry_id}{"orders"}{$round_name} = $ballot_speakerorder;
		$entries{$entry_id}{"orders_bytype"}{$round_type}{$round_name} = $ballot_speakerorder;
		$entries{$entry_id}{"pairing_seed"} = $pairing_seed;

		if ($round_name == $last_round_name) {
			$entries{$entry_id}{"last_section"} = $letter;
		}
	}

	my $round_type = $round->type;
	my $previous_round;

    if ($round->setting("seed_round")) {

    	$previous_round = Tab::Round->retrieve($round->setting("seed_round"));

    } elsif ($tourn_settings->{"nsda_nats"}) {

        if ($round_type eq "elim" && (not defined $round->name % 2)) {
            $previous_round = Tab::Round->search(
                event => $event->id,
                name => ($round->name - 2)
            )->first;
        } else {
            $previous_round = Tab::Round->search(
                event => $event->id,
                name => ($round->name - 1)
            )->first;
        }

    } else {

        $previous_round = Tab::Round->search(
            event => $event->id,
            name => ($round->name - 1)
        )->first;
    }

    my $entries_ref;
	my $strength_total;
	my $strength_count;

	if ($round_type eq "prelim" && $event_settings->{"seed_presets"}) {

		foreach my $entry_id (keys %entries) {
			$entries{$entry_id}{"seed"}     = $entries{$entry_id}{"pairing_seed"};
			$entries{$entry_id}{"strength"} = $entries{$entry_id}{"pairing_seed"};
			$strength_total += $entries{$entry_id}{"pairing_seed"};
			$strength_count++;
		}

	} elsif ($previous_round) {

        my @results = $m->comp(
            "/tabbing/results/order_entries.mas",
            round => $previous_round,
        ) if $previous_round;

        $entries_ref = pop @results if @results;

		if ($entries_ref) {

			if ($entries_ref->{"seed"}) {
				foreach my $entry_id (keys %{$entries_ref->{seed}}) {
					$entries{$entry_id}{"seed"} = $entries_ref->{'seed'}{$entry_id};
				}
			}

			if ($entries_ref->{"section_rank"}) {
				foreach my $entry_id (keys %{$entries_ref->{section_rank}}) {
					$entries{$entry_id}{"origin_rank"} = $entries_ref->{'section_rank'}{$entry_id};
				}
			}

			if ($entries_ref->{"section"}) {
				foreach my $entry_id (keys %{$entries_ref->{section}}) {
					$entries{$entry_id}{"origin"} = $entries_ref->{'section'}{$entry_id};
				}
			}

			if ($entries_ref->{"tiebreak"}{"1"}) {
				foreach my $entry_id (keys %{$entries_ref->{"tiebreak"}{"1"}}) {
					$entries{$entry_id}{"strength"} = $entries_ref->{"tiebreak"}{"1"}{$entry_id};
					if ($entries{$entry_id}{"section"}) {
						$strength_total += $entries_ref->{"tiebreak"}{"1"}{$entry_id};
						$strength_count++;
					}
				}
			}
		}
	}

	my $strength_average = ($strength_total / $strength_count) if $strength_count;

	my $code_style = $event_settings->{"code_style"};
	my $code_block = "big";
	$code_block = "small" if $code_style eq "numbers";
	$code_block = "small" if $code_style eq "school_number";

</%init>

	<script>

		function scanVisuals() {

			var tags = ['schools', 'regions', 'districts', 'hits', 'last_section', 'crosses', 'sections', 'section_ranks', 'orders', 'strength', 'seeds'];

			tags.forEach(function(tag) {

				$("."+tag).addClass("hidden");

				if ($("#"+tag+"_all").prop("checked")) {
					$("."+tag).removeClass("hidden");
				} else {
					$("."+tag+"_panel").each(function() {
						if ($(this).prop("checked")) {
							var panel = $(this).attr(panel_id);
							$("#"+tag+"_"+panel).removeClass("hidden");
						}
					});
				}
			});
		}

		$(document).ready( function(){
%			foreach my $panel_id (sort {$panels{$a}{"letter"} cmp $panels{$b}{"letter"}} keys %panels) {
				averageStrength('<% $panel_id %>');
				scanVisuals();
%			}
		});

		function averageStrength(panelID) {

			var total = 0, counter = 0, average = 0, already = {};

			$("#panel_"+panelID).find(".strength").each(function(index) {

				var strengthScore = parseInt(this.id);
				var entryID = $(this).attr("entry");

				if (!(entryID in already)) {
					total = total + strengthScore;
					counter++;
					already[entryID]++;
				}

			});

			if (counter) {
				average = (total / counter);
			}

			$("#average_"+panelID).html(average.toFixed(2));
		}

		function toggleShow(elementType) {
			$("#"+elementType).toggleClass("invert");
			$("."+elementType).toggleClass("hidden");
		}

		function hideColor (colorToggle) {
			$(".entries").removeClass(colorToggle);
			$(".schooltoggle").removeClass('invert');
			$(".key_"+colorToggle).addClass('hidden');
		}

		function toggleColor (keyID, panelID, clashKey, clashType, colorToggle) {

			$(".entries").not("."+clashType+"_"+clashKey).removeClass(colorToggle);
			$(".schooltoggle").not("#"+keyID).removeClass('invert');

			$("#"+keyID).toggleClass('invert');

			if (clashType === "hits") {
				$("."+clashType).toggleClass("hidden");
				$("."+clashType).toggleClass(colorToggle);
			} else {

				console.log(clashType);
				console.log(clashKey);

				$("."+clashType+"_"+clashKey).toggleClass(colorToggle);
				$("."+clashType+"_"+clashKey).toggleClass("hidden");
			}

			$("."+clashType+"_"+clashKey).children("."+clashType+"s").addClass("hidden");

		};

%		unless ($has_judges) {

			$(function() {

				$( ".droppable" ).droppable({

					hoverClass	     : "ltyellow",
					accept		     : ":not(.ui-sortable-helper)",
					disableSelection : "true",

					drop : function( event, ui) {

						$.post("move_speech.mhtml",{
							entry_id	 : ui.draggable.attr("id"),
							panel_marker : this.id
						}).done(function(data) {

							if (data.error) {

								alertify.error(data.message);

							} else if (data.message) {

								alertify.set('notifier','delay', 2);
								alertify.notify(data.message, "custom");
								alertify.set('notifier','delay', 5);

								console.log("Origin panel is "+data.origin_panel);
								console.log("Origin order is "+data.origin_speakerorder);
								console.log("Target entry is "+data.target_entry);

								if (data.origin_panel && data.origin_speakerorder && data.target_entry) {
									var parentID = data.origin_panel+"_"+data.origin_speakerorder;
									console.log("Origin panel is Parent ID is "+parentID);
									console.log("Target entry to move there is "+data.target_entry);
									$("#"+data.target_entry).appendTo("#"+parentID);
								}
							} else {
								console.log(data);
								alertify.warning("An error condition was tripped.");
							}
						});

						// remove the original element from its origin to this
						// location, and make it visible again while destroying the
						// clone.  this is necessary because the default jquery
						// draggable behavior does not play well with scrollable
						// windows.

						ui.draggable.show();
						$(this).prepend(ui.draggable);
						$( this ).find( ".placeholder" ).remove();

						var panelID = $("#"+this.id).attr("panel");
						averageStrength(panelID);

						$("#"+this.id).removeClass("strength_"+panelID);
					}

				}).sortable({

					items: ":not(.placeholder)",

					sort: function() {
						// gets added unintentionally by droppable interacting with
						// sortable using connectWithSortable fixes this, but
						// doesn't allow you to customize active/hoverClass options
						$( this ).removeClass( "ui-state-default" );
					}
				});

				$( ".draggable" ).draggable({

					drag: function(event, ui) {
						$("."+this.id).show();
					},

					stop: function(event, ui) {
						$("."+this.id).hide();

						var schoolID = $("#"+this.id).attr("school");
						var districtID = $("#"+this.id).attr("district");
						var regionID = $("#"+this.id).attr("region");

						$(".school_"+schoolID).addClass("hidden");
						$(".district_"+districtID).addClass("hidden");
						$(".region_"+regionID).addClass("hidden");
						$(".hits").addClass('hidden');

					},

					start: function(event, ui) {

						var schoolID = $("#"+this.id).attr("school");
						var districtID = $("#"+this.id).attr("district");
						var regionID = $("#"+this.id).attr("region");

%						if ($tourn_settings->{nsda_nats}) {

							$(".schools").addClass("hidden");
							$(".school_"+schoolID).removeClass("hidden");
							$(".districts").addClass("hidden");
							$(".district_"+districtID).removeClass("hidden");
							$(".regions").addClass("hidden");
							$(".region_"+regionID).removeClass("hidden");
%						} else {
							$(".schools").addClass("hidden");
							$(".school_"+schoolID).removeClass("hidden");
%						}

						$("#"+this.id).hide();
						$("#"+this.id).removeClass("dkred");
						$("#"+this.id).removeClass("dkblue");
						$(".hit_"+this.id).removeClass("hidden");

					},

					disableSelection : "true",
					revert           : "invalid",
					containment      : '#wrapper',
					snap             : "true",
					snapMode         : "inner",
					helper           : "clone"
				});
			});
%		}

	</script>

		<div class="full nospace">

			<span class="twentieth">
%				if ($sort_by eq "seed") {
					<a
						class = "fa fa-lg buttonwhite redtext fa-sort"
						title = "Sort by speaker order"
						href="show_snake.mhtml?round_id=<% $round->id %>&sort_by=speaker"
					></a>
%				} else {
					<a
						class = "fa fa-lg buttonwhite bluetext fa-sort"
						title = "Sort by seed order"
						href="show_snake.mhtml?round_id=<% $round->id %>&sort_by=seed"
					></a>
%				}
			</span>

			<span class="twothirds marno">
				<h4><% $round->realname %> Snake</h4>
			</span>

			<span class="third purpletext rightalign semibold">
				Strength Average: <% sprintf("%.2f", $strength_average) %>
			</span>

			<div class="full nospace centeralign marbottom">
				<label for="schools_all">
					<span class="eighth hover marno ltborder">
						<span class="threequarters semibold redtext nospace">
							<span class="halfspacer"></span>
							Schools
						</span>
						<span class="quarter nospace centeralign">
							<input
								type    = "checkbox"
								id      = "schools_all"
								name    = "schools"
								onClick = "scanVisuals();"
							>
						</span>
					</span>
				</label>


%				if ($tourn_settings->{nsda_nats}) {

					<label for="regions_all">
						<span class="eighth hover marno ltborder">
							<span class="threequarters semibold orangetext nospace">
								<span class="halfspacer"></span>
								States
							</span>
							<span class="quarter nospace centeralign">
								<input
									type    = "checkbox"
									id      = "regions_all"
									name    = "regions"
									onClick = "scanVisuals();"
								>
							</span>
						</span>
					</label>
					<label for="districts_all">
						<span class="eighth hover marno ltborder">
							<span class="threequarters semibold bluetext nospace">
								<span class="halfspacer"></span>
								Districts
							</span>
							<span class="quarter nospace centeralign">
								<input
									type    = "checkbox"
									id      = "districts_all"
									name    = "districts"
									onClick = "scanVisuals();"
								>
							</span>
						</span>
					</label>

%				} elsif ($tourn_settings->{'ncfl'}) {
					<label for="regions_all">
						<span class="eighth hover marno ltborder">
							<span class="threequarters semibold orangetext nospace">
								<span class="halfspacer"></span>
								Dioceses
							</span>
							<span class="quarter nospace centeralign">
								<input
									type    = "checkbox"
									id      = "regions_all"
									name    = "regions"
									onClick = "scanVisuals();"
								>
							</span>
						</span>
					</label>
%				} elsif ($tourn_settings->{'regions'}) {
					<label for="regions_all">
						<span class="eighth hover marno ltborder">
							<span class="threequarters semibold orangetext">
								<span class="halfspacer"></span>
								Regions
							</span>
							<span class="quarter nospace centeralign">
								<input
									type    = "checkbox"
									id      = "regions_all"
									name    = "regions"
									onClick = "scanVisuals();"
								>
							</span>
						</span>
					</label>
%				}

%				if ($tourn_settings->{nsda_nats} || $round_type ne "elim") {
					<label for="hits_all">
						<span class="eighth hover marno ltborder">
							<span class="threequarters semibold orangetext">
								<span class="halfspacer"></span>
								Prev Hits
							</span>
							<span class="quarter nospace centeralign">
								<input
									type    = "checkbox"
									id      = "hits_all"
									name    = "hits"
									onClick = "scanVisuals();"
								>
							</span>
						</span>
					</label>
%				}

%				if ($tourn_settings->{nsda_nats} && $round_type eq "elim" && $round->name > 7) {

					<label for="last_section_all">
						<span class="eighth hover marno ltborder">
							<span class="threequarters semibold graytext">
								<span class="halfspacer"></span>
								Last Section
							</span>
							<span class="quarter nospace centeralign">
								<input
									type    = "checkbox"
									id      = "last_section_all"
									name    = "last_section"
									onClick = "scanVisuals();"
								>
							</span>
						</span>
					</label>
%				}

				<label for="orders_all">
					<span class="eighth hover marno ltborder">
						<span class="threequarters semibold bluegreentext nospace">
							<span class="halfspacer"></span>
							Spkr Orders
						</span>
						<span class="quarter nospace centeralign">
							<input
								type    = "checkbox"
								id      = "orders_all"
								name    = "orders"
								onClick = "scanVisuals();"
							>
						</span>
					</span>
				</label>

%				unless ($tourn_settings->{ncfl} || $tourn_settings->{nsda_nats}) {

					<label for="crosses_all">
						<span class="eighth hover marno ltborder">
							<span class="threequarters semibold greytext nospace">
								<span class="halfspacer"></span>
								Cross Entries
							</span>
							<span class="quarter nospace centeralign">
								<input
									type    = "checkbox"
									id      = "crosses_all"
									name    = "crosses"
									onClick = "scanVisuals();"
								>
							</span>
						</span>
					</label>

%				} elsif ($tourn_settings->{ncfl}) {

					<label for="sections_all">
						<span class="eighth hover marno ltborder">
							<span class="threequarters semibold greytext">
								<span class="halfspacer"></span>
								Sections
							</span>
							<span class="quarter nospace centeralign">
								<input
									type    = "checkbox"
									id      = "sections_all"
									name    = "sections"
									onClick = "scanVisuals();"
								>
							</span>
						</span>
					</label>

					<label for="section_ranks_all">
						<span class="eighth hover marno ltborder">
							<span class="threequarters semibold greytext nospace">
								<span class="halfspacer"></span>
								Sections
							</span>
							<span class="quarter nospace centeralign">
								<input
									type    = "checkbox"
									id      = "section_ranks_all"
									name    = "section_ranks"
									onClick = "scanVisuals();"
								>
							</span>
						</span>
					</label>
%				}

%				if ($round_type eq "prelim" && $event_settings->{"seed_presets"}) {

					<label for="seeds_all">
						<span class="eighth hover marno ltborder">
							<span class="threequarters semibold greentext nospace">
								<span class="halfspacer"></span>
								Prelim Seeds
							</span>
							<span class="quarter nospace centeralign">
								<input
									type    = "checkbox"
									id      = "seeds_all"
									name    = "seeds"
									onClick = "scanVisuals();"
								>
							</span>
						</span>
					</label>

%				} else {

%					if ($tourn_settings->{nsda_nats} || $round_type ne "final") {

						<label for="strength_all">
							<span class="eighth hover marno ltborder">
								<span class="threequarters semibold purpletext nospace">
									<span class="halfspacer"></span>
									Strength
								</span>
								<span class="quarter nospace centeralign">
									<input
										type    = "checkbox"
										id      = "strength_all"
										name    = "strength"
										onClick = "scanVisuals();"
									>
								</span>
							</span>
						</label>
%					}

					<label for="seeds_all">
						<span class="eighth hover marno ltborder">
							<span class="threequarters semibold greentext nospace">
								<span class="halfspacer"></span>
								Seeds
							</span>
							<span class="quarter nospace centeralign">
								<input
									type    = "checkbox"
									id      = "seeds_all"
									name    = "seeds"
									onClick = "scanVisuals();"
								>
							</span>
						</span>
					</label>
%				}
			</span>
		</div>
		<div class="full centeralign">

%		if ($has_judges) {
			<p class="semibold centeralign redtext">
				You have judges assigned to this round.
				The snake adjuster does not work once judges are placed.
				Adjustments have been disabled.
			</p>
%		}

<%perl>

		my $panelcount = scalar(keys %panels);

		foreach my $panel_id (
			sort {
				$panels{$a}{"letter"} <=> $panels{$b}{"letter"}
				|| $panels{$a}{"letter"} cmp $panels{$b}{"letter"}
			} keys %panels
		) {

			my %counts;
			my %entry_hash;
			my $max = $max_speaker;

			if ($sort_by eq 'seed') {

				my $counter;

				foreach my $entry_id (
					sort {
						$entries{$a}{"seed"} <=> $entries{$b}{"seed"}
					} keys %{$panels{$panel_id}{"entries"}}
				) {
					$counter++;
					$entry_hash{$panel_id}{$counter} = $entry_id;
				}

				$max = $counter;

			} else {

				foreach my $entry_id (
					sort {
						$entries{$a}{"order"} <=> $entries{$b}{"order"}
					} keys %{$panels{$panel_id}{"entries"}}
				) {
					$entry_hash{$panel_id}{$entries{$entry_id}{"order"}} = $entry_id;
				}
			}

			my $width;

			if ($panelcount < 6) {
				$width = "fixedwidthlarger inline";
			} else {
				$width = "fixedwidthsmaller";
			}

</%perl>
			<span
				class="marless top <% $width %>"
				id = "panel_<% $panel_id %>"
			>

				<div class="full ltyellow padvert smallish centeralign semibold marno
					bordersides bordertop">
					Section <% $panels{$panel_id}{"letter"} %>
				</div>

%				foreach my $speaker (1 .. $max) {

					<div class="full row nospace bordersides">

						<span class="tenth padless marno centeralign">
							<% $speaker %>
						</span>

						<span
							id      = "<% $panel_id %>_<% $speaker %>"
							panel   = "<% $panel_id %>"
							class   = "marno fivesixths droppable speaker_<% $speaker %>"
						>
<%perl>
							my $entry_id;

							unless ($entry_hash{$panel_id}{$speaker}) {
								$m->print("</span></div>\n");
								next;
							} else {
								$entry_id = $entry_hash{$panel_id}{$speaker};
							}

							$counts{"schools"}{$entries{$entry_id}{"school"}}++;
							$counts{"regions"}{$entries{$entry_id}{"region"}}++;
							$counts{"districts"}{$entries{$entry_id}{"district"}}++;

							my $order_string;
							my $last_order;
							my %orders;

							foreach my $round_name (
								sort {
									$a <=> $b
								} keys %{$entries{$entry_id}{"orders"}}
							) {

								my $order = $entries{$entry_id}{"orders"}{$round_name};

								$order_string .= ", ";
								$order_string .= $order;

								if ($round_name == $last_round_name) {
									$last_order = $order;
								}

								$orders{$order}++;
							}

							if ($speaker == $last_order) {
								$counts{"last_order"}++
							} else {
								$counts{"order"} += $orders{$speaker};
							}

							my $crosses_clash;

							if ($crosses_entries{$entry_id}) {
								foreach my $other (keys %{$crosses_entries{$entry_id}}) {
									if (
										(abs $crosses_entries{$entry_id}{$other}{"order"} - $speaker)
										< 2
									) {
										$counts{"crosses"}++;
										$crosses_clash++;
									}
								}
							}
</%perl>

							<span
								class="
									marno
									entries
									draggable
									centeralign
								"
								id         = "<% $entry_id %>"
								school     = "<% $entries{$entry_id}{"school"} %>"
								district   = "<% $entries{$entry_id}{"district"} %>"
								region     = "<% $entries{$entry_id}{"region"} %>"
								orders     = "<% $order_string %>"
								last_order = "<% $last_order %>"
							>

								<div class="centeralign codes full marno padless
									<% length($entries{$entry_id}{code}) < 6 ? "biggish" : "" %>
								">
									<% $entries{$entry_id}{code} %>
								</div>

								<span
									class="
										schools_<% $entries{$entry_id}{"school"} %>
										nospace full schools hidden biggish redtext semibold centeralign"
								>
									<% $entries{$entry_id}{"school_code"}
										? $entries{$entry_id}{"school_code"}
										: $entries{$entry_id}{"school_name"}
									%>
								</span>

								<span
									class="
										region_<% $entries{$entry_id}{"region"} %>
										nospace half regions hidden biggish orangetext semibold"
								>
									<% $entries{$entry_id}{"region_code"} %>
								</span>

								<span
									class="
										district_<% $entries{$entry_id}{"district"} %>
										nospace half districts hidden biggish bluetext semibold"
								>
									<% $entries{$entry_id}{"district_code"}  %>
								</span>

								<span
									class="
										last_section_<% $entries{$entry_id}{"last_section"} %>
										nospace half last_section hidden biggish greytext semibold"
								>
									<% $entries{$entry_id}{"last_section"}  %>
								</span>

<%perl>
								foreach my $hit (sort keys %{$entries{$entry_id}{"hits"}}) {

									if ($entries{$hit}{section} == $panel_id) {

										$counts{"hits"}++;

										if ($tourn_settings->{"nsda_nats"}) {

											foreach my $round (keys %{$entries{$entry_id}{"hits_byround"}}) {

												foreach my $other (keys %{$entries{$entry_id}{"hits_byround"}{$round}}) {

													next if $other != $hit;
</%perl>
													<span
														class="centeralign orangetext full nospace
														semibold hit_<% $panel_id %> hidden hits"
													>Hit <% $entries{$other}{code} %> Rnd <% $round %></span>
%												}
%											}
%										} elsif ($entries{$hit}{"section"} && $entries{$hit}{"code"}) {

											<span
												class="centeralign orangetext full nospace
												semibold hit_<% $panel_id %> hidden hits"
											>Hit <% $entries{$hit}{code} %> <% $entries{$entry_id}{"hits"}{$hit} %>x</span>
<%perl>
										}
									}
								}

								if ($tourn_settings->{nsda_nats} || $round_type ne "elim") {

									foreach my $hit (sort keys %{$entries{$entry_id}{"hits"}}) {

										next unless $entries{$hit}{"code"};
										next unless $entries{$hit}{"section"};
</%perl>
										<span class="
											centeralign bluetext half nospace
											semibold hits hit_<% $hit %> hidden
										">
											<% $entries{$hit}{"code"} %>
											<% $entries{$entry_id}{"hits"}{$hit} %>x
										</span>
%									}
%								}

%								if ($round_type eq "elim" || $round_type eq "final") {

									<span
										class = "nospace half seeds hidden biggish greentext semibold"
										entry = "<% $entry_id %>"
										id    = "<% $entries{$entry_id}{"seed"} %>"
									>
										<% $entries{$entry_id}{"seed"} %>
									</span>

									<span
										class = "nospace quarter sections hidden biggish bluetext semibold"
										entry = "<% $entry_id %>"
										id    = "<% $entries{$entry_id}{"origin"} %>"
									>
										<% $entries{$entry_id}{"origin"} %>
									</span>

									<span
										class = "nospace quarter section_ranks hidden biggish greytext semibold"
										entry = "<% $entry_id %>"
										id    = "<% $entries{$entry_id}{"origin_rank"} %>"
									>
										<% $entries{$entry_id}{"origin_rank"} %>
									</span>

%								} elsif ($round_type eq "prelim" && $event_settings->{"seed_presets"}) {

									<span
										class = "nospace half seed hidden biggish greentext semibold"
										entry = "<% $entry_id %>"
										id    = "<% $entries{$entry_id}{"seed"} %>"
									>
										<% $entries{$entry_id}{"seed"} %>
									</span>

%								}

								<span
									class="nospace half strength hidden biggish purpletext semibold"
									entry = "<% $entry_id %>"
									id    = "<% $entries{$entry_id}{"strength"} %>"
								>
									<% $entries{$entry_id}{"strength"}  %>
								</span>

								<span
									class="
										<% $last_order == $speaker ? "order_last" : "" %>
										<% $orders{$speaker} ? "order_normal" : "" %>
										<% $crosses_clash ? "crosses_normal" : "" %>
										nospace orders code_<% $panel_id %> hidden"
								>
<%perl>
									my @rounds = keys %{$entries{$entry_id}{"orders"}};
									my $total;

									foreach my $round (@rounds) {

										$total += $entries{$entry_id}{"orders"}{$round};
</%perl>
										<span class="full padless marno">
										<% $round %>  &mdash; <%
											Lingua::EN::Numbers::Ordinate::ordinate(
												$entries{$entry_id}{"orders"}{$round}
											)
										%>
										</span>
%									}

%									if ($total) {
										<span class="full padless marno semibold">
											Spk Total <% $total %>
										</span>
%									}

								</span>

%								unless ($tourn_settings->{ncfl} || $tourn_settings->{nsda}) {
%									foreach my $other (keys %{$crosses_entries{$entry_id}}) {
										<span class="full nospace">
											<%
												$crosses_entries{$entry_id}{$other}{"event"}
											%>-<%
												Lingua::EN::Numbers::Ordinate::ordinate(
													$crosses_entries{$entry_id}{$other}{"order"}
												)
											%>
										</span>
%									}
%								}
							</span>
					</div>
%				}

				<div class="row centeralign padvert marno bordersides borderbottom full">

%					if ($tourn_settings->{nsda_nats} || $round_type ne "final") {

						<div
							class = "full padless marno purpletext"
							title = "Average Rank of entries in this section"
						>
							<span class="half rightalign">
								AvRk
							</span>

							<span
								class = "half leftalign semibold"
								id    = "average_<% $panel_id %>">
							</span>
						</div>
<%perl>
					}

					my $blah;

					foreach my $key (sort keys %{$counts{schools}}) {

						next unless $counts{"schools"}{$key} > 1;
						$blah++;
</%perl>
						<span
							id      = "<% $key %>_<% $panel_id %>"
							class	= "schooltoggle buttonwhite marbottom redtext padvertless smallish full"
							onClick = "toggleColor(
								this.id,
								<% $panel_id %>,
								<% $key %>,
								'school',
								''
							);"
						>
							<% $counts{"schools"}{$key} %> from
							<% $tourn_settings->{ncfl} ? "Dio" : "School" %>
							<% $things{"school"}{$key}{"code"}
								? $things{"school"}{$key}{"code"}
								: $things{"school"}{$key}{"name"}
							%>
						</span>
<%perl>
					}

					foreach my $key (sort keys %{$counts{districts}}) {

						next unless $key;
						next unless $counts{"districts"}{$key} > 1;
						$blah++;
</%perl>

						<span
							id      = "<% $key %>_<% $panel_id %>"
							class	= "districttoggle buttonwhite marbottom bluetext padvertless smallish full"
							onClick = "toggleColor(
								this.id,
								<% $panel_id %>,
								<% $key %>,
								'district',
								''
							);"
						>
							<% $counts{"districts"}{$key} %> from
							<% $things{"district"}{$key}{"code"}
								? $things{"district"}{$key}{"code"}
								: $things{"district"}{$key}{"name"}
							%>
						</span>
<%perl>
					}

					foreach my $key (sort keys %{$counts{regions}}) {

						next unless $key;
						next unless $counts{"regions"}{$key} > 1;
						$blah++;
</%perl>
						<span
							id      = "<% $key %>_<% $panel_id %>"
							class	= "regiontoggle buttonwhite marbottom orangetext padvertless smallish full"
							onClick = "toggleColor(
								this.id,
								<% $panel_id %>,
								<% $key %>,
								'region',
								''
							);"
						>
							<% $counts{"regions"}{$key} %> from
							<% $things{"region"}{$key}{"code"}
								? $things{"region"}{$key}{"code"}
								: $things{"region"}{$key}{"name"}
							%>
						</span>
<%perl>
					}

					if ($counts{"order"}) {
						$blah++;
</%perl>
						<span
							id      = "order_<% $panel_id %>"
							class	= "ordertoggle buttonwhite marbottom greentext padvertless smallish full"
							onClick = "toggleColor(
								this.id,
								<% $panel_id %>,
								'normal',
								'order',
								'green'
							);"
						>
							<% $counts{"order"} %> order repeats
						</span>
<%perl>
					}

					if ($counts{"last_order"}) {
						$blah++;
</%perl>

						<span
							id      = "last_order_<% $panel_id %>"
							class	= "last_ordertoggle buttonwhite marbottom bluegreentext padvertless smallish full centeralign"
							onClick = "toggleColor(
								this.id,
								<% $panel_id %>,
								'last',
								'order',
								'bluegreentext'
							);"
						>
							<% $counts{"last_order"} %> same order R<% $this_round_name - 1 %>
						</span>
<%perl>
					}

					unless ($tourn_settings->{ncfl}) {
						if ($counts{"crosses"}) {
							$blah++;
</%perl>
							<span
								id      = "crosses_<% $panel_id %>"
								class	= "crossestoggle buttonwhite marbottom graytext padvertless smallish full"
								onClick = "toggleColor( this.id, <% $panel_id %>, 'normal', 'crosses', 'dkgrey');"
							>
								<% $counts{"crosses"} %> crosses entry order
							</span>
<%perl>
						}
					}

					if ($tourn_settings->{nsda_nats} || $round_type ne "elim") {
						if ($counts{"hits"}) {
							$blah++;
</%perl>
							<span
								id      = "hit_<% $panel_id %>"
								class	= "hittoggle buttonwhite marbottom bluetext padvertless smallish full"
								onClick = "toggleColor( this.id, <% $panel_id %>, 'hits', 'hits', 'bluetext');"
							>
								<% $counts{"hits"} %> repeat hits
							</span>
%						}
%					}

%					unless ($blah) {
						<span class="buttonwhite greentext padvertless">
							<span class="fa fa-check greentext"></span>
						</span>
%					}

				</div>
			</span>
%		}

		</div>

