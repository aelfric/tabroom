<%args>
	$person
	$tourn
	$round_id               => undef
	$type                   => undef
	$flight_rooms_only      => 0
	$tab_rating_priority    => undef
	$tab_seed_priority      => undef
	$offset                 => 0
	$start_time             => undef
</%args>
<%init>

	unless ($ARGS{"protocol"}) {
		my $err = "You must select a tiebreak set";
		$m->redirect("show.mhtml?round_id=".$round_id."&default=settings&err=$err");
	}

	unless ($type) {
		my $err = "You must select a round type";
		$m->redirect("show.mhtml?round_id=".$round_id."&default=settings&err=$err");
	}

	$ARGS{"timeslot"} = Tab::Timeslot->retrieve($ARGS{"timeslot_id"}) if $ARGS{"timeslot_id"};

	unless ($ARGS{"timeslot"}) {
		my $err = "You must select a valid timeslot. A round without a timeslot will break a lot of things.";
		$m->redirect("show.mhtml?round_id=".$round_id."&default=settings&err=$err");
	}

	$ARGS{"protocol"} = Tab::Protocol->retrieve($ARGS{"protocol"}) if $ARGS{"protocol"};

	unless ($ARGS{"protocol"}) {
		my $err = "You must select a valid protocol. A round without a protocol will break a lot of things.";
		$m->redirect("show.mhtml?round_id=".$round_id."&default=settings&err=$err");
	}

	my $round = Tab::Round->retrieve($round_id);

	unless ($round) {
		my $err = "No valid round found for ID $round_id";
		$m->redirect("show.mhtml?round_id=".$round_id."&default=settings&err=$err");
	}

	my %round_settings = $round->all_settings();
	my $event = $round->event;

	my $test_time = int($round->timeslot);

	if ($ARGS{"timeslot"}->id != $test_time
		&& $ARGS{"timeslot"}->rounds(event => $event->id)
	) {
		my $err = "timeslot ".$ARGS{"timeslot"}->name." already has a round of ".$event->abbr." scheduled in it.";
		$m->redirect("show.mhtml?round_id=".$round_id."&default=settings&err=$err");
	}

	my $tz = $event->tourn->tz;
	$tz = "UTC" unless $tz;

	$ARGS{"runoff"} = 0 unless $ARGS{"runoff"} > 0;

	if ($ARGS{"runoff"} == $round) {
		$ARGS{"runoff"} = 0;
	}

	if ($ARGS{"runoff"}) {
		my $runoff_id = $ARGS{"runoff"};
		$ARGS{"runoff"} = Tab::Round->retrieve($runoff_id);
	}

	$ARGS{"flighted"} = 1 unless $ARGS{"flighted"};

	foreach my $key ("type", "flighted", "label") {

		if ($ARGS{$key} ne $round->$key) {

			my $description = $person->first." ".$person->last." changed $key of ".$round->realname."to ".$ARGS{$key};

			$m->comp("/funclib/log.mas",
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $tourn->id,
				person      => $person->id,
				description => $description
			);

			$round->$key($ARGS{$key});
		}
	}

	foreach my $key ("protocol", "timeslot", "runoff") {

		if ($ARGS{$key} ne $round->$key) {

			my $description;

			if ($ARGS{$key}) {
				$description = $person->first." ".$person->last." changed $key of ".$round->realname."to ".$ARGS{$key}->name;
			} else {
				$description = $person->first." ".$person->last." removed $key from ".$round->realname;
			}

			$m->comp("/funclib/log.mas",
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $tourn->id,
				person      => $person->id,
				description => $description
			);

			$round->$key($ARGS{$key});
		}
	}

	$round->update();

	$m->comp("/funclib/renumber_rounds.mas", event_id => $event->id);

	my @settings = (
		"ignore_results",
		"dontcare_aboutmissing",
		"judges_ballots_visible",
		"sidelock_against",
		"seed_round",
		"roomlock_against",
		"showrooms_from",
		"omit_from_bracket",
		"use_for_breakout",
		"include_room_notes",
		"wsdc_round_type",
		"letter_start",
		"num_judges",
		"reset_room_moves",
		"coach_wins",
		"coach_points",
		"coach_feedback",
		"session_lock",
		"motion_publish"
	);

    foreach my $setting (@settings) {

        my $value = $ARGS{$setting};
        if ($value eq $round_settings{$setting}) {
        } else {
            $value = 0 unless $value;
            $round->setting($setting, $value);
        }
    }

	my @text_settings = ("notes", "motion");

    foreach my $setting (@text_settings) {

        my $value = $m->comp("/funclib/save_editor.mas",
            text => $ARGS{$setting}
        );

        if ($value eq $round_settings{$setting}) {

        } else {

            $value = 0 unless $value;
            my $description;

            if ($value eq "0") {
                $description = "Setting $setting text deleted";
                $round->setting($setting, $value);
            } else {
                $description = "Setting $setting changed to $value";
                $round->setting($setting, "text", $value);
            }
        }
    }

	my $start_date = $round->timeslot->start->set_time_zone($tz);
	my $start;

	if ($start_time) {

		eval {
			$start = Tab::dtme( $start_date->mdy('/'), $start_time, $tz);
		};

		undef $start unless $start && $start->year;
		$round->start_time($start) if $start;
		$round->start_time($round->timeslot->start) unless $start;

	} else {
		$round->start_time($round->timeslot->start);
	}

	$round->update();

	$tab_rating_priority =~ s/\./,/g;
	$tab_rating_priority =~ s/\ /,/g;
	$tab_rating_priority =~ s/\:/,/g;

	$round->setting("tab_rating_priority", $tab_rating_priority);

	$tab_seed_priority =~ s/\./,/g;
	$tab_seed_priority =~ s/\ /,/g;
	$tab_seed_priority =~ s/\:/,/g;

	$round->setting("tab_seed_priority", $tab_seed_priority);

	$event->setting("flight_offset", $offset);
	$event->setting("flight_rooms_only", $flight_rooms_only);

	my $msg = $round->realname." settings saved  $start_time.";

	$m->redirect("show.mhtml?round_id=".$round->id."&default=settings&msg=$msg");

</%init>
