<%args>
	$person
	$round_id
</%args>
<%init>

	use List::Util 'shuffle';

	my $debugme;
	my $round = Tab::Round->retrieve($round_id);

    my $description = "Reassigned the judges out of round ".$round->realname." of ".$round->event->abbr;
	$description .= " using debate_judge_panel.mhtml";

	$m->comp("/funclib/log.mas",
        type        => 'tabbing',
        event       => $round->event->id,
        tourn       => $round->event->tourn->id,
        person      => $person,
        description => $description
    );

    $m->comp("/funclib/round_clear_judges.mas",
		round => $round,
		nobye => 1
	);

    my $round_event = $round->event;
	my $event_type = $round_event->type;
    my $tourn = $round_event->tourn;
	my $category = $round_event->category;

	my %category_settings = $category->all_settings;
	my %event_settings = $round_event->all_settings;

	my $this_round = $round->id;
	my $round_type = $round->type;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $round_start = $round->timeslot->start->set_time_zone($tz);
	my $round_end = $round->timeslot->end->set_time_zone($tz);

	my @jpools = $round->jpools;

	my $flights = $round->flighted;
	$flights = 1 unless $flights;

	my $num_judges = $round->setting("num_judges");
	$num_judges = 1 unless $num_judges;

	# Lots of settings
	my $rounds_per = $category_settings{"rounds_per"};
	my $no_back_to_back = $category_settings{"no_back_to_back"};
	my $judge_randomize = $category_settings{"judge_randomize"};
	my $judge_event_twice = $category_settings{"judge_event_twice"};

	my $allow_school_panels = $category_settings{"allow_school_panels"};
	my $allow_region_panels = $category_settings{"allow_region_panels"};

	my $ncfl = $tourn->setting('ncfl');

	my $no_first_years = $event_settings{"no_first_years"};
	my $allow_judge_own = $event_settings{"allow_judge_own"};

	my $region_constrain = $event_settings{"region_constrain"};
	my $region_avoid = $event_settings{"region_avoid"};

	my $allow_repeat_elims = $event_settings{"allow_repeat_elims"};
	my $allow_repeat_judging = $event_settings{"allow_repeat_judging"};
	my $allow_repeat_prelim_side = $event_settings{"allow_repeat_prelim_side"};

	my $prefs = $category_settings{"prefs"};
	$prefs = "none" if $event_settings{"no_prefs"};

	if ($prefs eq "ndt") {
		if ($round->type eq "elim"
			|| $round->type eq "final"
			|| $round->type eq "runoff"
		) {
			$prefs = "caps";
		} else {
			$prefs = "ordinals";
		}
	}

	my $max_pref = $event_settings{"max_pref"};
	my $tab_ratings = $category_settings{"tab_ratings"};

    my @schools = $m->comp("/funclib/event_schools.mas", event => $round->event);
	my %school_region = map {$_->id => $_->region} @schools if $region_constrain || $region_avoid;
	my $dio_region = $round_event->setting("diocese_regions");

	my $dbh = Tab::DBI->db_Main();

	my $event_ballots_sth = $dbh->prepare("
		select
			ballot.id, ballot.entry, ballot.judge, ballot.side,
			round.id, round.type,
			entry.school, entry.code,
			panel.bracket, panel.id, panel.bye

		from ballot, panel, round, entry
		where round.event = ?
		and round.id = panel.round
		and panel.id = ballot.panel
		and ballot.bye = 0
		and ballot.forfeit = 0
		and panel.bye = 0
		and ballot.entry = entry.id
	");

	$event_ballots_sth->execute($round_event->id);

	my @entries;

	my %entry_side;
	my %entry_code;

	my %entry_school;
	my %entry_region;
	my %entry_dioregion;

	my %school_entries;
	my %dioregion_entries;

	my %judge_ballots;
	my %entry_ballots;

	my @panels;
	my %panel_entries;
	my %panel_bracket;
	my %panel_bye;

	my %ballot_type;
	my %ballot_side;
	my %ballot_entry;
	my %ballot_judge;

	my %judge_rounds;

	while (my (	$ballot, $entry, $judge, $side,
				$round, $type,
				$entry_school, $code,
				$bracket, $panel, $bye )

		= $event_ballots_sth->fetchrow_array() ) {

		if ($round == $this_round) {

			push @entries, $entry;

			push @{$school_entries{$entry_school}}, $entry;
			$entry_school{$entry} = $entry_school;
			$entry_region{$entry} = $school_region{$entry_school};

			if ($ncfl) {
				$entry_dioregion{$entry} = $dio_region->{$entry_region{$entry}};
				push @{$dioregion_entries{$entry_dioregion{$entry}}}, $entry;
			}

			$entry_side{$entry} = $side;
			$entry_code{$entry} = $code;

			push @panels, $panel;
			$panel_bracket{$panel} = $bracket;
			$panel_bye{$panel} = $bye;
			push @{$panel_entries{$panel}}, $entry;

		} else {

			push @{$judge_rounds{$judge}}, $round if $round;
			push @{$judge_ballots{$judge}}, $ballot;
			push @{$entry_ballots{$entry}}, $ballot;

			$ballot_type{$ballot} = $type;
			$ballot_side{$ballot} = $side;
			$ballot_entry{$ballot} = $entry;
			$ballot_judge{$ballot} = $judge;

		}
	}

	my $judge_sth;

	if (@jpools) {

		$judge_sth = $dbh->prepare("
			select distinct judge.id, judge.last, judge.school,
				tab_rating.value,
				concat(judge.obligation+judge.hired) as rounds,
				diverse.value

			from (judge, jpool_judge, jpool_round)

			left join judge_setting as tab_rating
				on tab_rating.judge = judge.id
				and tab_rating.tag = 'tab_rating'

			left join judge_setting as diverse
				on diverse.judge = judge.id
				and diverse.tag = 'diverse'

			where judge.active = 1
			and judge.id = jpool_judge.judge
			and jpool_judge.jpool = jpool_round.jpool
			and jpool_round.round = ?
			and not exists (
				select js.id
				from judge_setting js
				where js.judge = judge.id
				and js.tag = 'sub_only'
			)
			group by judge.id
		");

	} else {

		$judge_sth = $dbh->prepare("

			select distinct judge.id, judge.last, judge.school,
				tab_rating.value, concat(judge.obligation+judge.hired) as rounds,
				diverse.value

			from (judge, category, event, round)

			left join judge_setting as tab_rating
				on tab_rating.judge = judge.id
				and tab_rating.tag = 'tab_rating'

			left join judge_setting as diverse
				on diverse.judge = judge.id
				and diverse.tag = 'diverse'

			where judge.active = 1
			and judge.category = event.category
			and event.id = round.event
			and round.id = ?
			and not exists (
				select js.id
				from judge_setting js
				where js.judge = judge.id
				and js.tag = 'sub_only'
			)
			group by judge.id
		");

	}

	$judge_sth->execute($round->id);

	my @judges;
	my %judge_name;
	my %judge_score;
	my %judge_school;
	my %judge_region;
	my %judge_dioregion;

	my %judge_rating;
	my %judge_diverse;

	my %school_judges;
	my %judge_clashes;
	my %judge_obligation;

	while (my ($judge, $last, $school, $rating, $rounds, $diverse) = $judge_sth->fetchrow_array() ) {

		next unless $judge;

		push @judges, $judge;
		$judge_name{$judge} = $last;

		if ($ncfl) {
			$judge_region{$judge} = $school_region{$school} if $school;
			$judge_dioregion{$judge} = $dio_region->{$judge_region{$judge}} if $judge_region{$judge};
		}

		$judge_school{$judge} = $school;
		$judge_rating{$judge} = $rating;
		$judge_diverse{$judge} = $diverse;
		$judge_obligation{$judge} = $rounds;

		push @{$school_judges{$school}}, $judge;

		if ($school_entries{$school} && not defined $allow_judge_own) {

			foreach my $entry (@{$school_entries{$school}}) {
				push @{$judge_clashes{$judge}}, $entry;
			}

		}
	}

	unless (@judges) {
		my $err = "No judges were found.  Did you put judges into the pools?" if @jpools;
		$err = "No judges were available." unless @jpools;
		return $err if $ARGS{"return"};
		$m->redirect("/panel/schemat/show.mhtml?round_id=".$round->id."&disp=1&err=$err");
	}

	my $strikes_sth = $dbh->prepare("
		select distinct strike.id, strike.judge, strike.type,
			strike.event, strike.entry, strike.school,
			strike.region, strike.dioregion, strike.start, strike.end
		from strike
		where strike.tourn = ".$tourn->id."
	");

	$strikes_sth->execute();

	my %judge_out;

	while (
		my ($id, $judge, $type, $event, $entry, $school, $region, $dioregion, $start, $end)
		= $strikes_sth->fetchrow_array()
	) {

		if ($type eq "conflict" || $type eq "entry") {
			if ($school) {
				push @{$judge_clashes{$judge}}, @{$school_entries{$school}} if $school_entries{$school};
			} else {
				push @{$judge_clashes{$judge}}, $entry;
			}
		}

		if ($type eq "elim" || $type eq "event") {
			next if ($round_type eq "elim"
				|| $round_type eq "final"
				|| $round_type eq "runoff"
			) && $type eq "elim";

			next unless $event == $round_event->id;
			$judge_out{$judge}++;
		}

		if ($type eq "hybrid") {
			foreach my $school_judge (@{$school_judges{$school}}) {
				push @{$judge_clashes{$school_judge}}, $entry;
			}
		}

		if ($type eq "region") {
			foreach my $region_school (@schools) {
				next unless $school_region{$region_school} == $region;
				next unless $school_entries{$region_school};
				push @{$judge_clashes{$judge}}, @{$school_entries{$region_school}};
			}
		}

		if ($type eq "dioregion") {
			push @{$judge_clashes{$judge}}, @{$dioregion_entries{$dioregion}}
				if $dioregion_entries{$dioregion};
		}

		if ($type eq "school") {
			push @{$judge_clashes{$judge}}, @{$school_entries{$school}}
				if $school_entries{$school};
		}

		if ($type eq "time" || $type eq "departure") {

			my $start_dt;
			my $end_dt;

			eval {
				$start_dt = DateTime::Format::MySQL->parse_datetime($start);
				$end_dt = DateTime::Format::MySQL->parse_datetime($end);

				$start_dt->set_time_zone("UTC");
				$end_dt->set_time_zone("UTC");

				$start_dt->set_time_zone($tz);
				$end_dt->set_time_zone($tz);
			};

			$judge_out{$judge}++ if (
				$end_dt
				&& $start_dt
				&& $round_start <= $end_dt
				&& $round_end >= $start_dt
			);
		}

	}

	my $busy_sth = $dbh->prepare("
		select distinct judge.id
		from ballot, panel, round, timeslot, timeslot mytime, round myround, judge
		where myround.id = ?
			and myround.timeslot = mytime.id
			and mytime.start < timeslot.end
			and mytime.end > timeslot.start
			and timeslot.id = round.timeslot
			and round.id = panel.round
			and panel.id = ballot.panel
			and ballot.judge = judge.id
			and judge.category = ?
	");

	$busy_sth->execute($round->id, $category->id);

	while (my ($judge) = $busy_sth->fetchrow_array() ) {
		$judge_out{$judge}++;
	}

	my %tier_value;
	my %tier_strike;

	my $tiers;

	if ($prefs && $prefs ne "ordinals") {

		$tiers++;

		foreach my $tier (sort {$a->name cmp $b->name} $category->rating_tiers(type => "mpj")) {
			$tier_value{$tier->id} = $tier->name;
			$tier_strike{$tier->id}++ if $tier->strike || $tier->conflict;
		}
	}

	my $ratings_sth = $dbh->prepare("
		select distinct rating.id, rating.judge, rating.entry, rating.rating_tier, rating.percentile
		from rating, ballot, panel
		where panel.round = ?
		and ballot.panel = panel.id
		and panel.bye = 0
		and ballot.bye = 0
		and ballot.entry = rating.entry
		and not exists (
			select school_setting.school
			from school_setting, entry
			where rating.entry       = entry.id
			and entry.school         = school_setting.school
			and school_setting.tag   = 'noprefs'
			and school_setting.value = 1
		)
		group by rating.id
	");

	$ratings_sth->execute($round->id);

	my %mjp;

	while (my ($id, $judge, $entry, $tier, $percentile) = $ratings_sth->fetchrow_array() ) {

		next unless ($tier || $percentile);
		$mjp{$judge."-".$entry} = $tier_value{$tier} if $tier > 0;
		push @{$judge_clashes{$judge}}, $entry if $tier && $tier_strike{$tier};

		next if $prefs eq "caps";
		$mjp{$judge."-".$entry} = $percentile if $percentile > 0;
	}

	my %panel_seen = ();

	@panels = grep { ! $panel_seen{$_} ++ } @panels;
	@panels = sort {$panel_bracket{$b} <=> $panel_bracket{$a}} @panels;

	my %judge_avoid;
	my %judge_entry_clash;

    my $round_burn_avoid = $category_settings{"round_burn_avoid"};
    my $mutuality        = $category_settings{"mutuality"};
    my $panel_mutuality  = $category_settings{"panel_mutuality"};
    my $preference       = $category_settings{"preference"};
    my $default_mjp      = $category_settings{"default_mjp"};
    my $diversity        = $category_settings{"diverse_judge_weight"};
    my $suckage          = $category_settings{"sucktastic_judge_weight"};
    my $prefer_hireds    = $category_settings{"mjp_prefer_hireds"};

    $diversity        = 1 if not defined $diversity;
    $suckage          = 3 if not defined $suckage;
    $mutuality        = 20 if not defined $mutuality;
    $panel_mutuality  = 100 if not defined $panel_mutuality;
    $preference       = 55 if not defined $preference;
    $default_mjp      = 1 if not defined $default_mjp;
    $round_burn_avoid = 5 if not defined $round_burn_avoid;
    $prefer_hireds    = 10 if not defined $prefer_hireds;

    $mutuality        = 0 if $mutuality        == -1;
    $panel_mutuality  = 0 if $panel_mutuality  == -1;
    $diversity        = 0 if $diversity        == -1;
    $suckage          = 0 if $suckage          == -1;
    $preference       = 0 if $preference       == -1;
    $default_mjp      = 0 if $default_mjp      == -1;
    $round_burn_avoid = 0 if $round_burn_avoid == -1;
    $prefer_hireds    = 0 if $prefer_hireds    == -1;

	my %settings = (
		mutuality        => $mutuality,
		panel_mutuality  => $panel_mutuality,
		diversity        => $diversity,
		suckage          => $suckage,
		preference       => $preference,
		default_mjp      => $default_mjp,
		round_burn_avoid => $round_burn_avoid,
		prefer_hireds    => $prefer_hireds,
		max_pref         => $max_pref
	);

	my %use_priority = ();

	foreach my $judge (@judges) {

		my %seen = ();
		@{$judge_rounds{$judge}} = grep { ! $seen{$_}++ } @{$judge_rounds{$judge}};

		my $num_rounds = scalar @{$judge_rounds{$judge}};

		unless ($round->type eq "elim" || $round->type eq "final" || $round->type eq "runoff") {
			$judge_out{$judge}++ if $num_rounds >= $judge_obligation{$judge} && $rounds_per;
		}

		next if $judge_out{$judge};

		$judge_score{$judge} += scalar @{$judge_clashes{$judge}} if $judge_clashes{$judge};
		$judge_score{$judge} += $diversity if $judge_diverse{$judge};

		if ($judge_ballots{$judge}) {

			foreach my $ballot (
				sort { $entry_code{$ballot_entry{$a}}
						cmp $entry_code{$ballot_entry{$b}}
					} @{$judge_ballots{$judge}}
			) {

				my $entry = $ballot_entry{$ballot};
				next if $allow_repeat_elims
					&& ( $round_type eq "elim"
						|| $round_type eq "final"
						|| $round_type eq "runoff"
						|| $ballot_type{$ballot} eq "elim"
						|| $ballot_type{$ballot} eq "final"
						|| $ballot_type{$ballot} eq "runoff"
					);

				push @{$judge_avoid{$judge}}, $entry;

				next if $allow_repeat_judging;

				next if $allow_repeat_prelim_side
						&& $ballot_side{$ballot} != $entry_side{$entry};

				push @{$judge_clashes{$judge}}, $entry;
			}
		}

		foreach my $clash (@{$judge_clashes{$judge}}) {
			$judge_entry_clash{$judge."-".$clash}++;
		}

		$use_priority{$judge} -= $prefer_hireds if $judge_school{$judge} < 1;
		$use_priority{$judge} -= $judge_diverse{$judge} * $diversity if $diversity;
	}

	my %judge_panel_score;

	@panels = shuffle @panels;

	PANEL:
	foreach my $panel (@panels) {

		next if $panel_bye{$panel};

		JUDGE:
		foreach my $judge (@judges) {

			my $score = 0;
			next JUDGE if $judge_out{$judge};

			my $diff;
			my $mjp_first;

			foreach my $entry (@{$panel_entries{$panel}}) {

				my $mjp_rating = $mjp{$judge."-".$entry};
				$mjp_rating = $default_mjp unless $mjp_rating;

                $score += 100000000000 if $judge_entry_clash{$judge."-".$entry};
                $score += 50000 if $judge_avoid{$entry};
                $score += 500000 if $judge_avoid{$entry} && $prefs eq "ordinals";

				if ($max_pref && $mjp_rating > $max_pref) {
					$score += 5000000000 if $max_pref && $mjp_rating > $max_pref;
				}

				if ($mjp_first) {
					$diff = abs($mjp_first - $mjp_rating) if $mjp_first && $mjp_rating;
				} else {
					$mjp_first = $mjp_rating unless $mjp_first;
				}

                if ($region_avoid) {
                    $score += 100 if $entry_region{$entry} == $judge_region{$judge};
                }

                if ($region_constrain || $ncfl) {
                    $score += 10000000 if $entry_region{$entry} == $judge_region{$judge};
                }

				if ($event_settings{"conflict_dioregion_judges"}) { 
                    $score += 1000000 if $entry_dioregion{$entry} == $judge_dioregion{$judge};
				}

				if ($prefs && $prefs ne "none") {
					$score += $mjp_rating * $preference;
				}

				$judge_rating{$judge."-".$panel} .= " - " if $judge_rating{$judge."-".$panel};
				$judge_rating{$judge."-".$panel} .= $mjp_rating if $prefs && $prefs ne "none";

			}

            $score += $use_priority{$judge};

			if ($prefs ne "ordinals") {
				$score += ($diff ** 4) * ($mutuality);
			} else {
				$score += $diff * $mutuality;
			}

			if ($tab_ratings) {
				$score -= $judge_rating{$judge} * $preference;
			}

			$judge_panel_score{$judge}{$panel} = $score;

		}
	}

	my $panel_done;
	my %panel_flight;
	my %panel_judges;
	my %judge_panels;

	my $current_total;


	foreach my $tick (1 .. 10) {

		my %test_judges;
		my %test_panels;
		my %test_flight;

		my %judge_used;
		my $attempt_total;
		my $order_count;

		my $current_flight = 1;

		@panels = shuffle @panels;

		foreach my $panel (@panels) {
			$test_flight{$panel} = $current_flight;
			$current_flight++;
			$current_flight = 1 if $current_flight > $flights;
		}


		foreach my $order (1 .. $num_judges) {

			$order_count++;
			@panels = reverse @panels unless $order % 2;

			PANEL:
			foreach my $panel (@panels) {

				next if $panel_bye{$panel};

				@judges = sort {$judge_score{$b} <=> $judge_score{$a}} @judges;

				@judges = sort {$judge_panel_score{$a}{$panel} <=> $judge_panel_score{$b}{$panel}} @judges;

				JUDGE:
				foreach my $judge (@judges) {

					next JUDGE if $judge_out{$judge};
					next JUDGE if $judge_used{$judge."-".$test_flight{$panel}};

					foreach my $entry (@{$panel_entries{$panel}}) {
						next JUDGE if $judge_entry_clash{$judge."-".$entry};
					}

					push @{$test_judges{$panel}}, $judge;
					push @{$test_panels{$judge}}, $panel;

					$judge_used{$judge."-".$test_flight{$panel}}++;
					$attempt_total += $judge_panel_score{$judge}{$panel};
					next PANEL;

				}
			}
		}

		foreach my $tock (1 .. 10) {

			next unless $prefs;
			next if $prefs eq "none";

			PANEL:
			foreach my $first (@panels) {

				next if $panel_bye{$first};

				my $baseline_score =
					score_elim_panel(
						$first,
						\@{$panel_entries{$first}},
						\@{$test_judges{$first}},
						\%mjp,
						\%judge_panel_score,
						\%settings
					);

				my %entry_id;
				my %entry_score;

				my $panel_diff;

				foreach my $first_judge (@{$test_judges{$first}}) {

					my $current_diff;
					my $swap_with;
					my $swap_panel;
					my %done;

					JUDGE:
					foreach my $second_judge (@judges) {

						next if $done{$second_judge}++;
						next if $second_judge == $first_judge;
						next if $judge_out{$second_judge};

						unless ($allow_school_panels) {

							next JUDGE
								if $judge_school{$second_judge} == $judge_school{$first_judge};

							next JUDGE
								if $judge_region{$second_judge} == $judge_region{$first_judge}
								&& $judge_region{$second_judge}
								&& ($ncfl || $region_avoid || $region_constrain);
						}

						unless (not defined $ncfl || $allow_region_panels) {
							next JUDGE
								if $judge_dioregion{$second_judge} == $judge_dioregion{$first_judge}
								&& $judge_dioregion{$second_judge};
						}

						foreach my $tp (@{$test_panels{$second_judge}}) {
							next JUDGE
								if $test_flight{$tp} == $test_flight{$first};
						}

						foreach my $entry (@{$panel_entries{$first}}) {
							foreach my $clash (@{$judge_clashes{$second_judge}}) {
								next JUDGE
									if $clash == $entry;
							}
						}

						if ($test_panels{$second_judge} && scalar @{$test_panels{$second_judge}} >= $flights) {

							foreach my $second (@{$test_panels{$second_judge}}) {
								next JUDGE if $second == $first;
							}

							foreach my $second (@{$test_panels{$second_judge}}) {

								next if $test_flight{$second} && $test_flight{$second} != $test_flight{$first};

								foreach my $entry (@{$panel_entries{$second}}) {
									foreach my $clash (@{$judge_clashes{$first_judge}}) {
										next JUDGE if $clash == $entry;
									}
								}

								my $baseline_second_score = score_elim_panel($second,
										\@{$panel_entries{$second}},
										\@{$test_judges{$second}},
										\%mjp,
										\%judge_panel_score,
										\%settings);

								# create test panels post-swap to see if
								# they're any better
								my @new_judges_first;
								my @new_judges_second;

								foreach my $nj (@{$test_judges{$first}}) {
									next if $nj == $first_judge;
									push @new_judges_first, $nj;
								}

								push @new_judges_first, $second_judge;

								foreach my $nj (@{$test_judges{$second}}) {
									next if $nj == $second_judge;
									push @new_judges_second, $nj;
								}

								push @new_judges_second, $first_judge;

								my $new_first_score = score_elim_panel(
									$first,
									\@{$panel_entries{$first}},
									\@new_judges_first,
									\%mjp,
									\%judge_panel_score,
									\%settings
								);


								my $new_second_score = score_elim_panel(
									$second,
									\@{$panel_entries{$second}},
									\@new_judges_second,
									\%mjp,
									\%judge_panel_score,
									\%settings
								);

								if (
									(	$baseline_score
										+ $baseline_second_score
										- $new_first_score
										- $new_second_score
									) > $current_diff
								) {

									$current_diff = $baseline_score
										+ $baseline_second_score
										- $new_first_score
										- $new_second_score;

									$swap_with = $second_judge;
									$swap_panel = $second;
								}

							}

						} else {

							if ($test_panels{$second_judge}) {
								foreach my $second (@{$test_panels{$second_judge}}) {
									next JUDGE if $second == $first;
								}
							}

							# Create test panels post-swap to see if they're any better
							my @new_judges_first;

							foreach my $nj (@{$test_judges{$first}}) {
								next if $nj == $first_judge;
								push @new_judges_first, $nj;
							}

							push @new_judges_first, $second_judge;

							my $new_first_score = score_elim_panel(
								$first,
								\@{$panel_entries{$first}},
								\@new_judges_first,
								\%mjp,
								\%judge_panel_score,
								\%settings
							);

							if ( ($baseline_score - $new_first_score) > $current_diff ) {
								$current_diff = $baseline_score - $new_first_score;
								$swap_with = $second_judge;
								undef $swap_panel;
							}
						}
					}

					if ($swap_with) {

						$attempt_total -= $current_diff;

						my @new_first;
						foreach my $judge (@{$test_judges{$first}}) {
							push @new_first, $judge unless $judge == $first_judge;
						}
						push @new_first, $swap_with;
						@{$test_judges{$first}} = @new_first;

						my @new_first_panels;

						foreach my $panel (@{$test_panels{$first_judge}}) {
							next if $panel == $first;
							push @new_first_panels, $panel;
						}

						if ($swap_panel) {

							push @new_first_panels, $swap_panel;

							my @new_second;

							foreach my $judge (@{$test_judges{$swap_panel}}) {
								push @new_second, $judge unless $judge == $swap_with;
							}
							push @new_second, $first_judge;
							@{$test_judges{$swap_panel}} = @new_second;

						}

						@{$test_panels{$first_judge}} = @new_first_panels;

						my @new_second_panels;

						foreach my $panel (@{$test_panels{$swap_with}}) {
							next if $panel == $swap_panel;
							push @new_second_panels, $panel;
						}
						push @new_second_panels, $first;
						@{$test_panels{$swap_with}} = @new_second_panels;

					}
				}
			}
		}

		if ($current_total > $attempt_total || not defined $current_total ) {
			$current_total = $attempt_total;
			%panel_judges = %test_judges;
			%panel_flight = %test_flight;
			%judge_panels = %test_panels;
		}

	}

	foreach my $panel ($round->panels) {

		$panel->flight($panel_flight{$panel->id});
		$panel->flight(1) unless $panel_flight{$panel->id};
		$panel->update;

		next if $panel->bye;

		foreach my $judge (@{$panel_judges{$panel->id}}) {
			$m->comp(
				"/funclib/panel_judgeadd.mas",
				panel    => $panel,
				judge_id => $judge
			);
		}
	}

	my $msg = "Judges added";

	return $msg if $ARGS{"return"};

	unless ($debugme) {

		$m->redirect("/panel/round/rooms.mhtml?round_id=".$round->id)
			if $round->type eq "elim"
			|| $round->type eq "final"
			|| $round->type eq "runoff"
			|| $flights == 1;

		$m->redirect("/panel/schemat/show.mhtml?round_id=".$round->id."&disp=1&msg=$msg");

	}

	sub score_elim_panel {

		my ($panel_id, $entries_ref, $judges_ref, $mjp, $judge_panel_score, $settings) = @_;

		my $total_score;

		my $notfirst;
		my %pref_total;

		my $entry_one;
		my $entry_two;

		foreach my $entry (@{$entries_ref}) {

			foreach my $judge (@{$judges_ref}) {
				$total_score += ${$judge_panel_score}{$judge}{$panel_id};
				$pref_total{$entry} += ${$mjp}{$judge."-".$entry};
			}

			$entry_two = $entry if $entry_one;
			$entry_one = $entry unless $entry_one;
		}

		my $panel_diff = abs($pref_total{$entry_one} - $pref_total{$entry_two});

		if ($panel_diff) {
			$total_score += $panel_diff * ${$settings}{"mutuality"} * ${$settings}{"panel_mutuality"};
		}

		return $total_score;
	}


</%init>

	<div class="main">

	<h2> Wheee!!  <% $round->realname %></h2>

	<h4>Paneling total score is <% $current_total %></h4>

<%perl>

		foreach my $panel (sort {$a <=> $b} @panels) {

			my $final_score = score_elim_panel(
				$panel,
				\@{$panel_entries{$panel}},
				\@{$panel_judges{$panel}},
				\%mjp,
				\%judge_panel_score,
				\%settings
			);
</%perl>

			<div class="full row">

			 	<span class="tenth nospace marleft">

					<span class="third">
						<% $panel_bracket{$panel} %>
					</span>

					<span class="third">
						<% $panel_flight{$panel} %>
					</span>

					<div class="full padless">
						<% sprintf("%.2f", $final_score) %>
					</div>

				</span>

%				my $notfirst;

%				foreach my $entry (@{$panel_entries{$panel}}) {
					<span class="sixth">
						<% $notfirst++ ? "vs " : "" %>
						<% $entry_code{$entry} %>
					</span>
%				}

				<span class="half">

%					foreach my $judge (@{$panel_judges{$panel}}) {

						<div class="full nospace">

							<span class="third nospace">
								<% $judge_name{$judge} %>
							</span>

							<span class="third nospace">
								<% $judge_rating{$judge} > 0 ? $judge_rating{$judge} : "" %>
								<% $prefs && $prefs ne "none" ? $judge_rating{$judge."-".$panel} : "" %>
							</span>

							<span class="third">
								<% $judge_panel_score{$judge}{$panel} %>
							</span>
						</div>

%					}

				</span>

			</div>

%		}

	</div>
