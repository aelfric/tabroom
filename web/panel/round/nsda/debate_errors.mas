<%args>
	$round
	$tourn
	$event
	$tourn_settings
	$event_settings
</%args>
<%doc>

	Check the bottom for simplified display code.  There's no need to create a
	separate module file for code that will never be called by something other
	than this screen and it slows down the app considerably.

</%doc>
<%init>

	return unless $round;

    my $timeslot = $round->timeslot;

	my $aff_string = $event_settings->{"aff_string"};
	$aff_string = "Aff" unless $aff_string;

	my $neg_string = $event_settings->{"neg_string"};
	$neg_string = "Neg" unless $neg_string;

    my %tags;
    my %problems;
    my $dbh = Tab::DBI->db_Main();

    # RIGHT NUMBER OF AFF/NEGS

    my $side_locked;
    my $side_lock_against = $round->setting("sidelock_against");

    if ($side_lock_against) {

        if ($side_lock_against ne "NONE" && $side_lock_against ne "RANDOM") {
            $side_locked++;
        }

    } else {
        $side_locked++ unless ($round->name % 2);
        undef $side_locked if $event_settings->{"no_side_constraints"};
    }

	undef $side_locked if $round->type eq "elim" || $round->type eq "final";

	Tab::Entry->columns( TEMP => "othernitwit");

	if ($side_locked) {

		$tags{"sides_uneven"} = "Entries with uneven sides";

		my $sides_sth = $dbh->prepare("

			select entry.code, round.name, ballot.side

			from (entry, ballot, panel, round, ballot b2, panel p2)

				where ballot.entry = entry.id
				and ballot.panel = panel.id
				and panel.round = round.id
				and panel.bye != 1
				and ballot.bye != 1
				and round.name <= ?
				and round.event = ?
				and p2.round = ?
				and p2.id = b2.panel
				and b2.entry = entry.id

				and not exists (
					select rs.id
					from round_setting rs
					where rs.round = round.id
					and rs.tag = 'ignore_results'
				)
		");

		$sides_sth->execute($round->name, $event->id, $round->id);

		my %entry_sides;

		while (my ($entry, $round, $side)  = $sides_sth->fetchrow_array() ) {
			next if $entry_sides{$entry}{"round"}{$round}++;
			$entry_sides{$entry}{$side}++;
		}

		foreach my $entry (keys %entry_sides) {

			my $diff = abs($entry_sides{$entry}{1} - $entry_sides{$entry}{2});
			next if $diff < 2;

			$problems{"sides_uneven"} .= '<p class="redtext semibold padless marno">';
			$problems{"sides_uneven"} .= $entry." has a side imbalance:";
			$problems{"sides_uneven"} .= $entry_sides{$entry}{1}." $aff_string vs ";
			$problems{"sides_uneven"} .= $entry_sides{$entry}{2}." $neg_string";

		}

	}

    # UNSCHEDULED ENTRIES

    $tags{"unscheduled_entries"} = "Entries not on the pairing";

    unless ($round->name > 2) {

		Tab::Entry->set_sql( not_debating => "
			select entry.*
			from entry
			where entry.event = ?
			and entry.active = 1
			and not exists (
				select ballot.id
				from ballot, panel
				where panel.round = ?
				and ballot.panel = panel.id
				and ballot.entry = entry.id)" );

        foreach my $entry (Tab::Entry->search_not_debating( $event->id, $round->id )) {
			$problems{"unscheduled_entries"}.= '<p class="semibold redtext padless marno">'. $entry->code. " is not scheduled</p>";
        }
    }

	# ENTRIES SCHEDULED TOO MANY TIMES
	$tags{"double_scheduled_entries"} = "Entries on the pairing twice";

	Tab::Entry->set_sql( debating_twice => "
		select entry.*
		from entry, ballot b1, panel p1, ballot b2, panel p2

		where entry.id = b1.entry
		and b1.panel = p1.id
		and entry.id = b2.entry
		and b2.panel = p2.id

		and p1.id > p2.id
		and p1.round = ?
		and p1.round = p2.round
	");

	foreach my $entry (Tab::Entry->search_debating_twice($round->id )) {
		$problems{"double_scheduled_entries"}.= '<p class="semibold redtext padless marno">'. $entry->code. " is scheduled twice in the same round</p>";
	}

    #MEETING OWN SCHOOL
	$tags{"same_school_sections"} = "Entries debating their own school";

    my $school_hit_sth = $dbh->prepare("
		select entry.id, entry.code, opp.code
			from (entry, ballot, panel, entry opp, ballot oballot)
		where entry.id = ballot.entry
			and ballot.panel = oballot.panel
			and oballot.entry = opp.id
			and ballot.panel = panel.id
			and panel.round = ?
			and opp.school = entry.school
			and opp.id < entry.id
		group by entry.id
	");

    $school_hit_sth->execute($round->id);

	while (
		my (
			$entry_id, $entry_code, $opp_code
		) = $school_hit_sth->fetchrow_array()
	) {
		$problems{"same_school_sections"}.= '<p class="semibold redtext padless marno">'. $entry_code." and ".$opp_code." are from the same school!</p>";
	}

	if ($tourn_settings->{"nsda_nats"}) {

		#MEETING OWN STATE

		$tags{"same_state_sections"} = "Entries debating their own state";

    	my $same_state_sth = $dbh->prepare("
			select entry.id, entry.code,
				opp.code as othername

			from entry, ballot, panel, school,
			entry opp, ballot oballot, school oschool

				where entry.id    = ballot.entry
				and ballot.panel  = oballot.panel
				and oballot.entry = opp.id
				and ballot.panel  = panel.id
				and panel.round   = ?
				and opp.school != entry.school
				and opp.school    = oschool.id
				and entry.school  = school.id
				and school.region = oschool.region
				and oschool.region > 0
				and opp.id < entry.id
		");

		$same_state_sth->execute($round->id);

		while (
			my (
				$entry_id, $entry_code, $other_code
			) = $same_state_sth->fetchrow_array()
		) {
			$problems{"same_state_sections"} .= '<p class="semibold redtext padless marno">'. $entry_code;
			$problems{"same_state_sections"} .= " and ".$other_code." are from the same state!</p>";
		}
	}

    #ENTRIES PREVIOUS MET

    $tags{"hit_before"} = "Entries who have debated before";

    my $second_hit_sth = $dbh->prepare("
		select distinct me.code, opp.code othername,
			otherround.name roundname,
			me_b1.side side1, me_b2.side side2,
			otherround.type

		from entry me, entry opp, round otherround,

			ballot me_b1, ballot opp_b1, panel p1,
			ballot me_b2, ballot opp_b2, panel p2

			where me_b1.entry = me.id
			and opp_b1.entry = opp.id
			and me_b1.panel = opp_b1.panel
			and me_b1.panel = p1.id

			and p1.round = ?

			and me_b2.entry = me.id
			and opp_b2.entry = opp.id
			and me_b2.panel = opp_b2.panel
			and me_b2.panel = p2.id
			and p2.round != p1.round
			and p2.round = otherround.id

			and not exists (
				select rs.id
				from round_setting rs
				where rs.round = otherround.id
				and rs.tag = 'ignore_results'
			)

			and me.id > opp.id
	");

	$second_hit_sth->execute($round->id);

	while (
		my ($entry, $opp, $round, $side1, $side2, $type)
		= $second_hit_sth->fetchrow_array()
	) {

		$problems{"hit_before"}.= '<p class="semibold redtext padless marno">'. "Entry $entry debated $opp already in round $round ";

		$problems{"hit_before"}.= "on the SAME SIDE </p>" if $side1 == $side2;

		$problems{"hit_before"}.= "on the OPPOSITE SIDE </p>" if $side1 != $side2;

	}

    # ENTRY: HIT SAME SCHOOL TWICE IN PRESETS

    unless ($round->name > 2) {

		$tags{"same_school_twice"} = "Entries debating a school twice in presets";

		my $same_school_twice_sth = $dbh->prepare("
			select distinct me.id, me.code, otherschool.name

			from entry me, school otherschool,
				entry opp1, ballot b1, panel p1, ballot ob1,
				entry opp2, ballot b2, panel p2, ballot ob2, round r2

				where me.id = b1.entry
				and b1.panel = p1.id
				and ob1.panel = p1.id
				and opp1.id = ob1.entry
				and ob1.entry != me.id

				and me.id = b2.entry
				and b2.panel = p2.id
				and ob2.panel = p2.id
				and opp2.id = ob2.entry
				and ob2.entry != me.id

				and p1.round != p2.round
				and p1.round = ?
				and p2.round = r2.id
				and r2.type = 'prelim'

				and opp1.id != opp2.id
				and opp1.school = opp2.school
				and opp1.school = otherschool.id
		");

		$same_school_twice_sth->execute($round->id);

		while (
			my (
				$entry_id, $entry_code, $other_school
			) = $same_school_twice_sth->fetchrow_array()
		) {

			$problems{"same_school_twice"} .= '<p class="semibold redtext padless marno">'. $entry_code." hits entries from  ".$other_school." multiple times in presets. </p>";
		}

	}

    # ENTRY: SCHOOL HIT SAME SCHOOL TWICE IN PRESETS

    unless ($round->name > 2) {

		$tags{"school_same_school_twice"} = "Schools debating another twice within a preset round";

		Tab::Entry->columns( TEMP => "othercode");

		Tab::Entry->columns( TEMP => "roundname");

		my $school_same_school_twice_sth = $dbh->prepare("

			select
				me.id, me.code,
				otherschool.name othername,
				teammate.code othercode,
				round.name roundname

			from entry me, school otherschool, round,
				entry teammate,
				entry opp1, ballot b1, panel p1, ballot ob1,
				entry opp2, ballot b2, panel p2, ballot ob2

				where me.id    = b1.entry
				and b1.panel   = p1.id
				and ob1.panel  = p1.id
				and opp1.id    = ob1.entry
				and ob1.entry != me.id
				and opp1.school = opp2.school
				and opp1.school = otherschool.id
				and p1.round = round.id

				and teammate.school = me.school
				and teammate.id < me.id

				and round.id = ?

				and round.id    = p2.round
				and b2.entry    = teammate.id
				and b2.panel    = p2.id
				and ob2.panel   = p2.id
				and opp2.id     = ob2.entry
				and opp2.school = otherschool.id

				and p1.id != p2.id
				and opp1.id != opp2.id

		");

		$school_same_school_twice_sth->execute($round->id);

		while (
			my (
				$id, $entry_code,
				$otherschool_name,
				$other_code,
				$round
			) = $school_same_school_twice_sth->fetchrow_array()
		) {

			$problems{"school_same_school_twice"} .=
				'<p class="semibold redtext padless marno">'
				.$entry_code.
				" and "
				.$other_code.
				" both hit entries from "
				.$otherschool_name.
				"</p>";
		}

	}

	$dbh();

</%init>

	<div class="bluetext martopmore">
		<h5><% $round->realname %> potential errors</h5>
	</div>

%	my @tags = sort {$tags{$a} cmp $tags{$b}} keys %tags;

%	@tags = sort {length $problems{$b} <=> length $problems{$a}} @tags;

%	foreach my $tag (@tags) {

		<div class="row full marvertno">

			<span class="half <% $problems{$tag} ? "redtext semibold" : "" %>">
				<% $tags{$tag} %>
			</span>

			<span class="half nospace padleft">
				<%
					$problems{$tag}
					?  $problems{$tag}
					: '<span class="leftalign nospace full semibold greentext"> OK! </span>'
				%>
			</span>
		</div>

% 	}

