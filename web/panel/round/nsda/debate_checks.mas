<%args>
	$tourn
	$tourn_settings
	$person
	$round
	$previous_round
	$seeds   => undef
	$bracket => undef
	$whoami  => undef
</%args>
<%init>

	$m->abort unless $round;
	my $event = $round->event;

	$m->abort unless $event->tourn == $tourn->id;

	my %event_settings = $event->all_settings;

	my $aff_string = $event_settings{"aff_string"};
	$aff_string = "Aff" unless $aff_string;

	my $neg_string = $event_settings{"neg_string"};
	$neg_string = "Neg" unless $neg_string;

	my $sidelocks++;
	undef $sidelocks if $event_settings{"no_side_constraints"};

    my $no_brackets;

	if ($tourn_settings->{"nsda_nats"} && $previous_round) {
		$no_brackets++ if $previous_round->type eq "prelim";
		$no_brackets++ if $previous_round->type eq "highlow";
	}

	my @panels = sort $round->panels;
	my @round_entries = $m->comp("/funclib/round_entries.mas", round => $round);

	my %in_debate     = ();
	my %school_info   = ();
    my %panel_entries = ();

	foreach my $entry (@round_entries) {

		push @{$panel_entries{$entry->panelid}{$entry->side}}, $entry;

		$in_debate{$entry->id} = $entry->panelid;

		unless ($school_info{$entry->schoolid}) {
			$school_info{$entry->schoolid}{"name"} = $entry->schoolname;
			$school_info{$entry->schoolid}{"code"} = $entry->schoolcode;
		}
    }

	my %cross_entries = $m->comp(
		"/funclib/event_doubled.mas",
		round => $round
	);

	my %hit_before = $m->comp(
		"/funclib/event_entry_hits.mas",
		round       => $round,
		no_practice => 1
	);

	my $show_strength++ if $round->name > 2;

	undef $show_strength if $round->type eq "final";

</%init>

	<script>

		$(document).ready( function(){

%			foreach my $panel (@panels) {
				averageStrength('<% $panel->id %>');
%			}

		});

		function averageStrength(panelID) {

			var total = 0,
			counter = 0,
			average = 0,
			already = {};

			$("#panel_"+panelID).find(".strength").each(function(index) {

				var strengthScore = parseInt(this.id);

				var entryID = $(this).attr("entry");

				if (!(entryID in already)) {
					total = total + strengthScore;
					counter++;
					already[entryID]++;
				}

			});

			if (counter) {
				average = (total / counter);
			}

			$("#average_"+panelID).html(average.toFixed(2));

		}

		function toggleShow(elementType) {
			$("#"+elementType).toggleClass("invert");
			$("."+elementType).toggleClass("hidden");
		}

		function hideColor (colorToggle) {
			$(".entries").removeClass(colorToggle);
			$(".schooltoggle").removeClass('invert');
			$(".key_"+colorToggle).addClass('hidden');
		}

		function toggleColor (buttonID, keyID, clashType) {

			$("#"+buttonID).toggleClass("invert");
			$("."+buttonID).toggleClass("hidden");
			$("."+clashType+"_"+keyID).toggleClass("hidden");

			console.log("button ID is "+buttonID);

		};

        $(function() {

            $( ".droppable" ).droppable({

                hoverClass       : "ltyellow",
                accept           : ":not(.ui-sortable-helper)",
                disableSelection : "true",

                drop             : function( event, ui) {

                    var droppableId = this.id;

                    $.post("move_debate.mhtml",{
                        entry_id     : ui.draggable.attr("id"),
                        panel_marker : this.id
                    }).done(function(data) {

						if (data.error) {
							alertify.error(data.message);
						} else {

							alertify.set('notifier','delay', 2);
							alertify.notify(data.message, "custom");
							alertify.set('notifier','delay', 5);

							if (data.origin_panel && data.origin_side && data.target_entry) {
								var parentID = data.origin_panel+"_"+data.origin_side;
								$("#"+data.target_entry).appendTo("#"+parentID);
							}
						}
					});

					// remove the original element from its origin to this
					// location, and make it visible again while destroying the
					// clone.  this is necessary because the default jquery
					// draggable behavior does not play well with scrollable
					// windows.

                    ui.draggable.show();
                    $(this).prepend(ui.draggable);
                    $( this ).find( ".placeholder" ).remove();

					var panelID = $("#"+this.id).attr("panel");
					averageStrength(panelID);

					$("#"+this.id).removeClass("strength_"+panelID);


                }

            }).sortable({

                items: ":not(.placeholder)",

                sort: function() {

					// gets added unintentionally by droppable interacting with
					// sortable using connectWithSortable fixes this, but
					// doesn't allow you to customize active/hoverClass options

                    $( this ).removeClass( "ui-state-default" );
                }
            });

			$( ".draggable" ).draggable({

				drag: function(event, ui) {
					$("."+this.id).show();
				},

				stop: function(event, ui) {
					$("."+this.id).hide();

					var schoolID = $("#"+this.id).attr("school");
					var stateID = $("#"+this.id).attr("state");
					var titleName = $("#"+this.id).attr("title");

					$(".entry_school_"+schoolID).removeClass("dkred");
					$(".entry_state_"+stateID).removeClass("dkorange");

					$(".title_"+titleName).removeClass("borderblue");
					$(".hitcounter").addClass('hidden');

				},

				start: function(event, ui) {

					$(".entries").removeClass("dkred");
					$(".entries").removeClass("dkorange");
					$(".entries").removeClass("dkblue");
					$(".entries").removeClass("dkgreen");
					$(".entries").removeClass("dkgrey");

					var schoolID = $("#"+this.id).attr("school");
					var stateID = $("#"+this.id).attr("state");
					var titleName = $("#"+this.id).attr("title");

					$(".entry_school_"+schoolID).addClass("dkred");
					$(".entry_state_"+stateID).addClass("dkorange");

					if (titleName) {
						$(".title_"+titleName).addClass("dkgreen");
					}

					$("#"+this.id).hide();
					$("#"+this.id).removeClass("dkred");
					$("#"+this.id).removeClass("dkblue");
					$("#"+this.id).removeClass("dkgreen");
					$(".hit_"+this.id).removeClass("hidden");

				},

				disableSelection : "true",
				revert           : "invalid",
				containment      : '#wrapper',
				snap             : "true",
				snapMode         : "inner",
				helper           : "clone"

			});

		});

	</script>

		<div class="full nospace flexrow">

			<span class="twofifths">
				<h5><% $round->realname %> Double Checks</h5>
			</span>

			<span class="threefifths rightalign">

				<span class="semibold">
					Show:
				</span>

				<span
					id      = "schools"
					class   = "buttonwhite redtext padless"
					onClick = "toggleShow(this.id)";
				>
					Schools
				</span>

%				if ($tourn_settings->{"nsda_nats"}) {

					<span
						id      = "states"
						class   = "buttonwhite orangetext padless"
						onClick = "toggleShow(this.id)";
					>
						States
					</span>
%				}

				<span
					id      = "hits"
					class   = "buttonwhite bluetext padless"
					onClick = "toggleShow(this.id)";
				>
					Hits
				</span>


%				if ($sidelocks) {
					<span
						id      = "sides"
						class   = "buttonwhite blacktext padless"
						onClick = "toggleShow(this.id)";
					>
						Sides
					</span>
%				}


%				unless ($tourn_settings->{"nsda_nats"}) {
					<span
						id      = "crosses"
						class   = "buttonwhite graytext padless"
						onClick = "toggleShow(this.id)";
					>
						Cross
					</span>
%				}

%				if ($show_strength && (not defined $no_brackets) ) {

					<span
						id      = "bracket"
						class   = "buttonwhite orangetext padless"
						onClick = "toggleShow(this.id)";
					>
						Bracket
					</span>

%				}

			</span>

		</div>

<%perl>

		my %state;

		foreach my $panel (@panels) {

			my %schools;
			my %states;
			my %titles;
			my %side_count;

			my $side_hits;
			my $last_side_count;
			my $hit_total;

</%perl>

			<div
				class = "row"
				id    = "panel_<% $panel->id %>"
			>
				<span class="eighth semibold">
					Debate <% $panel->letter %>
%					unless ($no_brackets) {
						<div class="bluetext martop">
							<% $panel->bracket %> loss
						</div>
%					}
				</span>

%				foreach my $side ( 1 .. 2 ) {

					<span class="third">

						<span class="sixth padless marno centeralign">
%							if ($panel->bye) {
								<% $side == 1 ? "BYE:" : "" %>
%							} else {
								<%  $sidelocks ? $side == 1 ? $aff_string : $neg_string : $side %>
%							}
						</span>

						<span
							id      = "<% $panel->id %>_<% $side %>"
							panel   = "<% $panel->id %>"
							class   = "marno fivesixths centeralign bordergrey droppable side_<% $side %>"
						>
<%perl>
						foreach my $entry (@{$panel_entries{$panel->id}{$side}}) {

							$schools{$entry->schoolid}++;
							$states{$entry->regionid}++;
							$state{$entry->regionid} = $entry->regioncode;

							my $last_side;
</%perl>

							<span
								class="
									seveneighths leftalign marno
									entries draggable
									<% $last_side == $side ? "side_last" : "" %>
									entry_school_<% $entry->schoolid %>
%									if ($tourn_settings->{"nsda_nats"}) {
										entry_state_<% $entry->regionid %>
%									}
								"
								id        = "<% $entry->id %>"
								school    = "<% $entry->schoolid %>"
								district  = "<% $entry->districtcode %>"
								state     = "<% $entry->regionid %>"
								last_side = "<% $last_side %>"
							>

								<span class="marno full centeralign codes biggish"
								>
									<% $entry->code %>
								</span>

								<span
									class="full buttonhover redtext schools hidden"
								>
									<% $entry->schoolcode
										? $entry->schoolcode
										: $entry->schoolname
									%>
								</span>

%								if ($tourn_settings->{"nsda_nats"}) {
									<span
										class="full buttonhover orangetext states hidden state_<% $entry->regionid %>"
									>
										<% $entry->regioncode %>
									</span>
%								}

<%perl>
								foreach my $hit (sort keys %{$hit_before{$entry->id}}) {

									next unless $in_debate{$hit};
									next unless $hit_before{$entry->id}{$hit}{"code"};

									if ($in_debate{$hit} == $panel->id && $hit != $entry->id) {
										$hit_total = $entry->id."_".$hit;
									}
</%perl>

									<span class="full bluetext semibold centeralign martop marbottom nospace biggish hits hits_<% $panel %> hit_<% $panel %>_<% $entry %>_<% $hit %> hidden">
										<% $hit_before{$entry->id}{$hit}{"code"} %> -
										<% $hit_before{$entry->id}{$hit}{"count"} %>x
									</span>
%								}

%								foreach my $hit (sort keys %{$hit_before{$entry->id}}) {
%									next unless $in_debate{$hit};
									<span class="full buttonhover hitcounter hit_<% $hit %> hidden">
										<% $hit_before{$entry->id}{$hit}{"count"} %>x
<%perl>
											$m->print("( Rd");
											foreach my $round (sort keys %{$hit_before{$entry->id}{$hit}{rounds}}) {
												$m->print(" ".$round);
											}
											$m->print(")");
</%perl>
									</span>
%								}

%								if ($show_strength) {

									<span
										class = "full buttonhover bracket orangetext hidden"

										entry = "<% $entry->id %>"
										id    = "<% $bracket ? ${$bracket}{$entry->id} : ""  %>"
									>
										<% $bracket ? ${$bracket}{$entry->id} : ""  %>
									</span>

%								}

%								if ($sidelocks) {

									<span class = "full buttonhover sides side_<% $panel->id %> hidden" >
<%perl>

										unless ($panel->bye) {
											$side_count{$entry->id}{"A"}++ if $side == 1;
											$side_count{$entry->id}{"N"}++ if $side == 2;
										}

										foreach my $round_key (
											sort {$a <=> $b} keys %{$hit_before{$entry->id}{'sides'}}
										) {

											next if $round_key == $round->name;

											next if (
												$tourn_settings->{nsda_nats}
												&& $round->type eq "elim"
												&& $hit_before{$entry->id}{"side_types"}{$round_key} ne "elim"
											);

											my $side_string;

											if ($hit_before{$entry->id}{"sides"}{$round_key} == 1) {
												$side_string .= $round_key." A";
												$side_count{$entry->id}{"A"}++;
											}

											if ($hit_before{$entry->id}{"sides"}{$round_key} == 2) {
												$side_string .= $round_key." N";
												$side_count{$entry->id}{"N"}++;
											}


</%perl>

											<span class="sixth marno">
												<% $side_string %>
											</span>

%										}

<%perl>

										my $foo = $side_count{$entry->id}{"A"}
											- $side_count{$entry->id}{"N"};

										my $bar = $side_count{$entry->id}{"N"}
											- $side_count{$entry->id}{"A"};

										my $mod = $round->name % 2;

										if (
											( $side == 1 && ($foo > 1) )
										   	|| ($side == 2 && ($bar > 1) )
										) {

											$side_hits .= "<br />" if $side_hits;
											$side_hits .= "Sides:  <br />";
											$side_hits .= $entry->code." on ";

											if ($side_count{$entry->id}{"A"}
												> $side_count{$entry->id}{"N"}
											) {
												$side_hits .= "A";
												$side_hits .= " ".$side_count{$entry->id}{"A"}."x";
											}

											if ($side_count{$entry->id}{"N"}
												> $side_count{$entry->id}{"A"}
											) {
												$side_hits .= "N";
												$side_hits .= " ".$side_count{$entry->id}{"N"}."x";
											}

										}
</%perl>

									</span>

%								}

%								unless ($tourn_settings->{"nsda_nats"}) {
									<span
										class="full buttonhover croses code_<% $panel->id %> hidden"
									>

%									foreach my $other (keys %{$cross_entries{$entry->id}}) {

										<span class="full nospace">
											<% $cross_entries{$entry->id}{$other}{"event"} %>
										</span>
%									}

									</span>
%								}

							</span>

%						}

						</span>

					</span>
%				}

				<span class="fifth rightalign">

					<div class="full">

%					my $blah;

%					foreach my $key (keys %schools) {

%						next unless $schools{$key} > 1;
%						$blah++;

						<span
							id      = "<% $key %>_<% $panel->id %>"
							class	= "schooltoggle buttonwhite marbottom redtext padless smallish full"
							onClick = "toggleColor(
								this.id,
								<% $key %>,
								'school',
							);"
						>
							<% $schools{$key} %> from School
							<% $school_info{$key}{"code"}
								?  $school_info{$key}{"code"}
								:  $school_info{$key}{"name"}
							%>

						</span>

%					}

%					if ($tourn_settings->{"nsda_nats"}) {

%						foreach my $key (keys %states) {
%							next unless $states{$key} > 1;
%							$blah++;

							<span
								id      = "<% $key %>_<% $panel->id %>"
								class	= "statetoggle buttonwhite marbottom semibold orangetext padless biggish full centeralign wrap"
								onClick = "toggleColor(
									this.id,
									'<% $key %>',
									'state',
								);"
							>
								<% $states{$key} %> from <% $state{$key} %>
							</span>

%						}
%					}

%					foreach my $key (keys %schools) {

%						next unless $schools{$key} > 1;
%						$blah++;

						<span
							id      = "<% $key %>_<% $panel->id %>"
							class	= "schooltoggle buttonwhite marbottom redtext padless smallish full"
							onClick = "toggleColor(
								this.id,
								<% $key %>,
								'school'
							);"
						>
							<% $schools{$key} %> from School
							<% $school_info{$key}{"code"}
								?  $school_info{$key}{"code"}
								:  $school_info{$key}{"name"}
							%>

						</span>

%					}

%					if ($last_side_count) {

%						$blah++;

						<span
							id      = "last_side_<% $panel->id %>"
							class	= "last_sidetoggle buttonwhite marbottom padless smallish full"
							onClick = "toggleColor(
								this.id,
								'last',
								'side',
							);"
						>
							<% $last_side_count %> same side R<% $round->name - 1 %>
						</span>
%					}

%					if ($side_hits) {
%						$blah++;
						<span
							id      = "side_<% $panel->id %>"
							class	= "centeralign sidetoggle buttonwhite marbottom padless smallish full"
							onClick = "toggleColor(
								this.id,
								'side',
								'side',
							);"
						>
							<% $side_hits %>
						</span>
%					}

%					if ($hit_total) {
%						$blah++;
						<span
							id      = "hit_<% $panel->id %>_<% $hit_total %>"
							class	= "hittoggle buttonwhite marbottom padless smallish full centeralign"
							onClick = "toggleColor(
								this.id,
								'hits',
								'hits',
							);"
						>
							Repeat Hits
						</span>
%					}

%					unless ($blah) {
						<span class="buttonwhite greentext padless">
							<span class="fa fa-check fa-lg greentext">
							</span>

							OK!
						</span>
%					}

				</div>

			</div>
%		}

%		undef %panel_entries;

		<& "debate_errors.mas",
			round          => $round,
			event          => $event,
			tourn          => $tourn,
			tourn_settings => $tourn_settings,
			event_settings => \%event_settings
		&>

