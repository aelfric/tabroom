<%args>
	$tourn
	$tourn_settings
	$round_id => undef
</%args>
<%init>

	my $round = Tab::Round->retrieve($round_id);

	unless ($round) {
		$m->comp("/funclib/abort.mas", message =>  "No valid Congress session found for ID $round_id");
	}

	my $event = $round->event;

	my @ties = $m->comp("/funclib/congress_ties.mas", round => $round);

	unless (@ties) {
		push @ties, $round;
	}

	my $first = $ties[0];

	my @panels = $first->panels;

	my $am_po;

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select
			event.id, event.name, event.abbr, event.type,
			round.id, round.name, round.type,
			panel.id, panel.letter

		from (event, event_setting es, round, panel, ballot)

		where event.tourn = ?
			and event.type = 'congress'
			and event.id = es.event
			and event.id != es.value
			and es.tag = 'po_contest'
			and es.value = ?
			and event.id = round.event
			and round.name = ?
			and round.id = panel.round
			and panel.id = ballot.panel
	");

	$sth->execute( $tourn->id, $event->id, $round->name );

	my %po_contest;

	while (
		my (
			$event_id, $event_name, $event_abbr, $event_type,
			$round_id, $round_name, $round_type,
			$panel_id, $panel_letter,
			$judge_id, $judge_last, $ballot_chair
		) = $sth->fetchrow_array()
	) {

		$po_contest{"exists"}++;
		$po_contest{"panels"}{$panel_letter} = $panel_id;

		$po_contest{"round"} = $round_name;
		$po_contest{"round_id"} = $round_id;
		$po_contest{"round_type"} = $round_type;

		$po_contest{"event"} = $event_name;
		$po_contest{"event_id"} = $event_id;
		$po_contest{"event_abbr"} = $event_abbr;
	}

	if ($po_contest{"exists"}) {
		$po_contest{"num_panels"} = scalar( keys %{$po_contest{"panels"}} );
	}

</%init>

	<div class="main">

		<span class="twothirds nospace">
			<h4>Chamber Assignments</h4>
		</span>
		<span class="third rightalign semibold bluetext nospace">
			Currently <% scalar $round->panels %> chambers
		</span>

		<div class="ltbordervert odd full">
			<span class="quarter nospace">
				<h6 class="semibold bluetext">Linked Sessions</h6>
			</span>
			<span class="threequarters biggish semibold bluetext">
%				foreach my $tie (@ties) {
					<span class="sixth">
						<% $tie->realname %>
					</span>
%				}
			</span>
		</div>

		<p>
			All these sessions are scored together and should have the same
			chamber assignments and parliamentarians.
		</p>

		<p>
			To alter, select Settings on the pairing for a round under
			Schemats :: <% $event->abbr %>, and change the "Tie session to
			another" setting.
		</p>

		<h5 class="padvertmore">Options</h5>

		<form
			action="panel_master.mhtml"
			method="post"
		>
			<input
				type  = "hidden"
				name  = "round_id"
				value = "<% $round->id %>"
			>
%			unless ($po_contest{"exists"}) {

%				if (@panels) {

					<label for="wipe">
						<div class="row hover">
							<span class="fifth semibold">
								Wipe &amp; resection
							</span>
							<span class="fifth centeralign">
								<input
									type     = "radio"
									name     = "congress_method"
									value    = "wipe"
									id       = "wipe"
									onChange = "checkWipe();"
								>
							</span>
							<span class="threefifths linespaced">
								This option makes new chamber assignments and
								place them in ALL <% scalar @ties %> sessions
								listed above.  Deletes all rounds, results, records.
							</span>
						</div>
					</label>

%					if (scalar @ties > 1) {
						<label for="realign">
							<div class="row hover">
								<span class="fifth semibold">
									Re-align sessions
								</span>
								<span class="fifth centeralign">
									<input
										id       = "realign"
										type     = "radio"
										name     = "congress_method"
										value    = "realign"
										onChange = "checkWipe();"
									>
								</span>
								<span class="threefifths linespaced">
									Copies assignments from <% $first->realname %> into
									the other <% scalar @ties - 1 %> sessions.  Does
									change parliamentarians, does NOT change or copy
									scorers.
								</span>
							</div>
						</label>
%					}

%					if ($first && $first != $round->id) {

						<label for="single">
							<div class="row hover">
								<span class="fifth semibold">
									Re-align <% $round->realname %> only
								</span>
								<span class="fifth centeralign">
									<input
										id       = "single"
										type     = "radio"
										name     = "congress_method"
										value    = "single"
										onChange = "checkWipe();"
									>
								</span>
								<span class="threefifths linespaced">
									Copies assignments from <% $first->realname %> into
									<% $round->realname %>.
									Does copy parliamentarians, does NOT change or
									copy scorers.
								</span>
							</div>
						</label>
%					}
%				} else {

					<div class="row hover">
						<span class="fifth semibold padsetting">
							Section
						</span>
						<span class="fourfifths">
							This process will make new chamber assignments and
							place them in ALL <% scalar @ties %> sessions
							listed above.
						</span>
					</div>

					<input
						id    = "wipe"
						type  = "hidden"
						name  = "congress_method"
						value = "wipe"
					>
%				}
%			}

%			if ($po_contest{"exists"}) {
				<div class="row">
					<span class="fifth semibold padsetting">
						PO Contest
					</span>
					<span class="fourfifths padvert">
						This event is the PO contest for <%
						$po_contest{"event"} %>.  Its chambers will be
						linked to the same chambers for that session number.
						Judges will be cross assigned.  However, as of yet,
						judge and sectioning constraints for PO must be done
						manually.
					</span>
				</div>
%			}

<%perl>

			my $minpanelsize = $event->setting("min_panel_size");
			my $maxpanelsize = $event->setting("max_panel_size");
			my $panelsize = $event->setting("default_panel_size");

			$minpanelsize = 15 unless $minpanelsize;
			$maxpanelsize = 30 unless $maxpanelsize;
			$panelsize = 20 unless $panelsize;

			my $num_entries = scalar $event->entries(active => 1);

			my $num_chambers = POSIX::ceil($num_entries / $panelsize);
			$num_chambers = 1 if $num_chambers < 1;

			my $max_panels = POSIX::ceil($num_entries / $minpanelsize);
			my $min_panels = POSIX::ceil($num_entries / $maxpanelsize);
			my $num_panels = POSIX::ceil($num_entries / $panelsize);


			if ($po_contest{"exists"}) {
				$num_panels = $po_contest{"num_panels"};
</%perl>
				<div class="nospace martopmuchmore">

					<h5>
						Chambers
					</h5>

					<div class="row padvert">
						<span class="fifth semibold">
							Number of Chambers
						</span>
						<span class="seventh padvert">
							<% $num_panels %>
							<input
								type  = "hidden"
								name  = "num_panels"
								value = "<% $num_panels %>"
							>
						</span>

						<span class="twenty centeralign padvertmore">
							<input
								type  = "hidden"
								name  = "po_contest"
								value = "<% $po_contest{"round_id"} %>"
							>
						</span>

						<span class="threefifths linespaced">
							Matches Session <% $po_contest{"round_name"} %> of <% $po_contest{"event_abbr"} %>
						</span>
					</div>


%			} else {

%				if (@panels) {
					<script>
						function checkWipe() {

							if ($('#wipe').is(':checked')) {
								$(".resections").removeClass("hidden");
							} else if ($('#realign').is(':checked')) {
								$(".resections").addClass("hidden");
							} else if ($('#single').is(':checked')) {
								$(".resections").addClass("hidden");
							}

							zebraRows();
						}

						$(document).ready(function() {
							checkWipe();
						});
					</script>
%				}

				<span class="nospace full resections <% @panels ? "hidden" : "" %> martopmuchmore">

					<h5>
						Chambers
					</h5>

					<div class="row padvert">
						<span class="fifth semibold">
							Number of Chambers
						</span>
						<span class="seventh padvert">
							<input
								type  = "number"
								name  = "num_panels"
								value = "<% $num_panels %>"
								min   = 1
								max   = 999
							>
						</span>

						<span class="twenty centeralign padvertmore">
						</span>

						<span class="threefifths linespaced">
							Minimum <% $min_panels %> of <% $maxpanelsize %>,
							Maximum <% $max_panels %> of <% $minpanelsize %>
						</span>
					</div>

					<label for="parliamentarians">
						<div class="resections row hover">
							<span class="fifth semibold">
								Parliamentarians
							</span>
							<span class="twenty centeralign padvertmore">
								<input
									id    = "parliamentarians"
									type  = "checkbox"
									name  = "parliamentarians"
									value = "1"
								>
							</span>
							<span
								class="seventh centeralign"
							></span>
							<span class="threefifths linespaced">
								Assigns parliamentarians to all <% scalar @ties %>
								sessions of the new panels.  Uses any/all judges
								with "Parli" flag marked first.  Same
								parliamentarians are assigned to all sessions of a
								chamber.
							</span>
						</div>
					</label>

					<label for="scorers">
						<div class="resections row hover">
							<span class="fifth semibold">
								Scorers
							</span>
							<span class="twenty centeralign padvertmore">
								<input
									id    = "scorers"
									type  = "checkbox"
									name  = "scorers"
									value = "1"
								>
							</span>
							<span
								title="Number of scorers to assign"
								class="seventh centeralign"
							>
								#
								<input
									type  = "number"
									name  = "num_judges"
									min   = 1
									max   = 999
									value = "<% $round->setting("num_judges") ? $round->setting("num_judges") : 2 %>"
								>
							</span>

							<span class="threefifths linespaced">
								Assigns scorers to all <% scalar @ties %> sessions of the new chambers.
								Avoids judges with "Parli" flag marked first.  Different set of
								scorers assigned each session.
							</span>

						</div>
					</label>

					<label for="rooms">
						<div class="resections row hover">
							<span class="fifth semibold">
								Rooms
							</span>
							<span class="twenty centeralign padvertmore">
								<input
									id    = "rooms"
									type  = "checkbox"
									name  = "rooms"
									value = "1"
								>
							</span>
							<span
								class="seventh centeralign"
							></span>
							<span class="threefifths linespaced">
								Assigns rooms to all <% scalar @ties %> sessions of the new panels.
								Same rooms are assigned to all sessions of a chamber.
							</span>
						</div>
					</label>
				</span>

%			}

			<div class="libl row rightalign">
				<span class="quarter centeralign">
					<input
						type="submit"
						value="Set Chambers"
					>
				</span>
			</div>

		</form>
	</div>
