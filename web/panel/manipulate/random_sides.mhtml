<%args>
	$round_id
	$from => undef
</%args>
<%perl>

	# this is overengineered because I copied it from snake_sides and made it
	# random because I am le tired and we're close to perl code freeze.


	my $debug = 0;
	my $round = Tab::Round->retrieve($round_id);

	#load current things

	my ($entry_by_id_hash_ref, $precluded_hash_ref)
		= $m->comp(
			"/funclib/make_pairing_hash.mas",
			round_id => $round_id
		);

	my %entry_by_id = %{$entry_by_id_hash_ref};

	#set to zero unless bye
	foreach my $key ( keys %entry_by_id ) {
		if ($entry_by_id{$key}{'opponent'} > -1 ) { $entry_by_id{$key}{'sidedue'} = 0; }
	}

	# If one school dominates the bracket, put them all on the same side count
	# up max at same school

	my %school_entries;

	foreach my $school_id ( keys %entry_by_id ) {
		$school_entries{$entry_by_id{$school_id}{'school'}}++ ;
	}

	my $max_entries;
	my $largest_school;

	foreach my $school_id ( keys %school_entries ) {
	    if ( $school_entries{$school_id} > $max_entries ) {
			$max_entries = $school_entries{$school_id};
			$largest_school = $school_id;
		}
	}

	my $num_entries = scalar keys %entry_by_id;
	my $pct_of_draw = $max_entries / ($num_entries/2) ;

	# put all of huge school on same side of the bracket if appropriate

	unless ($round->event->setting("snake_sides_huge_schools")) {
		if ( $pct_of_draw > .3 && $pct_of_draw <.5 ) {
			foreach my $key ( keys %entry_by_id ) {
				if ($entry_by_id{$key}{'school'} == $largest_school) {
					$entry_by_id{$key}{'sidedue'} = 1;
					$entry_by_id{$entry_by_id{$key}{'opponent'}}{'sidedue'} = 2;
				}
			}
		}
	}

	#set sides
	foreach my $key (sort {$entry_by_id{$a}->{'seed'} <=> $entry_by_id{$b}->{'seed'}} keys(%entry_by_id)) {
		if ($key > 0 and $entry_by_id{$key}{'sidedue'} == 0 and $entry_by_id{$key}{'opponent'} != -1 ) {

			my $opponent = $entry_by_id{$key}{'opponent'};
			my $switch = int(rand(10));

			if ($switch++ % 2) {
				$entry_by_id{$key}{'sidedue'} = 1;
				$entry_by_id{$opponent}{'sidedue'} = 2;
			} else {
				$entry_by_id{$key}{'sidedue'} = 2;
				$entry_by_id{$opponent}{'sidedue'} = 1;
			}
		}
	}

	#save 'em

	#pull current pairings

	Tab::Panel->columns(TEMP => qw/aff_entry neg_entry/);

	Tab::Panel->set_sql( current_round => "
		select panel.*, b1.entry as aff_entry, b2.entry as neg_entry

		from (panel)
		left join ballot b1 on b1.panel = panel.id and b1.side = 1
		left join ballot b2 on b2.panel = panel.id and b2.side = 2
		where panel.round = ?
	");

	my @panels = Tab::Panel->search_current_round($round_id);

	foreach my $panel (@panels) {

		next if $panel->bye;

		if ($entry_by_id{$panel->aff_entry}{"sidedue"} == 2) {
			$m->comp("/funclib/swap_sides.mas", panel => $panel);
		}
	}

	$round->setting("sides_not_set", 0);

	my $msg = "Sides set for odd-numbered round. ";
  	$msg = "Round paired. " if $from eq "autopair";

	return if $from eq "autopair";

	$m->redirect("/panel/schemat/show.mhtml?round_id=$round_id&msg=$msg") if $from eq "schemat";

	$m->redirect("manual_powermatch.mhtml?round_id=$round_id&msg=$msg");

</%perl>
