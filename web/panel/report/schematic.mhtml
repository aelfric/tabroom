<%args>
	$tourn
	$session
	$tourn_settings
	$person_settings
	$event_id    => undef
	$site_id     => undef
	$round_id    => undef
	$timeslot_id => undef
</%args>
<%init>

	my $round = Tab::Round->retrieve($round_id) if $round_id;

	$m->comp("/funclib/online_usage.mas",
		tourn    => $tourn,
		env      => \%ENV,
		district => $tourn_settings->{"nsda_district"}
	);

	my $event;

	if ($round && (not defined $event_id)) {
		$event = $round->event;
		$event_id = $event->id
	} elsif ($event_id) {
		$event = Tab::Event->retrieve($event_id);
	}

	my @events;

	if ($event_id eq "all") {
		@events = $tourn->events;
	} elsif ($event) {
		push (@events, $event);
	}

	unless (@events) {
		$m->comp("/funclib/abort.mas", message => "I wasn't sent a valid event ID.  Something is wrong");
	}

	my $orientation = $events[0]->setting("schem_orientation");

	unless ($orientation) {
		if ($events[0]->setting("code_length") eq "short") {
			$orientation = "horizontal";
		} else {
			$orientation = "vertical";
		}
	}

	my $flighted++ if $round
		&& $event->type ne "speech"
		&&  $round->flighted == 2;

	$flighted++ if $round
		&& $event->type eq "congress"
		&& $orientation eq "vertical";


	@events = sort {$a->name cmp $b->name} @events;
	my @sites = $tourn->sites;

	my @timeslots;

	if ($timeslot_id eq "all") {
		@timeslots = $tourn->timeslots;
		undef $timeslot_id;
	} else {
		push (@timeslots, Tab::Timeslot->retrieve($timeslot_id)) if $timeslot_id;
		push (@timeslots, $round->timeslot) if $round;
	}

	@timeslots = sort {$a->start->epoch <=> $b->start->epoch} @timeslots;

	foreach my $timeslot (@timeslots) {
		foreach my $event (@events) {
			my @rounds = Tab::Round->search(event => $event->id, timeslot => $timeslot->id);
			foreach my $round (@rounds) {
				$flighted++ if $round->flighted == 2 && $event->type ne "speech";
			}
		}
	}

	my $name = $events[0]->name if $event_id ne "all";
	$name = "ALL" unless $name;
    $name =~ s/[\W_]//g;

	my $round_name .= "-".$round->realname if $round;
	$round_name = "-ALL" unless $round_name;
    $round_name =~ s/[\W_]//g;

	my $timeslot_name .= "-".$timeslots[0]->name if $timeslot_id;
	$timeslot_name = "-ALL" unless $timeslot_id;
    $timeslot_name =~ s/[\W_]//g;

	my $by_judge_name = "ByJudge-" if $ARGS{"by_judge"};

    my $filename = "Schematic-$by_judge_name"."$name-$round_name-$timeslot_name-".$session->id;
    my $filepath = $Tab::file_root."tmp/".$filename;

	my $taller++ unless $flighted;
	undef $flighted if $ARGS{"list_by_entry"};

    $m->comp("/funclib/printout.mas",
		tourn     => $tourn,
		filename  => $filename,
		head      => 1,
		wide      => 1,
		array     => "1.3",
		landscape => $flighted,
		fontsize  => $person_settings->{"fontsize"},
		taller    => $taller
	);

	open (TEXOUT, ">>$filepath.tex");

	if ($round) {

		if ($ARGS{"list_by_entry"}) {

			$m->comp("schemat/round_print_entrylist.mas",
				round_id       => $round->id,
				tourn_settings => $tourn_settings,
				fontsize       => $person_settings->{"fontsize"},
				filename       => $filename
			);

		} elsif ($ARGS{"list_by_judge"}) {

			$m->comp("schemat/round_print_judgelist.mas",
				round_id       => $round->id,
				tourn_settings => $tourn_settings,
				fontsize       => $person_settings->{"fontsize"},
				filename       => $filename
			);

		} else {

			undef $flighted if $event->type eq "speech";
			undef $flighted if $event->type eq "congress";

			next unless $round->panels;

			if ($event->type eq "speech") {

				if ($orientation eq "vertical") {

					$m->comp("schemat/round_print_speech_vertical.mas",
						round_id       => $round->id,
						fontsize       => $person_settings->{"fontsize"},
						filename       => $filename,
						by_section     => $ARGS{"by_section"},
						tourn_settings => $tourn_settings,
						states         => $ARGS{"states"},
						schools        => $ARGS{"schools"}
					);

				} else {

					$m->comp("schemat/round_print_speech_horizontal.mas",
						round_id       => $round->id,
						fontsize       => $person_settings->{"fontsize"},
						filename       => $filename,
						tourn_settings => $tourn_settings,
						by_section     => $ARGS{"by_section"},
						states         => $ARGS{"states"},
						schools        => $ARGS{"schools"}
					);
				}

			} elsif ($event->type eq "congress") {

				if ($orientation eq "vertical") {

					$m->comp("schemat/round_print_congress_vertical.mas",
						round_id       => $round->id,
						filename       => $filename,
						fontsize       => $person_settings->{"fontsize"},
						schools        => $ARGS{"schools"},
						states         => $ARGS{"states"},
						by_section     => $ARGS{"by_section"},
						tourn_settings => $tourn_settings,
						tourn          => $tourn
					);

				} else {

					$m->comp("schemat/round_print_congress_horizontal.mas",
						round_id       => $round->id,
						filename       => $filename,
						fontsize       => $person_settings->{"fontsize"},
						schools        => $ARGS{"schools"},
						states         => $ARGS{"states"},
						by_section     => $ARGS{"by_section"},
						tourn_settings => $tourn_settings,
						tourn          => $tourn
					);

				}

			} elsif ($event->type eq "wudc") {

				$m->comp("schemat/round_print_wudc.mas",
					round_id       => $round->id,
					filename       => $filename,
					fontsize       => $person_settings->{"fontsize"},
					tourn_settings => $tourn_settings,
					states         => $ARGS{"states"},
					schools        => $ARGS{"schools"}
				);

			} else {

				$m->comp("schemat/round_print_debate.mas",
					round_id       => $round->id,
					filename       => $filename,
					fontsize       => $person_settings->{"fontsize"},
					judge_codes    => $ARGS{"judge_codes"},
					schools        => $ARGS{"schools"},
					states         => $ARGS{"states"},
					record         => $ARGS{"record"},
					tourn_settings => $tourn_settings,
					by_section     => $ARGS{"by_section"},
					by_judge       => $ARGS{"by_judge"}
				);

			}
		}

		if ($round->setting("notes")) {
			print TEXOUT "\\strut\n";
			print TEXOUT "\\medskip\n";
			print TEXOUT "\\newline\n";
			print TEXOUT "\\normalsize\n";
			print TEXOUT Tab::texify($round->setting("notes"));
		}

		print TEXOUT "\\newpage\n" unless $ARGS{"no_break"};

	} else {

		EVENT:
		foreach my $event (@events) {

			undef $flighted if $event->type eq "speech";
			undef $flighted if $event->type eq "congress";

			TIMESLOT:
			foreach my $timeslot (@timeslots) {

				my @rounds;

				if (scalar @sites > 1 && $site_id ne "all") {
					@rounds = Tab::Round->search(
						event    => $event->id,
						timeslot => $timeslot->id,
						site     => $site_id
					);
				} else {
					@rounds = Tab::Round->search(
						event    => $event->id,
						timeslot => $timeslot->id
					);
				}

				unless ($timeslot) {
					print TEXOUT "\\huge TAB ROOM COPY: ". $event->name ." \\\\ \n" if $ARGS{"schools"};
					print TEXOUT "\\huge ". $event->name ." \\\\ \n" unless $ARGS{"schools"};
				}

				foreach my $round (@rounds) {

					next unless $round->panels;
					next unless $m->comp("/funclib/round_entries.mas", round => $round);

					if ($event->type eq "speech") {

						if ($orientation eq "vertical") {

							$m->comp("schemat/round_print_speech_vertical.mas",
								round_id       => $round->id,
								filename       => $filename,
								tourn_settings => $tourn_settings,
								fontsize       => $person_settings->{"fontsize"},
								schools        => $ARGS{"schools"}
							);

						} else {

							$m->comp("schemat/round_print_speech_horizontal.mas",
								round_id       => $round->id,
								fontsize       => $person_settings->{"fontsize"},
								filename       => $filename,
								tourn_settings => $tourn_settings,
								schools        => $ARGS{"schools"}
							);
						}

					} elsif ($event->type eq "congress") {

						if ($orientation eq "vertical") {

							$m->comp("schemat/round_print_congress_vertical.mas",
								round_id       => $round->id,
								filename       => $filename,
								fontsize       => $person_settings->{"fontsize"},
								schools        => $ARGS{"schools"},
								tourn_settings => $tourn_settings,
								tourn          => $tourn
							);

						} else {

							$m->comp("schemat/round_print_congress_horizontal.mas",
								round_id       => $round->id,
								filename       => $filename,
								fontsize       => $person_settings->{"fontsize"},
								schools        => $ARGS{"schools"},
								tourn_settings => $tourn_settings,
								tourn          => $tourn
							);

						}

					} elsif ($event->type eq "wudc") {

						$m->comp("schemat/round_print_wudc.mas",
							round_id => $round->id,
							filename => $filename,
							fontsize => $person_settings->{"fontsize"},
							schools  => $ARGS{"schools"}
						);

					} else {

						$m->comp("schemat/round_print_debate.mas",
							round_id       => $round->id,
							filename       => $filename,
							fontsize       => $person_settings->{"fontsize"},
							by_judge       => $ARGS{"by_judge"},
							record         => $ARGS{"record"},
							tourn_settings => $tourn_settings,
							schools        => $ARGS{"schools"}
						);
					}

					if ($round->setting("notes")) {
						print TEXOUT "\\medskip\n";
						print TEXOUT "\\newline\n";
						print TEXOUT "\\normalsize\n";
						print TEXOUT Tab::texify($round->setting("notes"));
					}

					print TEXOUT "\\bigskip\n";
					print TEXOUT "\\newpage\n" unless $ARGS{"no_break"} || $ARGS{"event_break"};
					print TEXOUT "\\newline\n" if $ARGS{"no_break"} || $ARGS{"event_break"};
				}
			}

			if ($ARGS{"event_break"}) {
				print TEXOUT "\\newpage\n";
			}
		}
	}

	close TEXOUT;

    $m->comp("/funclib/printout.mas",
		tourn     => $tourn,
		filename  => $filename,
		tail      => 1,
		landscape => $flighted
	);

</%init>
