<%args>
	$session
	$event_id
	$tourn
	$tourn_settings
	$sort_by => undef
</%args>
<%init>

	my $event = Tab::Event->retrieve($event_id);

    unless ($event) {
		my $err =  "You did not specify an event to print debate cards.  Please try again";
		$m->redirect("/panel/printouts.mhtml&err=$err");
	}

	my $name = $event->name;
	$name =~ s/[\W_]//g;

	my $filename = "DebateCards-$name-".$session->id;
	my $filepath = $Tab::file_root."tmp/".$filename;

	$m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		head     => 1,
		taller   => 1
	);

	open (TEXOUT, ">>$filepath.tex");
	print TEXOUT "\\smallskip\n";

	my @rounds = $event->rounds;
	my $min_rounds = 8 if $tourn_settings->{"nsda_district"};
	$min_rounds = 6 unless $min_rounds;

	my %tb_types;
	my %done_protocol;

	foreach my $round (@rounds) {

		%tb_types = $m->comp(
			"/funclib/tiebreak_types.mas",
			round => $round
		);
	}

	my $count_tbs++ if $tb_types{"rank"};
	$count_tbs++ if $tb_types{"point"};
	$count_tbs++ if $tb_types{"winloss"};

	my $dbh = Tab::DBI->db_Main();

	my %judge_name;
	my %judge_last;
	my %student_code;
	my %student_name;

	my $judge_sth = $dbh->prepare("
		select distinct judge.id, judge.first, judge.last
		from judge, ballot, panel, round
		where round.event = ?
		and round.id = panel.round
		and panel.id = ballot.panel
		and ballot.judge = judge.id
	");

	$judge_sth->execute($event->id);

	while (my ($id, $first, $last)  = $judge_sth->fetchrow_array() ) {
		$judge_name{$id} = $last.", ".$first;
		$judge_last{$id} = $last;
	}

	my $student_sth = $dbh->prepare("
		select student.id, student.first, student.last,
			school.name,
			entry.id, entry.code, entry.name, entry.dropped
		from student, entry_student, entry, school
		where entry.event = ?
		and entry.id = entry_student.entry
		and entry_student.student = student.id
		and entry.school = school.id
		and entry.waitlist = 0

		order by student.id
	");

	$student_sth->execute($event->id);

	my %entry_code;
	my %entry_drop;
	my %entry_name;
	my %entry_students;
	my %entry_school_name;
	my @entries;

	while (my ($id, $first, $last,
			$school_name,
			$entry, $entry_code, $entry_name, $drop
		)  = $student_sth->fetchrow_array()

	) {
		$student_code{$id} = substr(uc($first),0,1).substr(uc($last),0,1);
		$student_name{$id} = $first." ".$last;
		push @{$entry_students{$entry}}, $id;
		$entry_code{$entry} = $entry_code;
		$entry_drop{$entry} = $drop;
		$entry_name{$entry} = $entry_name;
		$entry_school_name{$entry} = $school_name;
		push @entries, $entry;
	}

	my %e_seen = ();
	@entries = grep { ! $e_seen{$_} ++ } @entries;

	my $rounds_sth = $dbh->prepare("
		select distinct entry.id, round.id, panel.bye,
			ballot.bye, ballot.side, ballot.judge, ballot.forfeit
		from entry, round, panel, ballot
		where entry.event = ?
			and entry.id = ballot.entry
			and ballot.panel = panel.id
			and panel.round = round.id
		group by ballot.id
		order by ballot.judge
	");

	$rounds_sth->execute($event->id);

	my %round_side;
	my %round_judge;

	while (my ($id, $round, $pbye, $bbye, $side, $judge, $fft)  = $rounds_sth->fetchrow_array() ) {
		$round_side{$id."-".$round} = "A" if $side == 1;
		$round_side{$id."-".$round} = "N" if $side == 2;
		$round_side{$id."-".$round} = "BYE" if $pbye || $bbye;
		$round_side{$id."-".$round} = "FFT" if $fft;
		$round_judge{$id."-".$round} .= " ".$judge_name{$judge};
	}


	my $results_sth = $dbh->prepare("
		select distinct entry.id, round.id, round.name,
			score.tag, score.value,
			opp.id, score.student, ballot.judge
		from entry, round, panel, ballot, score, ballot opp_ballot, entry opp
		where entry.event = ?
			and entry.id = ballot.entry
			and panel.round = round.id
			and ballot.panel = panel.id
			and ballot.id = score.ballot
			and opp_ballot.panel = panel.id
			and opp_ballot.entry != ballot.entry
			and opp.id = opp_ballot.entry
		group by score.id
		order by ballot.judge,
			score.tag
	");

	$results_sth->execute($event->id);

	my $opponents_sth = $dbh->prepare("
		select distinct entry.id, round.id, opp.id, ballot.judge
		from entry, round, panel, ballot, ballot opp_ballot, entry opp
		where entry.event = ?
			and entry.id = ballot.entry
			and panel.round = round.id
			and ballot.panel = panel.id
			and opp_ballot.panel = panel.id
			and opp_ballot.entry != ballot.entry
			and opp.id = opp_ballot.entry
		group by ballot.id
		order by ballot.judge
	");

	$opponents_sth->execute($event->id);

	my %round_opp;
	my %round_judges;

	while (my ($id, $round, $opp, $judge)  = $opponents_sth->fetchrow_array() ) {
		push @{$round_judges{$id."-".$round}}, $judge;
		$round_opp{$id."-".$round} = $entry_code{$opp};
	}

	my %round_winloss;
	my %round_points;
	my %round_ranks;

	my $max_round;
	my $max_round_name;

	while (my ($id, $round, $round_name, $tag, $value, $opp, $student, $judge)
		= $results_sth->fetchrow_array()
	) {

		if ($max_round_name < $round_name) {
			$max_round = $round;
			$max_round_name = $round_name;
		}

		if ($round_side{$id."-".$round} eq "BYE") {

			if ($tag eq "winloss") {
				$round_winloss{$id."-".$round."-".$judge} = "BYE" if $value == 1;
				$round_winloss{$id."-".$round."-".$judge} = "FFT" unless $value == 1;
			}

		} else {

			if ($tag eq "winloss") {
				$round_winloss{$id."-".$round."-".$judge} = "W" if $value == 1;
				$round_winloss{$id."-".$round."-".$judge} = "L" unless $value == 1;
			}
		}

		if ($tag eq "point") {
			$round_points{$id."-".$round."-".$judge."-".$student} .= $value;
		}

		if ($tag eq "rank") {
			$round_ranks{$id."-".$round."-".$judge."-".$student} .= $value;
		}
	}

	my $last_round = Tab::Round->retrieve($max_round);

	my ($entries_ref, $tbs_ref, $desc_ref, @whatever)
		= $m->comp("/tabbing/results/order_entries.mas", round => $last_round);

	my %entry_seed;

	foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
		foreach my $entry_id (@{${$entries_ref}{$key}}) {
			$entry_seed{$entry_id} = $key;
		}
	}

	my $max_entry = $event->setting('max_entry');

	$count_tbs += ($max_entry - 1) if $tb_types{"point"};
	$count_tbs += ($max_entry - 1) if $tb_types{"rank"};

	print TEXOUT "\\renewcommand{\\arraystretch}{1.8}\n";
	print TEXOUT "\\setlength{\\tabcolsep}{6.2pt}";
	print TEXOUT "\\setlength{\\doublerulesep}{0pt}";

	foreach my $entry (sort{$entry_code{$a} cmp $entry_code{$b}} @entries) {

		next if $entry_drop{$entry};

		print TEXOUT "\\noindent\n";
		print TEXOUT "\\begin{minipage}{7.in}";

		print TEXOUT "\\begin{minipage}{4in} ";
		print TEXOUT "\\truncate{3.9in} { ";
		print TEXOUT "\\LARGE \\bf ";
		print TEXOUT &Tab::texify($entry_code{$entry});
		print TEXOUT " } ";
		print TEXOUT "\\end{minipage}\n";

		print TEXOUT "\\hfill\n";
		print TEXOUT "{\\bf \\large ".&Tab::texify($event->abbr)." } ";

		print TEXOUT "\\begin{minipage}{2.6in}";
		print TEXOUT "\\hfill {\\bf \\large ".&Tab::texify($entry_name{$entry})." }\n\n";
		print TEXOUT "\\hfill {\\normalsize ". &Tab::texify($entry_school_name{$entry});
		print TEXOUT " }\n";
		print TEXOUT "\\end{minipage}\n";

		print TEXOUT "\\vspace{.03in}\n";
		print TEXOUT "\\newline\n";

		print TEXOUT "\\raggedright\n";

		my @students = @{$entry_students{$entry}} if $entry_students{$entry};

		my $tb_len = 1;
		$tb_len = (2.2 / $count_tbs) if $count_tbs;

		my $judge_len = 1.5;

		my $tabular;

		if ($tb_types{'winloss'}
			&! $tb_types{"point"}
			&& (not defined $tb_types{"rank"})
		) {
			$tabular = "\\begin{tabular}{|p{.5in}|p{.25in}|p{1.5in}|p{2.5in}|";
			$tb_len = .5;
			$judge_len = 2.5;
		} else {
			$tabular = "\\begin{tabular}{|p{.5in}|p{.25in}|p{1.5in}|p{1.5in}|";
		}

		my $index = "Round & Side & Opponent & Judge ";

		if ($tb_types{'winloss'}) {
			$tabular .= "p{".$tb_len."in}|";
			$index .= " & W/L ";

			if ($tourn_settings->{"nsda_district"}) {
				$tabular .= "p{".$tb_len."in}|";
				$index .= " & Out ";
			}
		}

		if (scalar @students > 1) {

			if ($tb_types{"point"}) {
				foreach my $student (@students) {
					$tabular .= "p{".$tb_len."in}|";
					$index .= " & ".Tab::texify($student_code{$student})." Pts "
				}
			}

			if ($tb_types{"rank"}) {
				foreach my $student (@students) {
					$tabular .= "p{".$tb_len."in}|";
					$index .= " & ".Tab::texify($student_code{$student})." Rks "
				}
			}

		} else {

			if ($tb_types{"point"}) {
				$tabular .= "p{".$tb_len."in}|";
				$index .= " & Points "
			}

			if ($tb_types{"rank"}) {
				$tabular .= "p{".$tb_len."in}|";
				$index .= " & Ranks "
			}
		}

		print TEXOUT $tabular."}\n";
		print TEXOUT "\\hline \\hline \n\n";
		print TEXOUT "\\rowcolor[rgb]{.84,.89,.94}\[5.3pt\]\[5.3pt\]\n";
		print TEXOUT $index." \\\\ \n";

		my $switch;

		foreach my $round (@rounds) {

			my $round_id = $round->id;

			my @judges = @{$round_judges{$entry."-".$round_id}} if $round_judges{$entry."-".$round_id};
			my %seen = ();
			@judges = grep { ! $seen{$_} ++ } @judges;

			next if $round->type eq "elim";
			next if $round->type eq "final";

			print TEXOUT "\\hline \\hline \n\n";
			print TEXOUT "\\rowcolor[rgb]{1,.95,.66}\[5.3pt\]\[5.3pt\]\n" if $switch++ % 2;
			print TEXOUT Tab::texify($round->realname)." & ";
			print TEXOUT Tab::texify($round_side{$entry."-".$round_id})." & ";
			print TEXOUT "\\truncate{1.24in}{\\footnotesize ";
			print TEXOUT Tab::texify($round_opp{$entry."-".$round_id})." } & ";

			print TEXOUT "\\begin{minipage}{".$judge_len."in} \n";
			print TEXOUT "\\small ";
			my $done;

			foreach my $judge (@judges) {
				print TEXOUT "\\hrule " if $done++;
				print TEXOUT "\\parbox[c][.20in][c]{".($judge_len - .05)."in}{";
				print TEXOUT "\\truncate{".($judge_len - .1)."in}{".Tab::texify($judge_name{$judge})."}} \n ";
			}

			print TEXOUT " \\end{minipage} \n ";

			if ($tb_types{'winloss'}) {
				print TEXOUT " & \\begin{minipage}{".$tb_len."in} ";
				print TEXOUT "\\small ";
				undef $done;
				foreach my $judge (@judges) {
					print TEXOUT "\\hrule " if $done++;
					print TEXOUT "\\parbox[c][.20in][c]{".($tb_len - .05)."in}{ \\hfill ";
					print TEXOUT $round_winloss{$entry."-".$round_id."-".$judge};
					$done++ if $round_winloss{$entry."-".$round_id."-".$judge};
					print TEXOUT " \\hfill \\strut }\n";
				}
				print TEXOUT " \\end{minipage} \n ";
			}

			if ($tb_types{"point"}) {

				foreach my $student (@students) {
					print TEXOUT " & \\begin{minipage}{".$tb_len."in} ";
					print TEXOUT "\\small ";
					undef $done;
					foreach my $judge (@judges) {
						print TEXOUT "\\hrule " if $done++;
						print TEXOUT "\\parbox[c][.20in][c]{.35in}{ \\hfill ";
						print TEXOUT $round_points{$entry."-".$round_id."-".$judge."-".$student};
						$done++ if $round_points{$entry."-".$round_id."-".$judge."-".$student};
						print TEXOUT "\\hfill \\strut }\n";
					}
					print TEXOUT " \\end{minipage} \n ";
				}
			}

			if ($tb_types{"rank"}) {

				foreach my $student (@students) {
					print TEXOUT " & \\begin{minipage}{".$tb_len."in} ";
					print TEXOUT " \\small ";
					undef $done;
					foreach my $judge (@judges) {
						print TEXOUT "\\hrule " if $done++;
						print TEXOUT "\\parbox[c][.20in][c]{.35in}{ \\hfill ";
						print TEXOUT $round_ranks{$entry."-".$round_id."-".$judge."-".$student};
						$done++ if $round_points{$entry."-".$round_id."-".$judge."-".$student};
						print TEXOUT "\\hfill \\strut }\n";
					}

					print TEXOUT " \\end{minipage} \n ";
				}
			}

			if ($tourn_settings->{"nsda_district"}) {
				print TEXOUT " & ";
			}

			print TEXOUT "\\\\ \n";
		}

		$switch++;

		foreach my $round ( $switch .. $min_rounds) {

			print TEXOUT "\\hline \\hline \n\n";
			print TEXOUT "\\rowcolor[rgb]{1,.95,.66}\[5.3pt\]\[5.3pt\]\n" if $switch++ % 2;
			print TEXOUT Tab::texify($round)." & ";
			print TEXOUT " & ";
			print TEXOUT " & ";
			print TEXOUT " & ";

			if ($tb_types{"point"}) {
				foreach my $student (@students) {
					print TEXOUT " & ";
				}
			}

			if ($tb_types{"rank"}) {
				foreach my $student (@students) {
					print TEXOUT " & ";
				}
			}

			if ($tourn_settings->{"nsda_district"}) {
				print TEXOUT " & ";
			}

			print TEXOUT "\\\\ \n";

		}

		print TEXOUT "\\hline \\hline \n\n";

		print TEXOUT "\\end{tabular}\n";
		print TEXOUT "\\smallskip\n";
		print TEXOUT "\\newline\n";
		print TEXOUT "Seed ".$entry_seed{$entry}." ";
		print TEXOUT "\\makebox[1in]{} \\hfill {\\small ";

		my $notfirst;
		foreach my $student (@students) {
			print TEXOUT " -- " if $notfirst++;
			print TEXOUT Tab::texify($student_name{$student})." ";
		}

		print TEXOUT "} \n";
		print TEXOUT "\\newline\n";
		print TEXOUT "\\vspace{.25in}\n";
		print TEXOUT "\\end{minipage}";
		print TEXOUT "\\newline\n";

	}

	print TEXOUT "\\end{document}\n";
	close TEXOUT;

	$m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		tail     => 1
	);

</%init>
