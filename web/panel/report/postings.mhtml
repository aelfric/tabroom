<%args>
	$tourn
	$session
	$round_id    => undef
	$timeslot_id => undef
	$event_id    => undef
	$debug       => undef
	$panel_id    => undef
</%args>
<%init>

	use POSIX;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $limit;
	my $filename;

	if ($panel_id) {

		$limit = " and panel.id = ".int($panel_id);

		my $panel = Tab::Panel->retrieve($panel_id);
		$filename = $panel->round->event->abbr."-R".$panel->round->name."-Sect".$panel->letter;

	} elsif ($round_id) {

		$limit = " and round.id = ".int($round_id);

		my $round = Tab::Round->retrieve($round_id);
		unless ($round) {
			$m->comp("/funclib/abort.mas", message => "No round found for ID $round_id");
		}

		$filename = $round->realname;
		$filename =~  s/[\W_]//g;
		$filename = $round->event->abbr."-".$filename;
		$filename =~ s/\s+//g;

	} elsif ($timeslot_id) {

		if ($timeslot_id eq "all") {
			$limit = " and timeslot.tourn = ".int($tourn->id);
			$filename = "AllTimeslots-".$filename;

		} else {

			$limit = " and timeslot.id = ".int($timeslot_id);
			my $timeslot = Tab::Timeslot->retrieve($timeslot_id);

			unless ($timeslot) {
				$m->comp("/funclib/abort.mas", message => "No timeslot found for ID $timeslot_id");
			}


			$filename = $timeslot->name;
			$filename =~ s/[\W_]//g;
			$filename = "Timeslot-".$filename;
		}
	}

	$filename = "Posters-".$filename;

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select
			event.id, event.abbr, event.name, event.type,
			round.id, round.name, round.label, round.type,
			CONVERT_TZ(round.start_time, '+00:00', tourn.tz) start,
			timeslot.id,
			CONVERT_TZ(timeslot.start, '+00:00', tourn.tz) start,

			ballot.id, ballot.side, ballot.speakerorder, ballot.chair,
			entry.id, entry.code, entry.name,
			judge.id, judge.code, judge.first, judge.last,
			room.name, panel.id, panel.flight, round.flighted, panel.letter

		from (tourn, event, round, timeslot, panel, ballot, entry, judge)

			left join room on panel.room = room.id

		where
			tourn.id = event.tourn
			and event.id = round.event
			and round.id = panel.round
			and round.timeslot = timeslot.id
			and panel.id = ballot.panel
			and panel.bye != 1
			and ballot.entry = entry.id
			and ballot.judge = judge.id
			$limit

		group by ballot.id
		order by panel.letter, ballot.chair DESC, ballot.speakerorder, ballot.side, judge.code, judge.last
	");

	$sth->execute();

	my %panels;

	while (
		my (
			$event_id, $event_abbr, $event_name, $event_type,
			$round_id, $round_name, $round_label, $round_type, $round_start,
			$timeslot_id, $timeslot_start,
			$ballot_id, $ballot_side, $ballot_speakerorder, $ballot_chair,
			$entry_id, $entry_code, $entry_name,
			$judge_id, $judge_code, $judge_first, $judge_last,
			$room_name, $pid, $flight, $flighted, $letter
		) = $sth->fetchrow_array()
	) {

		unless ($panels{$pid}{"event_abbr"}) {

			$panels{$pid}{"event_abbr"}  = $event_abbr;
			$panels{$pid}{"event_name"}  = $event_name;
			$panels{$pid}{"event_type"}  = $event_type;
			$panels{$pid}{"room"}        = $room_name;
			$panels{$pid}{"room_name"}   = $room_name;
			$panels{$pid}{"room_number"} = $room_name;

			$panels{$pid}{"room_name"}   =~ s/\d//g;
			$panels{$pid}{"room_number"} =~ s/[\D_]//g;

			$panels{$pid}{"letter"} = $letter;

			if ($flighted > 1) {
				$panels{$pid}{"flight"} = $flight;
			}

			if ($round_start) {
				$panels{$pid}{"start"} = DateTime::Format::MySQL->parse_datetime($round_start);
			} elsif ($timeslot_start) {
				$panels{$pid}{"start"} = DateTime::Format::MySQL->parse_datetime($timeslot_start);
			}

			if ($round_label) {
				$panels{$pid}{"round"} = $round_label;
			} else {
				$panels{$pid}{"round"} = "Round ".$round_name;
			}
			$panels{$pid}{"round_type"} = $round_type;
		}

		unless ($panels{$pid}{"judge_id"}{$judge_id}++) {

			my $judge;
			$judge .= "* " if $ballot_chair;

			if ($judge_code) {
				$judge .= $judge_code." ";
			} else {
				$judge .= $judge_first." ";
			}
			$judge .=  $judge_last;

			if (length($judge) > $panels{$pid}{"longest_judge"}) {
				$panels{$pid}{"longest_judge"} = length($judge);
			}

			push @{$panels{$pid}{"judges"}}, $judge;
		}

		unless ($panels{$pid}{"entry_id"}{$entry_id}++) {

			if (length($entry_code) > $panels{$pid}{"longest_entry"}) {
				$panels{$pid}{"longest_entry"} = length($entry_code);
			}

			push @{$panels{$pid}{"entries"}}, $entry_code;
		}
	}

    my $filepath = $Tab::file_root."/tmp/".$filename;

    $m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		head     => 1,
		taller   => 1
	);

    open (TEXOUT, ">>$filepath.tex");

	foreach my $pid (
		sort {
			$panels{$a}{"event_abbr"} cmp $panels{$b}{"event_abbr"}
			|| $panels{$a}{"room_name"} cmp  $panels{$b}{"room_name"}
			|| $panels{$a}{"room_numbers"} <=> $panels{$b}{"room_numbers"}
			|| $panels{$a}{"letter"} <=> $panels{$b}{"letter"}
		} keys %panels
	) {

		my $fontsize = 48;
		$fontsize = 36 if length($panels{$pid}{"event_name"}) > 20;
		$fontsize = 24 if length($panels{$pid}{"event_name"}) > 32;

		print TEXOUT "\\fontsize{".$fontsize."pt}{".$fontsize."pt}\\selectfont ";

		print TEXOUT "\\strut\n";
		print TEXOUT "\\hfill\n";
		print TEXOUT "{\\bf ".Tab::texify($panels{$pid}{"event_name"})." }\n";
		print TEXOUT "\\hfill\n";
		print TEXOUT "\\strut\n";

		print TEXOUT "\\medskip\n";
		print TEXOUT "\\newline\n";

		print TEXOUT "\\strut\n";
		print TEXOUT "\\hfill\n";

		$fontsize -= 8;
		print TEXOUT "\\fontsize{".$fontsize."pt}{".$fontsize."pt}\\selectfont ";
		print TEXOUT "\\color{black!64}\n";
		print TEXOUT Tab::texify(uc($panels{$pid}{"round"}))."\n";

		print TEXOUT "\\hfill\n";
		print TEXOUT "\\strut\n";

		unless ($panels{$pid}{"round_type"} eq "final") {

			print TEXOUT "\\strut\n";
			print TEXOUT "\\hfill\n";

			if ($panels{$pid}{"event_type"} eq "congress") {

				print TEXOUT " CHAMBER ";
				print TEXOUT Tab::texify(uc($panels{$pid}{"letter"}))."\n";

			} elsif ($panels{$pid}{"event_type"} eq "speech") {

				print TEXOUT " SECTION ";
				print TEXOUT Tab::texify(uc($panels{$pid}{"letter"}))."\n";
			}

			print TEXOUT "\\hfill\n";
			print TEXOUT "\\strut\n";
		}

		print TEXOUT "\\vspace{-10mm}\n";
		print TEXOUT "\\newline\n";


		print TEXOUT "\\strut\n";
		print TEXOUT "\\hfill\n";
		print TEXOUT "\\makebox[.8\\textwidth]{\\hrulefill}\n";
		print TEXOUT "\\hfill\n";
		print TEXOUT "\\strut\n";
		print TEXOUT "\\vspace{-4mm}\n";

		$fontsize = 48 - POSIX::floor($panels{$pid}{"longest_entry"} / 2);

		print TEXOUT "\\vspace{4mm}\n";
		print TEXOUT "\\newline\n";

		if ($panels{$pid}{"event_type"} eq "congress") {
			$fontsize = POSIX::ceil($fontsize / 1.5);
		}

		print TEXOUT "\\fontsize{".$fontsize."pt}{".$fontsize."pt}\\selectfont ";

		my $counter;

		if ($panels{$pid}{"event_type"} eq "congress") {
			print TEXOUT "\\parbox[c][][c]{3.5in}{";
		}

		foreach my $entry (@{$panels{$pid}{"entries"}}) {

			print TEXOUT "\\strut\n";
			print TEXOUT "\\hfill\n";
			print TEXOUT Tab::texify($entry)." \n";

			if ($panels{$pid}{"event_type"} eq "congress") {

				if ($counter++ % 2) {

					print TEXOUT "\\hfill\n";
					print TEXOUT "\\strut\n";

					print TEXOUT " } \n";

					print TEXOUT "\\vspace{4mm}\n";
					print TEXOUT "\\newline\n";

					print TEXOUT "\\parbox[c][][c]{3.5in}{";

				} else {

					print TEXOUT "\\hfill\n";
					print TEXOUT "\\strut\n";
					print TEXOUT " } \n";

					print TEXOUT "\\parbox[c][][c]{3.5in}{";
				}

			} else {
				print TEXOUT "\\strut\n";
				print TEXOUT "\\hfill\n";
				print TEXOUT "\\vspace{4mm}\n";
				print TEXOUT "\\newline\n";
			}
		}

		if ($panels{$pid}{"event_type"} eq "congress") {
			print TEXOUT " } \n";
			print TEXOUT "\\smallskip\n";
			print TEXOUT "\\newline\n";
		}

		print TEXOUT "\\vspace{-16mm}\n";
		print TEXOUT "\\newline\n";

		print TEXOUT "\\strut\n";
		print TEXOUT "\\hfill\n";
		print TEXOUT "\\makebox[.8\\textwidth]{\\hrulefill}\n";
		print TEXOUT "\\hfill\n";
		print TEXOUT "\\strut\n";

		print TEXOUT "\\newline";

		print TEXOUT "\\fontsize{24pt}{24pt}\\selectfont \n";

		if ($panels{$pid}{"room"}) {
			print TEXOUT "\\strut\n";
			print TEXOUT "\\hfill\n";
			print TEXOUT "{\\bf ROOM: ".Tab::texify($panels{$pid}{"room"}) ."} ";
			print TEXOUT "\\strut\n";
			print TEXOUT "\\hfill\n";
			print TEXOUT "\\medskip\n";
			print TEXOUT "\\newline";
		}

		print TEXOUT "\\strut\n";
		print TEXOUT "\\hfill\n";
		print TEXOUT "BEGIN: ".Tab::texify(Tab::nicetime($panels{$pid}{"start"}))."\n";
		print TEXOUT "\\hfill\n";
		print TEXOUT "\\strut\n";

		print TEXOUT "\\smallskip\n";
		print TEXOUT "\\newline\n";

		print TEXOUT "\\strut\n";
		print TEXOUT "\\hfill\n";
		print TEXOUT "\\makebox[.8\\textwidth]{\\hrulefill}\n";
		print TEXOUT "\\hfill\n";
		print TEXOUT "\\strut\n";

		print TEXOUT "\\smallskip\n";
		print TEXOUT "\\newline\n";

		if ($panels{$pid}{"judges"} && (not defined $ARGS{"no_judges"})) {

			if (scalar @{$panels{$pid}{"judges"}} > 6) {
				print TEXOUT "\\fontsize{16pt}{16pt}\\selectfont \n";
			} else {
				print TEXOUT "\\fontsize{28pt}{28pt}\\selectfont \n";
			}

			print TEXOUT "\\strut\n";
			print TEXOUT "\\hfill\n";
			print TEXOUT "{\\bf JUDGES: }\n";
			print TEXOUT "\\hfill\n";
			print TEXOUT "\\strut\n";

			print TEXOUT "\\vspace{-10mm}\n";
			print TEXOUT "\\newline\n";

			print TEXOUT "\\begin{center}\n";

			foreach my $judge (@{$panels{$pid}{"judges"}}) {
				print TEXOUT "\\parbox[c][][c]{3.25in}{\\textsb{ ";
				print TEXOUT "\\strut\n";
				print TEXOUT "\\hfill\n";
				print TEXOUT Tab::texify($judge);
				print TEXOUT "\\hfill\n";
				print TEXOUT "\\strut\n";
				print TEXOUT "} } \n";
			}

			print TEXOUT "\\end{center}\n";
		} # end of foreach panel

		print TEXOUT "\\newpage \n";

	} # end of foreach panel

	close TEXOUT;

    $m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		tail     => 1
	);

</%init>
