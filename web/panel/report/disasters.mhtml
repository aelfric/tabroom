<%args>
	$tourn
	$person
	$debug => undef
</%args>

	<& menu.mas, tourn => $tourn, whoami => "disaster" &>

	<div class="main">

		<h4>Disasters Waiting to Happen</h4>

<%perl>
		my @bad_rounds;

		my @events = $tourn->events(type => "speech");
		push @events, $tourn->events(type => "congress");

		my %roomless = ();

		foreach my $event (@events) {

			next if $event->type eq "debate";

			foreach my $round ($event->rounds) {

				push (@bad_rounds, $round)
					if $m->comp("/funclib/round_unbalanced.mas", round => $round);

				my $online_mode = $event->setting("online_mode");

				unless ( (not defined $online_mode)
						|| $online_mode eq "public_jitsi"
						|| $online_mode eq "public_jitsi_observers"
						|| $online_mode eq "nsda_campus"
				) {

					my $roomless_count = scalar ($round->panels(room => 0, bye => 0));

					if ($roomless_count) {
						$roomless{$round->id}{"round"} = $round;
						$roomless{$round->id}{"count"} = $roomless_count;
					}
				}

			}
		}
</%perl>

%		if (@bad_rounds) {

			<h5>Rounds out of balance </h5>

% 			foreach my $round (@bad_rounds) {
				<a class="yellow padleftmore padtopmore padbottommore martop half"
					href="/panel/schemat/show.mhtml?round_id=<% $round->id %>">
						Round <% $round->name." of ".$round->event->name %>
				</a>
% 			}
%		}

<%perl>

		Tab::Panel->set_sql(  not_enough => "
			select distinct panel.*,
			(select count(distinct ballot.judge)
				from ballot
				where ballot.judge > 0
				and ballot.panel = panel.id
			) as panelsize, judgenum.value as judgenum
			from (panel, round, event)
			left join round_setting judgenum on judgenum.round = round.id and judgenum.tag = 'num_judges'
			where event.tourn = ?
			and event.id = round.event
			and panel.round = round.id
			and exists (
				select distinct entry.id
				from ballot, entry
				where entry.id = ballot.entry
				and ballot.panel = panel.id
				and panel.bye != 1
			)
			group by panel.id
		");

		my @bad_panels;

		my $count;
		foreach my $panel (Tab::Panel->search_not_enough( $tourn->id )) {

			if ($panel->judgenum < 1) {
				$panel->judgenum(1);
			}

			push (@bad_panels, $panel) if $panel->judgenum > $panel->panelsize;
		}

</%perl>

		<h5>Insufficient Judging panels</h5>

%		foreach my $panel (@bad_panels) {

			<span class="half odd">
				<a class="white"
					href="/panel/schemat/panel_view.mhtml?panel_id=<% $panel->id %>"
				>
					<span class="quarter">
						<% $panel->round->event->abbr %>
						<%$panel->letter %>
					</span>
					<span class="quarter">
						<% $panel->round->realname %>
					</span>
					<span class="half redtext semibold">
						(<% $panel->panelsize %> judges, <% $panel->judgenum %> needed)
					</span>
				</a>
			</span>

%		}

%		unless (@bad_panels) {
			<p class='semibold greentext'>All panels are complete!</p>
%		}

		<h5>Sections without Rooms: </h5>

%		foreach my $round_id (sort keys %roomless) {

%			my $round = $roomless{$round_id}{"round"};
%			my $count = $roomless{$round_id}{"count"};

			<span class="half odd">
				<a class="white"
					href="/panel/schemat/show.mhtml?round_id=<% $round->id %>"
				>
					<span class="half marno padleftmore">
						<% $round->realname." of ".$round->event->abbr %>
					</span>

					<span class="fourtenths marno redtext">
						<% $count %> sections w/o rooms
					</span>
				</a>
			</span>
% 		}

			<h5>Entries without assignments: </h5>
%# 			foreach my $entry (sort {$a->code cmp $b->code} $tourn->unassigned_entries) {

	</div>

