<%args>
	$tourn
	$tourn_settings
	$session
	$round_id => undef
</%args>
<%init>

	my $round = Tab::Round->retrieve($round_id);

	unless ($round) {
		$m->comp("/funclib/abort.mas",
		warn => "No round found for id $round_id");
	}

	my $event = $round->event;

    my $now = DateTime->now;
    $now->set_time_zone($tourn->tz);

    my $name = $event->name;
    $name =~ s/[\W_]//g;

    my $round_name = $round->realname;
    $round_name =~ s/[\W_]//g;

    my $filename = "ScorerSheets-$name-$round_name-".$session->id;
    my $filepath = $Tab::file_root."tmp/".$filename;

    $m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		wide     => 1,
		head     => 1
	);

	my $num_speeches = $event->setting("number_of_speeches");
	$num_speeches = 4 unless $num_speeches;

	my $min_points = $event->setting("min_points");
	my $max_points = $event->setting("max_points");

	$min_points = "2" unless $min_points;
	$max_points = "6" unless $max_points;

	my $num_points = $max_points - $min_points;
	my $points_distance = 5 / $num_points if $num_points;

    open (TEXOUT, ">>$filepath.tex");
	binmode(TEXOUT, ":utf8");

	my $speech_boxsize = 4.5 / $num_speeches;

	foreach my $panel (sort {$a->letter <=> $b->letter} $round->panels) {

		my @judges = $m->comp("/funclib/panel_judges.mas", panel => $panel);

		my @entries = $m->comp("/funclib/panel_entries.mas", panel => $panel);

		@entries = sort {$a->lastname cmp $b->lastname} @entries;

		my $tabular = '\begin{tabular}{@{}|p{1.7in}|p{.25in}|';

		foreach (1 .. $num_speeches) {
			$tabular .= "p{".$speech_boxsize."in}|";
		}

		$tabular .= '@{}}'."\n";

		foreach my $judge (@judges) {

			print TEXOUT "\\noindent\n";

			print TEXOUT "\\textsb{ \\large ";
			print TEXOUT Tab::texify($round->event->name)." } \n";

			print TEXOUT "\\hfill \n";
			print TEXOUT "\\normalsize \n";

			print TEXOUT Tab::texify($round->realname).": ";
			print TEXOUT Tab::texify("Chamber ".$panel->letter);
			if ($panel->room > 0 ) {
				print TEXOUT " ".Tab::texify($panel->room->name);
			} else {
				print TEXOUT " Room TBA ";
			}
			print TEXOUT " \\hfill ";
			print TEXOUT "Judge : ".Tab::texify($judge->first." ".$judge->last);
			print TEXOUT ", ".Tab::texify($judge->school->short_name) if $judge->school;
			print TEXOUT "\\newline\n";

			print TEXOUT " \\hrulefill \n";
			print TEXOUT "\\smallskip\n";
			print TEXOUT "\\newline\n";

			print TEXOUT "\\small\n";

			print TEXOUT "\\vspace{-1pt}\n";
			print TEXOUT $tabular;

			print TEXOUT "\\hline \n";

			print TEXOUT "\\textsb{ Contestant } & \\textsb{ PO? }";

			foreach my $speech (1 .. $num_speeches) {
				print TEXOUT "& \\textsb{ Speech/PO $speech } ";
			}

			print TEXOUT "\\\\ \\hline \n";
			print TEXOUT "\\end{tabular}\n";
			print TEXOUT "\\newline\n";

			foreach my $entry (@entries) {

				print TEXOUT "\\vspace{-1pt}\n";
				print TEXOUT $tabular;

				print TEXOUT "{\\normalsize  ".Tab::texify($entry->name)." } ";

				print TEXOUT " & ";

				print TEXOUT "\\setlength\\tabcolsep{0pt}\n";

				foreach my $speech (1 .. $num_speeches) {

					print TEXOUT " & ";

					print TEXOUT "\\begin{minipage}{".$speech_boxsize."in}\n";

					print TEXOUT "\\vspace{1mm}\n";
					print TEXOUT "\\hfill\n";
					print TEXOUT "\\footnotesize\n";

					foreach my $point ($min_points .. $max_points) {
						print TEXOUT " $point";
						print TEXOUT " \\hspace{".$points_distance."mm} " unless $point == $max_points;
					}

					print TEXOUT "\\hfill\n";
					print TEXOUT "\\vspace{-2mm}\n";

					print TEXOUT "\\newline\n";
					print TEXOUT "\\strut\n";
					print TEXOUT "\\hrulefill\n";
					print TEXOUT "\\strut\n";
					print TEXOUT "\\newline\n";
					print TEXOUT "\\vspace{.5mm}\n";
					print TEXOUT "\\end{minipage}\n";

				}

				print TEXOUT "\\setlength\\tabcolsep{4pt}\n";
				print TEXOUT "\\\\ \\hline \n";

				print TEXOUT "\\end{tabular}\n";
				print TEXOUT "\\newline\n";

			}
			print TEXOUT "\\newpage\n";
		}
	}

	close TEXOUT;

    $m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		tail     => 1
	);

</%init>


