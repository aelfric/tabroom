<%args>

</%args>
<%init>

	my $dbh = Tab::DBI->db_Main();

	$m->print('<p>Converting tags');
	$m->flush_buffer();

	my $convert_sth = $dbh->prepare('
		update event_setting set tag="backup_followers" where tag = "backup_people"
	');

	$convert_sth->execute();

	$m->print('....Done</p>');
	$m->flush_buffer();

	my $sth = $dbh->prepare('
		select ts.id, ts.tag, ts.value, ts.value_text
			from tourn_setting ts
		where ts.tag = ?
			and ts.value != "json"
	');

	my $change_sth = $dbh->prepare("
		update tourn_setting ts
		set ts.value = 'json', ts.value_text = ?, ts.timestamp = ts.timestamp
		where ts.id = ?
	");

	my $delete_sth = $dbh->prepare("
		delete * from tourn_setting ts where ts.id = ?
	");

	$m->print('....Done</p>');
	$m->flush_buffer();

	$m->print('<p>Converting tourn level backup followers');
	$m->flush_buffer();

	foreach my $tag ('backup_followers') {

		$sth->execute($tag);
		my $results = $sth->fetchall_hash();

		my $counter;

		foreach my $result (@{$results}) {

			unless ($counter++ % 10) {
				$m->print('<p>'.$counter.' done</p>');
				$m->flush_buffer();
			}

			my @ids = eval {
				return split (',', $result->{value});
			};

			if (@ids) {
				$change_sth->execute(JSON::encode_json(\@ids), $result->{id});
			} else {
				$m->print("<p>Unable to parse value ".$result->{value}." for setting ".$result->{id}."</p>");
			}
		}
	}

	$m->print('....Done</p>');
	$m->flush_buffer();

	$sth = $dbh->prepare('
		select es.id, es.tag, es.value, es.value_text
			from event_setting es
		where es.tag = ?
			and es.value != "json"
	');

	$change_sth = $dbh->prepare("
		update event_setting es
		set es.value = 'json', es.value_text = ?, es.timestamp = es.timestamp
		where es.id = ?
	");

	$delete_sth = $dbh->prepare("
		delete * from event_setting es where es.id = ?
	");

	foreach my $tag ('backup_followers', 'followers') {

		$sth->execute($tag);
		my $results = $sth->fetchall_hash();

		my $counter;

		$m->print('<p>Converting event level '.$tag);
		$m->flush_buffer();

		foreach my $result (@{$results}) {

			unless ($counter++ % 10) {
				$m->print('<p>'.$counter.' done</p>');
				$m->flush_buffer();
			}

			my @ids = eval {
				return split (',', $result->{value});
			};

			if (@ids) {
				$change_sth->execute(JSON::encode_json(\@ids), $result->{id});
			} else {
				$m->print("<p>Unable to parse value $tag ".$result->{value}." for setting ".$result->{id}."</p>");
			}
		}

		$m->print('<p>.. Done</p>');
		$m->flush_buffer();
	}

</%init>
