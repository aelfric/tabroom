<%args>
	$month => undef
</%args>
<%init>

	my $start = DateTime->now();

	while ($start->day_abbr ne "Wed") {
		$start->subtract(days => 1);
	}

	my $end;

	if ($month) {

		$start->add(months => 1);
		$start->set(day => 1);
		$end = $start->clone;
		$end->add(months => 1);

	} else {
		$end = $start->clone;
		$end->add(days => 7);
		$end->set(hour => 23, minute => 59);
	}

	my $start_string = DateTime::Format::MySQL->format_datetime($start);
	my $end_string = DateTime::Format::MySQL->format_datetime($end);

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
 	   select count(tourn.id)
 	   from tourn
 	   where tourn.start < ?
 	   and tourn.end > ?
	");

	$sth->execute($end_string, $start_string);
	my ($tourn_count) = $sth->fetch();

	$sth = $dbh->prepare("
		select count(entry.id)
		from entry, event, tourn
		where tourn.start < ?
		and tourn.end > ?
		and tourn.id = event.tourn
		and event.id = entry.event;
	");

	$sth->execute($end_string, $start_string);
	my ($entry_count) = $sth->fetch();

	$sth = $dbh->prepare("
		select count(distinct entry_student.student)
		from entry, event, tourn, entry_student
		where tourn.start < ?
		and tourn.end > ?
		and tourn.id = event.tourn
		and event.id = entry.event
		and entry_student.entry = entry.id;
	");

	$sth->execute($end_string, $start_string);
	my ($student_count) = $sth->fetch();

	$sth = $dbh->prepare("
		select count(judge.id)
		from judge, category, tourn
		where tourn.start < ?
		and tourn.end > ?
		and tourn.id = category.tourn
		and category.id = judge.category;
	");

	$sth->execute($end_string, $start_string);
	my ($judge_count) = $sth->fetch();

	$sth = $dbh->prepare("
		select count(school.id)
		from school, tourn
		where tourn.start < ?
		and tourn.end > ?
		and tourn.id = school.tourn;
	");

	$sth->execute($end_string, $start_string);
	my ($school_count) = $sth->fetch();

	my $from_string = "Tabroom <help\@tabroom.com>";
	my $to_string   = "palmer\@tabroom.com,palmer\@speechanddebate.org,lauren.burdt\@speechanddebate.org";
	my $subject     = "This Week in Tabroom: ".$start->month."/".$start->day." to ".$end->month."/".$end->day;

	if ($month) {
		$subject     = "Next Month's Tabroom Contacts: ".$start->month."/".$start->day." to ".$end->month."/".$end->day;
		$to_string   = "palmer\@tabroom.com,lauren.burdt\@speechanddebate.org,grace.rogers\@speechanddebate.org";
	}

	my $type = "text/html";

	my $body = "\n\nTournaments this week: $tourn_count\n\n";
	$body .= "Schools: $school_count\n\n";
	$body .= "Entries: $entry_count\n\n";
	$body .= "Students: $student_count\n\n";
	$body .= "Judges:  $judge_count\n\n";

	if ($month) {
		$body =  " Attached are the monthly contacts for tournaments happening in ".$start->month_name;
	}

    use HTML::FromText;

	my $html = text2html($body,
		paras     => 1,
		metachars => 0
	);

	$sth = $dbh->prepare("
		select owner.first, owner.last, owner.email, tourn.name, tourn.start, tourn.end
		from (tourn, permission, person owner)
		where tourn.start < ?
		and tourn.end > ?
		and tourn.id = permission.tourn
		and permission.tag = 'owner'
		and permission.person = owner.id
		group by owner.id
	");

	$sth->execute($end_string, $start_string);

	$start_string =~ s/\s+//g;

    my $filename = "WeekendContacts-$start_string.csv";
    my $filepath = $Tab::file_root."/tmp/$filename";

    open my $csvout, ">", $filepath;

	print $csvout '"tourn_name"';
	print $csvout ',';

	print $csvout '"tourn_start"';
	print $csvout ',';

	print $csvout '"tourn_end"';
	print $csvout ',';

	print $csvout '"owner_first"';
	print $csvout ',';

	print $csvout '"owner_last"';
	print $csvout ',';

	print $csvout '"owner_email"';
	print $csvout "\n";

	while (
		my (
			$owner_first, $owner_last, $owner_email, $tourn_name, $tourn_start, $tourn_end
		) = $sth->fetchrow_array()
	) {

		print $csvout '"'.$tourn_name.'"';
		print $csvout ',';

		print $csvout '"'.$tourn_start.'"';
		print $csvout ',';

		print $csvout '"'.$tourn_end.'"';
		print $csvout ',';

		print $csvout '"'.$owner_first.'"';
		print $csvout ',';

		print $csvout '"'.$owner_last.'"';
		print $csvout ',';

		print $csvout '"'.$owner_email.'"';
		print $csvout "\n";
	}

	close $csvout;
	$dbh();

	my $msg = MIME::Lite->new(
        From    => $from_string,
        To      => $to_string,
        Subject => $subject,
		Type    => $type,
        Data    => $html."\n\n"
    );

	$msg->attach (
		Type        => 'application/csv',
		Path        => $filepath,
		Filename    => $filename,
		Disposition => 'attachment'
	);

	MIME::Lite->send('smtp', $Tab::smtp_server, Timeout=>60);
	my $result = eval { $msg->send; };

	$m->print("<p>");
	$m->print($subject);
	$m->print("</p>");

	$m->print($html);
	$m->print($result);

	$m->print("<p> Start String ");
	$m->print($start_string);
	$m->print("</p>");

	$m->print("<p> End String ");
	$m->print($end_string);
	$m->print("</p>");

	$m->abort();

</%init>
