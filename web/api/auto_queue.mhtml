<%args>

</%args>
<%init>

	my $now = DateTime->now();
	my $counter;

	my $dbh = Tab::DBI->db_Main();

	# Locking sql statements

	my $check_lock_sth = $dbh->prepare("select autoqueue.id, autoqueue.timestamp from autoqueue where tag = 'queue_lock'");
	my $unlock_sth = $dbh->prepare("delete from autoqueue where tag = 'queue_lock'");
	my $lock_sth = $dbh->prepare("insert into autoqueue (tag) values ('queue_lock')");

	$check_lock_sth->execute();
	my ($lock_id, $lock_stamp) = $check_lock_sth->fetchrow_array();
	$check_lock_sth->finish();

	$m->print("Lock ID $lock_id") if $lock_id;

	if ($lock_id) {

		# Check the age of the timestamp.  If it's very old then clear the lock
		# and notify the admins

		my $now_limit = $now->clone();
		$now_limit->subtract(minutes => 5);
		my $now_stamp = DateTime::Format::MySQL->format_datetime($now_limit);

		$now_stamp =~ s/[\D_]//g;
		$lock_stamp =~ s/[\D_]//g;

		my $hard_limit = $now->clone();
		$hard_limit->subtract(minutes => 10);
		my $hard_stamp = DateTime::Format::MySQL->format_datetime($hard_limit);
		$hard_stamp =~ s/[\D_]//g;

		if ($lock_stamp < $hard_stamp) {

			$m->print("VERY OLD LOCK FOUND: Timestamp $lock_stamp vs limit $now_stamp.  Removing lock.<br />");
			$unlock_sth->execute();

	        $m->comp("/funclib/send_email.mas",
				from_string => "problems\@tabroom.com",
				raw         => "9785031225\@msg.fi.google.com",
				subject     => "10 MINUTE LOCK",
				body        => "The lock id $lock_id has been deleted since it's more than 10 minutes old: $lock_stamp"
			);

		} elsif ($lock_stamp < $now_stamp) {

			$m->print("OLD LOCK FOUND: Timestamp $lock_stamp vs limit $now_stamp <br />");

	        $m->comp("/funclib/send_email.mas",
				from_string => "problems\@tabroom.com",
				raw         => "9785031225\@msg.fi.google.com",
				subject     => "LOCK ALERT ON AQ",
				body        => "The lock id $lock_id has been alive now since $lock_stamp"
			);

			$m->print("Lock found so aborting autoqueue");
			$m->abort();

		} else {

			$m->print("Lock found so aborting autoqueue");
			$m->abort();

		}
	}

	$lock_sth->execute();
	$lock_sth->finish();

	Tab::Autoqueue->set_sql(pending => "
		select autoqueue.*
			from autoqueue
		where (autoqueue.active_at < NOW() OR autoqueue.active_at IS NULL)
			and autoqueue.tag != 'queue_lock'
		order
			by FIELD(tag, 'flip', 'blast','publish','blast_publish','pair_prelim', 'pair_elim', 'prelim_results', 'final_results'),
			created_at
	");

	AQ:
	foreach my $aq (Tab::Autoqueue->search_pending) {

		# Wrap the whole bloody thing into an eval because I cannot have a bug
		# in one gumming up the works for the rest.  This does unfortunately
		# mean not much in the way of error reporting but so be it

		$m->print("Doing job $aq tag ".$aq->tag." active tag ".$aq->active_at." at $now <br />");

		eval {

			$counter++;

			my $aq_id   = $aq->id;
			my $aq_tag  = $aq->tag;
			my $message = $aq->message;
			my $round   = $aq->round;
			my $event   = $aq->event;
			my $sender  = $aq->created_by;

			$aq->delete();

			if ($round && (not defined $event)) {
				$event = $round->event;
			}

			next AQ unless $event;
			my $tourn = $event->tourn;

			next unless $tourn && $tourn > 0;
			my %tourn_settings = $tourn->all_settings();

			if (
				$aq_tag eq "blast"
				|| $aq_tag eq "publish"
				|| $aq_tag eq "blast_publish"
			) {

				my $text;

				if ($round->setting("autoblasted")) {
					next AQ;
				};

				$round->setting("autoblasted", "date", $now);

				unless ($aq_tag eq "blast" || $round->published  == 1 ) {

					eval {
						$m->print("Publishing ".$round->realname." of ".$event->name."<br />");
						$m->flush_buffer();
						$round->published(1);
						$round->update();
					};

					if ($@) {
						Tab::debuglog("Publish process for round $round of event $event failed with error ".$@);
					}

					eval {
						$m->comp('/funclib/docshare_rooms.mas', round => $round);
					};

					eval {
						$m->comp('/funclib/publish_flips.mas', round => $round);
					};

					if ($@) {
						Tab::debuglog("Flip process for round $round of event $event failed with error ".$@);
					}

					eval {
						$m->comp('/funclib/cache_invalidate.mas', round => $round);
					};

					if ($@) {
						Tab::debuglog("Cache invalidation for round $round of event $event failed with error ".$@);
					}

					$text .= "published ";
				}

				unless ($aq_tag eq "publish") {

					$m->print("Blasting ".$round->realname." of ".$event->name." <br />");
					$m->flush_buffer();

					my $reply = $m->comp("/panel/schemat/blast.mhtml",
						scheduled => 1,
						tourn     => $tourn,
						round_id  => $round->id,
						confirm   => "yup",
						sender    => $sender,
						message   => $message,
						new_api   => 1
					);

					$m->print("Reply: $reply");
					$m->flush_buffer();

					$text .= "and " if $text;
					$text .= "blasted ";
				}

				my $time = $m->comp("/funclib/showdt.mas",
					now    => 1,
					tz     => $tourn->tz,
					return => 1
				);

				$text = $event->abbr." ".$round->realname." auto ".$text." at ".$time." ID ".$aq_id;

				if ($message) {
					$text .= "\n\n";
					$text .= "Message: ".$message;
				}

				my $reply = $m->comp("/funclib/blast_tabbers.mas",
					event   => $event,
					subject => "Autoblast",
					message => $text
				);

				$m->print("<br />Tabbers notified with reply $reply <br />");
				$m->flush_buffer();

			} elsif ($aq_tag eq "pair_prelim") {

				$m->print("Pairing ".$round->realname." of ".$event->name." <br/>");
				$m->flush_buffer();

				if ( (not defined $round) || $round->panels) {
					next AQ;
				}

				if ($tourn_settings{'nsda_district'}) {
					next AQ;
				}

				my $description = "Auto-sectioned round ".$round->realname." of ".$event->abbr;

				$m->comp("/funclib/log.mas",
					type        => 'tabbing',
					event       => $event->id,
					tourn       => $tourn->id,
					person      => 0,
					description => $description
				);

				if ($event->type eq "speech") {

					my @panels;
					my $previous_round = $event->rounds(name => ($round->name - 1))->first;

					if ($previous_round) {
						 @panels = $previous_round->panels;
					}

					my $num_panels = scalar @panels;

					if ($round->type eq "snaked_prelim") {

						$m->comp("/panel/round/snake_speech.mas",
							round          => $round,
							num_panels     => $num_panels,
							tourn          => $tourn,
							tourn_settings => \%tourn_settings
						);

					} elsif ($round->type eq "prelim") {

						$m->comp("/panel/round/pair_speech.mas",
							round          => $round,
							num_panels     => $num_panels,
							autoqueue      => 1,
							tourn_settings => \%tourn_settings
						);
					}

					$m->comp("/panel/round/judges.mhtml",
						round          => $round,
						tourn          => $tourn,
						tourn_settings => \%tourn_settings,
						person         => 0,
						return         => 1
					);

					$m->comp("/panel/round/rooms.mhtml",
						round           => $round,
						return          => 1,
						person          => 0,
						tourn           => $tourn,
						tourn_settings => \%tourn_settings
					);

				} elsif (
					$event->type eq "debate"
					|| $event->type eq "wsdc"
					|| $event->type eq "mock_trial"
				) {

					my $category = $event->category;
					my $prefs = $category->setting("prefs");
					my $num_judges = $category->setting("num_judges");

					undef $prefs if $prefs eq "none";
					$num_judges = 1 unless $num_judges;

					if ($round->type eq "prelim") {

						eval {
							$m->comp("/panel/round/pair_preset.mas",
								round          => $round,
								tourn          => $tourn,
								autoqueue      => 1,
								tourn_settings => \%tourn_settings,
								person         => 0
							);
						};

					} elsif ($round->type eq "highhigh" || $round->type eq "highlow") {

						eval {
							$m->comp("/panel/round/pair_debate.mas",
								round          => $round,
								tourn          => $tourn,
								autoqueue      => 1,
								tourn_settings => \%tourn_settings,
								person         => 0
							);
						};
					}

					if ($prefs && $num_judges > 1) {

						eval {
							$m->comp("/panel/round/debate_judge_panel.mhtml",
								round          => $round,
								tourn          => $tourn,
								tourn_settings => \%tourn_settings,
								person         => 0,
								return         => 1
							);
						};

					} else {

						eval {
							$m->comp("/panel/round/debate_judge_assign.mhtml",
								round          => $round,
								tourn          => $tourn,
								tourn_settings => \%tourn_settings,
								person         => 0,
								return         => 1
							);
						};
					}

					$m->comp("/panel/round/rooms.mhtml",
						round          => $round,
						return         => 1,
						person         => 0,
						tourn          => $tourn,
						tourn_settings => \%tourn_settings,
					);

				} elsif ($event->type eq "wudc") {

					$m->comp("/panel/round/pair_wudc.mas",
						round          => $round,
						tourn          => $tourn,
						tourn_settings => \%tourn_settings,
						person         => 0,
						return         => 1
					);

					$m->comp("/panel/round/judges.mhtml",
						round          => $round,
						tourn          => $tourn,
						tourn_settings => \%tourn_settings,
						person         => 0,
						return         => 1
					);

					$m->comp("/panel/round/rooms.mhtml",
						round          => $round,
						return         => 1,
						person         => 0,
						tourn          => $tourn,
						tourn_settings => \%tourn_settings,
					);

				} else {

					# This feature does not make sense for congress or other categories
				}

			} elsif ($aq_tag eq "pair_elim") {

				$m->print("Pairing ".$round->realname." of ".$event->name."<br />");
				$m->flush_buffer();

				if ( (not defined $round) || $round->panels) {
					next AQ;
				}

				if ($tourn_settings{'nsda_district'}) {
					next AQ;
				}

				my $description = "Auto-sectioned elim round ".$round->realname." of ".$event->abbr;

				$m->comp("/funclib/log.mas",
					type        => 'tabbing',
					event       => $event->id,
					tourn       => $tourn->id,
					person      => 0,
					description => $description
				);

				my $previous_round = $event->rounds( name => ($round->name - 1))->first;

				if ($event->type eq "congress") {

					# Congress usually clears 6 per chamber from the previous so
					# we'll take that as a default.

					my $num_panels;

					if ($round->type eq "final") {
						$num_panels = 1;
					} else {
						my @panels     = $previous_round->panels();
						$num_panels = POSIX::ceil((scalar @panels) / 3);
					}

					$m->comp("/tabbing/break/break_congress.mhtml",
						tourn          => $tourn,
						tourn_settings => \%tourn_settings,
						from_id        => $previous_round->id,
						into_id        => $round->id,
						end            => 6,
						return         => 1,
						panels         => $num_panels
					);

				} elsif ($event->type eq "wudc") {

					my @panels  = $previous_round->panels();
					my $num_entries = (scalar @panels) * 2;

					$m->comp("/tabbing/break/break_wudc.mhtml",
						tourn          => $tourn,
						tourn_settings => \%tourn_settings,
						from_id        => $previous_round->id,
						into_id        => $round->id,
						start          => 1,
						return         => 1,
						end            => $num_entries
					);

				} elsif ($event->type eq "speech") {

					if ($previous_round) {
						my @panels = $previous_round->panels();
						my @entries = $m->comp("/funclib/round_entries.mas", round => $previous_round);

						my $num_entries = POSIX::ceil(  (scalar @entries) / 2);
						my $num_panels  = POSIX::ceil(  (scalar @panels) / 2);

						$m->comp("/tabbing/break/break_speech.mhtml",
							tourn          => $tourn,
							tourn_settings => \%tourn_settings,
							from_id        => $previous_round->id,
							into_id        => $round->id,
							panels         => $num_panels,
							start          => 1,
							return         => 1,
							end            => $num_entries
						);

						$m->comp("/panel/round/judges.mhtml",
							round          => $round,
							tourn          => $tourn,
							tourn_settings => \%tourn_settings,
							person         => 0,
							return         => 1
						);
					}

				} else {

					my $category = $event->category;
					my $prefs = $category->setting("prefs");
					my $num_judges = $category->setting("num_judges");
					$num_judges = 1 unless $num_judges;

					if ($previous_round && $round) {

						$m->comp("/tabbing/break/break_debate.mhtml",
							tourn          => $tourn,
							from_id        => $previous_round->id,
							tourn_settings => \%tourn_settings,
							into_id        => $round->id,
							return         => 1,
							person         => 0
						);

						if ($prefs && $num_judges > 1) {

							$m->comp("/panel/round/debate_judge_panel.mhtml",
								round  => $round,
								person => 0,
								return => 1
							);

						} else{

							$m->comp("/panel/round/debate_judge_assign.mhtml",
								round          => $round,
								tourn          => $tourn,
								tourn_settings => \%tourn_settings,
								person         => 0,
								return         => 1
							);
						}

						$m->comp("/panel/round/rooms.mhtml",
							round          => $round,
							return         => 1,
							person         => 0,
							tourn          => $tourn,
							tourn_settings => \%tourn_settings,
						);
					}
				}

			} elsif (
				$aq_tag eq "prelim_results"
				&& (not defined $tourn_settings{'nsda_district'})
			) {

				$m->print("Pairing ".$round->realname." of ".$event->name." <br />");
				$m->flush_buffer();

				my $description = "Auto-created prelim results sheets for ".$event->abbr;

				$m->comp("/funclib/log.mas",
					type        => 'tabbing',
					event       => $event->id,
					tourn       => $tourn->id,
					person      => 0,
					description => $description
				);

				if (not defined $tourn_settings{'nsda_district'}) {
					# Prelim seeds for everyone
					$m->comp("/tabbing/publish/generate_results.mhtml",
						event          => $event,
						tourn          => $tourn,
						tourn_settings => \%tourn_settings,
						result_type    => "prelim_seed",
						return         => 1
					);
				}

				#Speakers if that's a thing
				if ($event->setting("speaker_protocol")) {
					$m->comp("/tabbing/publish/generate_results.mhtml",
						event          => $event,
						tourn          => $tourn,
						tourn_settings => \%tourn_settings,
						return         => 1,
						result_type    => "speakers"
					);
				}

			} elsif (
				$aq_tag eq "final_results"
				&& $tourn_settings{'nsda_district'}
			) {

				my $description = "Auto-created District Qualifiers sheets for ".$event->abbr;

				$m->comp("/funclib/log.mas",
					type        => 'tabbing',
					event       => $event->id,
					tourn       => $tourn->id,
					person      => 0,
					description => $description
				);

				$m->comp("/tabbing/results/nsda_qualifiers.mhtml",
					event_id       => $event->id,
					tourn          => $tourn,
					format         => "post",
					return         => 1,
					tourn_settings => \%tourn_settings,
					result_type    => "final"
				);

			} elsif ($aq_tag eq "final_results" && (not defined $tourn_settings{'nsda_nats'})) {

				my $description = "Auto-created final results sheets for ".$event->abbr;

				$m->comp("/funclib/log.mas",
					type        => 'tabbing',
					event       => $event->id,
					tourn       => $tourn->id,
					person      => 0,
					description => $description
				);

				$m->comp("/tabbing/publish/generate_results.mhtml",
					event          => $event,
					tourn          => $tourn,
					return         => 1,
					tourn_settings => \%tourn_settings,
					result_type    => "final"
				);

				$m->comp("/tabbing/publish/generate_results.mhtml",
					event          => $event,
					tourn          => $tourn,
					return         => 1,
					tourn_settings => \%tourn_settings,
					result_type    => "ndca"
				);

			} elsif ($aq_tag eq "toc_bids") {

				my $description = "Auto-created TOC bid sheets for ".$event->abbr;

				$m->comp("/funclib/log.mas",
					type        => 'tabbing',
					event       => $event->id,
					tourn       => $tourn->id,
					person      => 0,
					description => $description
				);

				$m->comp("/tabbing/publish/generate_results.mhtml",
					event          => $event,
					tourn          => $tourn,
					return         => 1,
					tourn_settings => \%tourn_settings,
					result_type    => "toc"
				);

			} elsif ($aq_tag eq "flip") {

				$m->print("Flipping ".$round->realname." of ".$event->name."<br />");
				$m->flush_buffer();

				my $result = $m->comp('/panel/schemat/flips.mhtml',
					target_id      => $round,
					property_name  => "round",
					setting_name   => "doall",
					tourn          => $tourn,
					auto           => 1
				);

			} elsif ($aq_tag eq "flip_1") {

				$m->print("Flipping ".$round->realname." Flight 1 of ".$event->name."<br />");
				$m->flush_buffer();

				my $result = $m->comp('/panel/schemat/flips.mhtml',
					target_id     => $round->id,
					property_name => "round",
					setting_name  => "doall",
					tourn         => $tourn,
					auto          => 1,
					related_thing => 1
				);

			} elsif ($aq_tag eq "flip_2") {

				$m->print("Flipping ".$round->realname." Flight 2 of ".$event->name."<br />");
				$m->flush_buffer();

				my $result = $m->comp('/panel/schemat/flips.mhtml',
					target_id     => $round->id,
					property_name => "round",
					setting_name  => "doall",
					tourn         => $tourn,
					auto          => 1,
					related_thing => 2
				);
			}

		};

		#Errors in an eval should still be reported

		if ($@) {

			my $mail = MIME::Lite->new(
				From    => 'error-handler@tabroom.com',
				To      => 'errors@tabroom.com',
				Subject => 'Autoqueue error',
				Data    => $@,
			);

            eval { $mail->send if $mail; };

            undef $@;
		}
	}

	$unlock_sth->execute();
	$unlock_sth->finish();

	$m->print("\n\nProcessed $counter autoqueue jobs\n");
	$m->abort();

</%init>
