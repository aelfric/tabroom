<%args>

</%args>
<%init>

	$m->clear_buffer();

	my $dbh = Tab::DBI->db_Main();

	my $wipe_unused = $dbh->prepare("delete from login where sha512 is null");
	$wipe_unused->execute();

	$wipe_unused = $dbh->prepare("delete from login where accesses = 0 and timestamp < '2021-03-01 00:00:00'");
	$wipe_unused->execute();

	$wipe_unused = $dbh->prepare("delete from login where last_access is NULL and timestamp < '2021-03-01 00:00:00'");
	$wipe_unused->execute();

	$wipe_unused->finish();

	my $dupes_sth = $dbh->prepare("
		select
			person.id, person.email,
			person2.id, person2.email,
			login.id, login.person, login.username, login.last_access

		from person, person person2, login

		where person.id != person2.id
			and person.email = login.username
			and login.person = person2.id
	");

	# Steal it back;  this is the only way to really be correct about it.  Only 26 of them

	my $dupe_update_sth = $dbh->prepare("update login set person = ? where id = ? ");
	$dupes_sth->execute();

	my $counter;

	while (
		my (
			$pid, $email, $p2_id, $p2_email,
			$login_id, $login_person, $login_username, $login_last_access
		) = $dupes_sth->fetchrow_array()
	) {
		$dupe_update_sth->execute($pid, $login_id);
		$counter++;
	}

	$dupes_sth->finish();

	$m->print("<p>Undid $counter login/username mismatches</p>");
	$m->flush_buffer();

	my $sth = $dbh->prepare("
		select
			person.id, person.email,
			login.id, login.username, login.sha512, login.last_access, login.accesses, login.pass_timestamp
		from person, login
		where person.id = login.person
	");

	$m->print("<h4>Querying all persons.  This will take time.</h4>");
	$m->flush_buffer();

	$sth->execute();

	$m->print("<h4>Shuffling into object</h4>");
	$m->flush_buffer();

	my %person;

	while (
		my (
			$person_id, $person_email,
			$login_id, $login_username, $login_password,
			$login_last_access, $login_accesses, $login_pass_timestamp
		) = $sth->fetchrow_array()
	) {

		$person{$person_id}{"email"} = lc($person_email);

		my $raw_access = $login_last_access;
		$raw_access =~ s/[\D_]//g;

		if (
			(not defined $person{$person_id}{"last_access"})
			|| ($person{$person_id}{"email"} eq $login_username)
			|| (
				$raw_access < $person{$person_id}{"raw_access"}
				&& ($person{$person_id}{"email"} ne $person{$person_id}{"username"})
			)
		) {
			$person{$person_id}{"login"}    = $login_id;
			$person{$person_id}{"username"} = $login_username;
			$person{$person_id}{"password"} = $login_password;

			$person{$person_id}{"raw_access"}     = $raw_access;
			$person{$person_id}{"last_access"}    = $login_last_access;
			$person{$person_id}{"accesses"}       = $login_accesses;
			$person{$person_id}{"pass_timestamp"} = $login_pass_timestamp;
		}

		$person{$person_id}{"login_counter"}++;
	}

	$m->print("<h4>Done with that. Now finding disagreements</h4>");

	my $update_sth = $dbh->prepare("update login set username = ? where id = ?");

	my $kill_spares_sth = $dbh->prepare("delete from login where person = ? and id != ?");

	my $insert_sth = $dbh->prepare("
		insert into person_setting (person, tag, value) VALUES(?, ?, ?)"
	);

	my $insert_date_sth = $dbh->prepare("
		insert into person_setting (person, tag, value, value_date)
			VALUES(?, ?, 'date', ?)"
	);

	my $remove_spares = $dbh->prepare("delete from login where person = ? and id != ? ");


	my $clear_decks_sth = $dbh->prepare("delete from person_setting where tag in ('last_access', 'accesses', 'pass_timestamp')");

	$clear_decks_sth->execute();

	undef $counter;

	$m->print("I have ".scalar(keys %person)." accounts so here we go");

	foreach my $pid (sort {$a <=> $b} keys %person) {

		if ($person{$pid}{"username"} ne $person{$pid}{"email"}) {
			$m->print("<p> ID $pid email ".$person{$pid}{"email"}." mismatch with ".$person{$pid}{"username"}." last access ".$person{$pid}{"last_access"}."</p>");
			$m->flush_buffer;
			$update_sth->execute($person{$pid}{"email"}, $person{$pid}{"login"});
		}

		if ($person{$pid}{"login_counter"} > 1) {
			$m->print("<p> ID $pid email ".$person{$pid}{"email"}." has multiple logins so deleting any that are not ".$person{$pid}{"login"}." ".$person{$pid}{"username"});
			$m->flush_buffer;
			$kill_spares_sth->execute($pid, $person{$pid}{"login"});
		}

		unless ($counter++ % 1000) {
			$m->print("<p>Done $counter accounts</p>");
			$m->flush_buffer;
		}

		foreach my $tag ("accesses") {
			$insert_sth->execute($pid, $tag, $person{$pid}{$tag});
		}

		foreach my $tag ("last_access", "pass_timestamp") {
			$insert_date_sth->execute($pid, $tag, $person{$pid}{$tag});
		}
	}

	my $update_all = $dbh->prepare("
		update person,login
			set person.password = login.sha512
			where person.id = login.person
	");

	$m->print("<h4>Updating all password hashes</h4>");
	$m->flush_buffer();

	$update_all->execute();

	$m->print("<h2>Fin.</h2>");
	$m->flush_buffer();

	$dbh();

</%init>
