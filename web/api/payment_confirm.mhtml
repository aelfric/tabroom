<%init>

	use Data::Dumper;
	use utf8;

	$m->clear_buffer();
	$r->content_type('application/json');

	my $remote_ip = $ENV{"REMOTE_ADDR"};

	unless ($remote_ip) {
		$remote_ip = $ENV{"HTTP_X_FORWARDED_FOR"};
	}

	my $ok;

	if ($remote_ip eq "127.0.0.1") {
		$ok++;
	}

	if (index($remote_ip, "192.168.37") != -1) {
		$ok++;
	}

	if (index($remote_ip, "10.19.25") != -1) {
		$ok++;
	}

	if (index($remote_ip, "162.247.129") != -1) {
		$ok++;
	}

	unless ($ok) {
		$m->print('{ "error": true, "message": "API Access Denied"}');
		$m->abort();
	}

	my $raw_body;
	$r->read($raw_body, $r->headers_in->{'Content-length'});

	my $content = $raw_body;

	unless ($content) {
		$m->print('{ "error": true, "message": "No content data sent"}');
		$m->abort();
	}

	my $jdata = eval {
		return JSON::decode_json($content);
	};

	unless ($jdata) {
		$m->print('{ "error": true, "message": "JSON data could not be parsed"}');
		$m->abort();
	}

	unless ($jdata->{tourn_id}) {
		$m->print('{ "error": true, "message": "JSON data contained no tournament ID"}');
		$m->abort();
	}

	unless ($jdata->{invoice_id}) {
		$m->print('{ "error": true, "message": "JSON data contained no invoice ID"}');
		$m->abort();
	}

	my $tourn = Tab::Tourn->retrieve($jdata->{tourn_id});
	my $invoice_id = $jdata->{"invoice_id"};
	my ($tid, $key) = split(/-/, $invoice_id);

	my %tourn_settings = $tourn->all_settings();
	my $carts = $tourn_settings{"store_carts"};

	unless ($carts->{$key}) {
		$m->print('{ "error": true, "message": "No invoice found for ID '.$key.'"}');
		$m->abort();
	}

	my $now = DateTime->now();

	$carts->{$key}{tabroom}   = $jdata->{items}{$Tab::nsda_product_codes->{"tabroom"}};
	$carts->{$key}{nc}        = $jdata->{items}{$Tab::nsda_product_codes->{"campus"}};
	$carts->{$key}{nco}       = $jdata->{items}{$Tab::nsda_product_codes->{"campus_observers"}};
	$carts->{$key}{"paid"}    = 1;
	$carts->{$key}{"paid_at"} = $now->datetime();

	$tourn->setting("tabroom_purchased", $tourn_settings{'tabroom_purchased'} + $carts->{$key}{"tabroom"});
	$tourn->setting("nc_purchased", $tourn_settings{'nc_purchased'} + $carts->{$key}{"nc"});
	$tourn->setting("nco_purchased", $tourn_settings{'nco_purchased'} + $carts->{$key}{"nco"});

	$tourn->setting("store_carts", "json", $carts);

	$m->print('{ "error": false, "message": "Invoice '.$tourn.'-'.$key.' marked as paid"}');
	$m->abort();

</%init>
