<%args>
	$session
	$school_id
</%args>
<%init>

	use Compress::Zlib;

	my $school = Tab::School->retrieve($school_id);

	my $tourn = $school->tourn;

	Tab::Ballot->set_sql( school_ballots => "
		select distinct ballot.*
		from ballot, entry, panel, round
		where entry.school = ?
			and entry.id = ballot.entry
			and ballot.panel = panel.id
			and panel.round = round.id
		and (
			round.post_primary > 0
			or round.post_secondary > 0
			or round.post_feedback > 0
		)
		order by entry.event, entry.code, entry.id, round.name
	");

	my @ballots = Tab::Ballot->search_school_ballots($school_id);

    my $now = DateTime->now;
    $now->set_time_zone($tourn->tz);

    my $name = $tourn->name."-".$school->short_name;
    $name =~ s/[\W_]//g;
    my $filename = "Ballots-$name-".$session->id;
    my $filepath = $Tab::file_root."tmp/".$filename;

    $m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		head     => 1,
		debug    => 1,
		array    => 1.6 );

    open (TEXOUT, ">>$filepath.tex");
	binmode(TEXOUT, ":utf8");
	my $current_entry;
	my $switch;

	foreach my $ballot (@ballots) {

		my $panel = $ballot->panel;
		my $judge = $ballot->judge;

		my $round = $panel->round;
		my $event = $round->event;

		my @scores = sort {$a->tag cmp $b->tag} $ballot->scores;
		my @entries = $m->comp("/funclib/panel_entries.mas", panel => $panel);

		my $aff_string = $panel->round->event->setting("aff_string");
		my $neg_string = $panel->round->event->setting("neg_string");

		$aff_string = "Aff" unless $aff_string;
		$neg_string = "Neg" unless $neg_string;

		unless ($ballot->entry->id == $current_entry) {

			if ($current_entry) {
				print TEXOUT "\\newpage\n";
			}

			$current_entry = $ballot->entry;

			print TEXOUT "\\textsb{\\Large ";
			print TEXOUT Tab::texify($current_entry->name)." Feedback} ";
			print TEXOUT "\\hfill ";
			print TEXOUT "\\textsb{\\large \\color{black!64} ";
			print TEXOUT Tab::texify($tourn->name) ." } ";
			print TEXOUT "\\bigskip\n";
			print TEXOUT "\\newline\n";
			print TEXOUT "\\small\n";

			undef $switch;

		}

		print TEXOUT "\\noindent\n";
		print TEXOUT "\\begin{tabular}{p{1.5in}p{1.5in}p{.5in}p{3in}}\n";
		print TEXOUT "\\rowcolor[rgb]{.92,.92,.94}\[5.5pt\]\[5.5pt\]\n";

		print TEXOUT "\\textsb{\\large ".Tab::texify($panel->round->realname)." } \\newline (";

		if ($ballot->side > 0) {
			print TEXOUT Tab::texify($aff_string).") & " if $ballot->side == 1;
			print TEXOUT Tab::texify($neg_string).") & " if $ballot->side == 2;
		} elsif ($ballot->speakerorder > 0) {
			print TEXOUT Tab::texify("Spoke ".Lingua::EN::Numbers::Ordinate::ordinate($ballot->speakerorder))." ) & " if $ballot->speakerorder > 0;
		}
		print TEXOUT Tab::texify("Judge ".$judge->first." ".$judge->last) if $judge;
		print TEXOUT " & ";

		my $rfd;
		my $comments;
		my $results;

		if ($round->post_primary > 0) {
			$results .= "FFT " if $ballot->forfeit;
			$results .= "BYE " if $ballot->bye;
			$results .= "BYE " if $panel->bye;
		}

		foreach my $score (
			sort {
				$a->student <=> $b->student
				|| $b->tag cmp $a->tag
			} @scores
		) {

			if ($round->post_feedback > 0) {
				if ($score->tag eq "rfd") {
					$rfd = Tab::Utils::uncompress($score->content);
					next;
				} elsif ($score->tag eq "comments") {
					$comments = Tab::Utils::uncompress($score->content);
					next;
				}
			}

			next if $score->tag eq "categories";

			if ($event->type eq "speech" || $event->type eq "congress" || $event->type eq "wudc") {

				if ($round->post_primary > 0) {

					if ($score->tag eq "rank") {
						$results .= $score->value." - ";
					}

				}

				if ($round->post_secondary > 0) {

					if ($score->tag eq "point") {
						$results .= $score->value." ";

					}
				}

			} else {

				if ($round->post_primary > 0) {

					if ($score->tag eq "winloss") {

						if ($score->value) {
							$results .= "W - ";
						} else {
							$results .= "L - ";
						}
					}
				}

				if ($round->post_secondary > 0) {

					if ($score->tag eq "point") {
						$results .= $score->value." ";
					}
					if ($score->tag eq "rank") {
						$results .= $score->value." ";
					}

					if ($score->tag eq "refute") {
						$results .= "R: ".$score->value." ";
					}
				}
			}
		}

		print TEXOUT Tab::texify($results)." & ";

		foreach my $opponent (@entries) {

			next if $opponent->id == $ballot->entry->id;

			print TEXOUT "\\parbox{.35in}{";
			if ($opponent->speaks) {
				print TEXOUT Tab::texify(Lingua::EN::Numbers::Ordinate::ordinate($opponent->speaks));
			} else {
				print TEXOUT "\\emph{ vs. } ";
			}
			print TEXOUT "} ";

			print TEXOUT Tab::texify($opponent->code);
			print TEXOUT "\\hfill\n";
			print TEXOUT Tab::texify($opponent->name);
			print TEXOUT "\\newline\n";
		}

		print TEXOUT "\\\\ \n \\end{tabular}\n \\smallskip\n \\newline\n";

		my $newline = "\\newline\n";

		my $strip = HTML::Strip->new();
		$rfd = $strip->parse($rfd);
		$rfd =~ s/[^[:ascii:]]//g;
		$rfd =~ s/^\s+//;
		$rfd =~ s/\s+$//;
		$rfd = Tab::texify($rfd);
		$rfd =~ s/\R/$newline/g;

		$comments = $strip->parse($comments);
		$comments =~ s/[^[:ascii:]]//g;
		$comments =~ s/^\s+//;
		$comments =~ s/\s+$//;
		$comments = Tab::texify($comments);
		$comments =~ s/\R/$newline/g;

		if ($rfd) {
			print TEXOUT "\\large{\\bf RFD}\n\n\\small\n";
			print TEXOUT $rfd;
		}

		if ($comments) {
			if ($rfd) {
				print TEXOUT "\\medskip \\newline\n";
			}
			print TEXOUT "\\large{\\bf Comments}\n\n\\small\n";
			print TEXOUT $comments;
		}

		if ($rfd || $comments) {
			print TEXOUT "\\bigskip \n \n";
		}

	}

    $m->comp("/funclib/printout.mas",
		tourn    => $tourn,
		filename => $filename,
		tail     => 1,
		array    => 1.6,
		debug    => 1
	);

</%init>
