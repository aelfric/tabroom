<%args>
	$person
	$tag
	$circuit         => undef
	$sweep_award     => undef
	$sweep_set       => undef
	$points          => undef
	$rev_points      => undef
	$rev_min         => undef
	$place           => 0
	$count           => "all"
	$protocol_id => 0
</%args>
<%init>

	my $msg;
	my $err;

	unless ($sweep_set) {
		$m->comp("/funclib/abort.mas",
			message => "No sweepstakes ruleset found"
		);
	}

	unless ($sweep_award) {
		$m->comp("/funclib/abort.mas",
			message => "No sweep award attached to ruleset ".$sweep_set->name
		);
	}

	unless ($circuit) {
		$m->comp("/funclib/abort.mas",
			message => "No circuit attached to award ".$sweep_award->name
		);
	}

	if ($points
		|| $rev_points
		|| $tag eq "manual"
		|| $tag eq "rev_seed"
		|| $tag eq "rev_per_rank"
		|| $tag eq "rev_per_comp_rank"
		|| $tag eq "nsda_place"
		|| $tag eq "nsda_rounds"
	) {

		my $err;

		undef ($protocol_id);
		$protocol_id = 0 unless $protocol_id;

		my $count_round;

		if ($count eq "specific" || $count eq "before_end" || $count eq "last_prelims") {
			$count_round = $ARGS{'count_round'};
			unless ($count_round) {
				$m->comp('/funclib/abort.mas',
					message => "You must select a specific round number for that to work"
				);
			}
		}

		if ($ARGS{"place_threshold"}) {
			$place = $ARGS{"place_threshold"};

		} elsif ($ARGS{"place_percent"}) {
			$place = $ARGS{"place_percent"};

		} elsif ($ARGS{"no_place"}) {
			$place = 0;

		} elsif ($ARGS{"rev_place"}) {
			$place = $ARGS{"rev_place"};

		} elsif ($ARGS{"rank"}) {
			$place = $ARGS{"rank"};

		} elsif ($ARGS{"rev_rank"}) {
			$place = $ARGS{"rev_rank"};
			$rev_min = $ARGS{"rev_min"};
			$rev_min = 0 unless $rev_min;
		}

		my $truncate = 0;

		if ($tag eq "cume" || $tag eq "cume_above") {
			$truncate = $ARGS{"truncate"} if $ARGS{"truncate"};
		}

		Tab::SweepRule->create({
			tag          => $tag,
			value        => $points,
			sweep_set    => $sweep_set->id,
			rev_min      => $rev_min,
			place        => $place,
			count        => $count,
			count_round  => $count_round,
			truncate     => $truncate,
			protocol => $protocol_id
		});

		$msg = "Sweepstakes rule made for $tag in $count rounds, place $place points $points reverse minimum $rev_min";
		my $now = DateTime->now();

		$m->comp("/funclib/log.mas",
			type        => 'tabbing',
			circuit     => $circuit->id,
			person      => $person->id,
			description => $msg
		);

	} else {

		$err = "You cannot create a sweepstakes rule without points";
	}

	$m->redirect("awards.mhtml?sweep_set_id=".$sweep_set->id."&default=rulesets&err=$err")

</%init>
