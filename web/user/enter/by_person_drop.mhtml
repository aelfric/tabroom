<%args>
	$school
	$person
	$student_id => undef
</%args>
<%init>

	my $tourn = $school->tourn;
	my $student = Tab::Student->retrieve($student_id);

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;
    my $now = DateTime->now;

	my @entries = $m->comp(
		"/funclib/student_entries.mas",
		student => $student,
		tourn   => $tourn
	);

	my $msg;

	my $tourn_fine_deadline   = $tourn->setting("fine_deadline");
	my $tourn_drop_fine       = $tourn->setting('drop_fine');
	my $tourn_drop_deadline   = $tourn->setting("drop_deadline");
	$tourn_drop_deadline   = $tourn->reg_end unless $tourn_drop_deadline;

	my $tourn_freeze_deadline = $tourn->setting("freeze_deadline");
	$tourn_freeze_deadline = $tourn->reg_end unless $tourn_freeze_deadline;

	my $track_changes = $tourn->setting("track_reg_changes");

	foreach my $entry (@entries) {

		my $event = $entry->event;

		my $drop_deadline;
		$drop_deadline = $event->setting("drop_deadline");
		$drop_deadline = $tourn_drop_deadline unless $drop_deadline;

		if ($drop_deadline < $now) {
			my $err = "The online drop deadline for this tournament has passed.  Please contact the tournament directly";
			$m->redirect("by_person.mhtml?student_id=$student_id&school_id=".$school->id."&err=$err");
		}

		my $freeze_deadline;
		$freeze_deadline = $event->setting("freeze_deadline");
		$freeze_deadline = $tourn_freeze_deadline unless $freeze_deadline;

		my $fine_deadline;
		$fine_deadline = $event->setting("fine_deadline");
		$fine_deadline = $tourn_fine_deadline unless $fine_deadline;

		my $drop_fine;

		if ($fine_deadline < $now) {
			$drop_fine = $event->setting('drop_fine');
			$drop_fine = $tourn_drop_fine unless $drop_fine;
		}

		if ($track_changes) {
			my $description = $person->first." ".$person->last." dropped ".$event->abbr." entry ".$entry->code." ".$entry->name;
			$description = $person->first." ".$person->last." un-dropped ".$event->abbr." entry ".$entry->code." ".$entry->name if $entry->dropped;

			$m->comp("/funclib/log.mas",
				tourn       => $tourn->id,
				school      => $school->id,
				type        => "registration",
				description => $description,
				person      => $person->id
			);
		}

		my $stu_count;


		my $name = $entry->name;
		$name =~ s/\&/and/g;

		my $msg = "Entry ".$name." dropped";
		my $drop_reason = "Dropped ". $entry->code ." by ".$person->last." after nuisance fine deadline";

		my @students;
		my $entry_id = $entry->id;

		unless ($freeze_deadline < $now) {
			@students = $entry->students();
		}

		if ($entry->dropped) {

			$entry->dropped(0);
			$entry->update;
			$entry->setting("dropped_at", "");

			my $fine = Tab::Fine->search(
				school => $entry->school->id,
				reason => $drop_reason
			)->first;

			$fine->delete if $fine;

		} else {

			unless ($entry->waitlist) {
				if ($drop_fine) {
					my $fine = Tab::Fine->create({
						school    => $entry->school->id,
						amount    => $drop_fine,
						reason    => $drop_reason,
						levied_at => $now,
						levied_by => $person->id
					});

					$msg .= "and drop fine of $drop_fine was levied";
				}
			}

			if ($freeze_deadline > $now) {

				$entry->delete();

			} else {

				$entry->dropped(1);
				$entry->update;
				$entry->setting("dropped_at", "date", $now);
				$entry->setting("dropped_by", $person->id);
			}
		}

		unless ($freeze_deadline < $now) {

			STUDENT:
			foreach my $student (@students) {

				next STUDENT if $m->comp("/funclib/student_entries.mas",
					tourn   => $tourn,
					student => $student
				);

				unless ($freeze_deadline < $now) {
					$stu_count++;
				}
			}
		}


		if ($stu_count) {
			my $individuals = $school->setting("individuals");
			$individuals -= $stu_count;
			$school->setting("individuals", $individuals);
		}

		$msg .= "<br />";
	}

	$m->redirect("by_person.mhtml?school_id=".$school->id."&msg=$msg");

</%init>
