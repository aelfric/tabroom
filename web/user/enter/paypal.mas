<%args>
	$person
	$tourn
	$tourn_settings
	$total
	$school
</%args>

%	my $payment_fee = Math::Round::nearest(.01, $total * .04);
%	my $new_total = $total + $payment_fee;

    <script src="https://www.paypal.com/sdk/js?client-id=<% $tourn_settings->{"paypal_client_id"} %>&currency=USD">
	</script>

    <!-- Set up a container element for the button -->
	<div class="full martopmuchmore rightalign">
		<span class="threefifths top explain biggish bluetext semibold martopmore">

			<p>
				IMPORTANT NOTE: Do not submit payment through PayPal if you have
				missing judge fines on your invoice, or the fines will be included
				in your payment total. The buttons on this page only allow payment
				in full, and transaction fees are not refundable.
			</p>

			<p>
				To make a partial payment via PayPal/credit card, add 4% to the amount,
				and go to <a href="<% $tourn_settings->{"paypal_url"} %>" target="_blank" noopener noreferrer><% $tourn_settings->{"paypal_url"} %></a>
				or send to <a href="mailto:<% $tourn_settings->{"paypal_email"} %>"><% $tourn_settings->{"paypal_email"} %></a>
			</p>

			<p>
				Please note that all online payments from this page are automatically
				subject to a non-refundable 4% handling fee, and PayPal does not refund
				transaction fees.
			</p>
		</span>
		<span class="third centeralign">
			<div id="paypal-button-container"></div>
		</span>
		<span class="tenth"></span>
	</div>

    <script>
		paypal.Buttons({
			createOrder: (data, actions) => {
				return actions.order.create({
					 "purchase_units": [{
						"custom_id": "<% $school->id %>",
						"amount": {
							"currency_code": "USD",
							"value": "<% $new_total %>",
							"breakdown": {
								"item_total": {
									"currency_code": "USD",
									"value": "<% $new_total %>",
								}
							}
						},
						"items": [
							{
								"name": "<% $tourn->name %> Registration Fees for <% $school->name %>",
								"description": "Tournament Fees for <% $school->name %>",
								"unit_amount": {
									"currency_code": "USD",
									"value": "<% $new_total %>"
								},
								"quantity" : 1,
							},
						]
					  }],
				});
			},

			// Finalize the transaction after payer approval
			onApprove: (data, actions) => {
				return actions.order.capture().then(function(orderData) {

                    orderData.person_id = <% $person->id %>
                    orderData.original_total = <% $total %>
					orderData.payment_fee = <% $payment_fee %>

                    try {
                        fetch('<% $Tab::url_prefix %>/v1/user/enter/payment', { method: 'POST', body: JSON.stringify(orderData), headers: { 'Content-Type': 'application/json' }});
                    } catch (err) {
                        console.log(err);
                        actions.redirect('<% $Tab::url_prefix %>/user/enter/fees.mhtml?school_id=<% $school->id %>&msg="Failure recording payment"');
                    }

                    actions.redirect('<% $Tab::url_prefix %>/user/enter/fees.mhtml?school_id=<% $school->id %>&msg="Thank you for your payment!"');
				});
			}
		}).render('#paypal-button-container');
	</script>

