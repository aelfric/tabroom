<%args>
	$person
	$tourn
	$tourn_settings
	$total
	$school
</%args>

%	my $payment_fee = Math::Round::nearest(.01, $total * .04);
%	my $new_total = $total + $payment_fee;

    <script
		src="https://www.paypal.com/sdk/js?client-id=<% $tourn_settings->{"paypal_client_id"} %>&currency=USD"
	>
	</script>

    <!-- Set up a container element for the button -->
	<div class="full martopmore rightalign">
		<span class="threefifths top explain biggish bluetext semibold martop">
			<p>
				IMPORTANT NOTE: Online payments will not include missing judge
				fees until and unless you have requested tournament hires and
				they have been approved if the tournament so requires.
			</p>

			<p>
				Payments will include a 4% non-refundable credit processing
				fee. Paypal does not refund transaction fees, so be sure
				you are paying the correct amount, as fees from overpayments will
				not be refunded. The minimum for an online payment is $10.
			</p>

		</span>
		<span class="twofifths martop">
			<div class="odd full leftalign">
				<span class="twothirds semibold redtext">
					<span class="spacer"></span>
					Payment amount
				</span>
				<span class="third rightalign marleft">
					<input
						id       = "paypal_base"
						type     = "number"
						step     = ".01"
						max      = "<% sprintf('%.2f', $total) %>"
						value    = "<% sprintf('%.2f', $total) %>"
						onChange = "calculateProcessing()";
					>
				</span>
			</div>
			<div class="even full leftalign">
				<span class="twothirds semibold redtext">
					<span class="spacer"></span>
					Processing Fee
				</span>
				<span
					class = "third rightalign code padvertmore padright smallish"
					id    = "processing"
				>
				</span>
			</div>
			<div class="odd full marbottom leftalign">
				<span class="twothirds semibold redtext">
					<span class="spacer"></span>
					Total Charge
				</span>
				<span
					class = "third rightalign code padvertmore padright smallish"
					id    = "new_total"
				>
				</span>
			</div>

			<div id="paypal-button-container"></div>
		</span>

		<span class="tenth"></span>
	</div>

    <script>

		$(document).ready( () => {
			calculateProcessing();
		});

		function calculateProcessing() {

			const max = parseFloat($('#paypal_base').attr('max'));
			let base  = parseFloat($('#paypal_base').val());

			if (max < base) {
				base = max;
				$('#paypal_base').val(base);
				alertify.alert('warning',
					'You may not pay more than the total entry fees online.  Missing judge fees are NOT tournament fees.  Request judge hires or meet judge obligations to make these fines disappear.');
			}

			if (base < 10) {
				base = 10;
				$('#paypal_base').val(base);
				alertify.alert('warning', 'The minimum amount for an online payment is $10');
			}

			const processing = base * .04;
			const total      = processing + base;

			$('#processing').html(processing.toFixed(2));
			$('#new_total').html(total.toFixed(2));
			$('#paypal-button-container').html('');

			const payPalOrder = makePayPalOrder(base, processing, total);
			paypal.Buttons(payPalOrder).render('#paypal-button-container');
		}

		function makePayPalOrder(base, processing, total)  {
			return {
				"value"         : $('#new_total').text().toString(),
				createOrder: (data, actions) => {
					return actions.order.create({
						 "purchase_units": [{
							"custom_id": "<% $school->id %>",
							"amount": {

								"currency_code" : "USD",
								"value"         : total,
								"breakdown": {
									"item_total": {
										"currency_code" : "USD",
										"value"         : total,
									}
								}
							},
							"items": [
								{
									"name"        : "<% $tourn->name %> Registration Fees for <% $school->name %>",
									"description" : "Tournament Fees for <% $school->name %>",
									"quantity"    : 1,
									"unit_amount": {
										"currency_code" : "USD",
										"value"         : total,
									},
								},
							]
						}],
					});
				},

				// Finalize the transaction after payer approval
				onApprove: (data, actions) => {
					return actions.order.capture().then(function(orderData) {

						orderData.person_id      = <% $person->id %>;
						orderData.original_total = base;
						orderData.payment_fee    = processing;

						try {
							fetch('<% $Tab::indexcards_url %>/v1/user/enter/paypal', {
								method  : 'POST',
								body    : JSON.stringify(orderData),
								headers : { 'Content-Type' : 'application/json' }
							});
						} catch (err) {
							console.log(err);
							actions.redirect('/user/enter/fees.mhtml?school_id=<% $school->id %>&msg="Failure recording payment"');
						}
						actions.redirect('/user/enter/fees.mhtml?school_id=<% $school->id %>&msg="Thank you for your payment!"');
					});
				}
			}
		}

	</script>
