<%args>
	$person
	$session
	$person_settings
</%args>
<%init>

	if ($session->su > 0) {
		$m->comp("/funclib/abort.mas",
			message => "You may not log into the cloud server admin while logged in as another user"
		);
	}

</%init>

	<& menu.mas,
		person          => $person,
		person_settings => $person_settings,
		whoami          => "servers"
	&>

	<div class="main">

		<div class="full flexrow ltborderbottom padvert">
			<span class="half nospace">
				<h4 class="nospace">
					Current Tabroom Server Status
				</h4>
			</span>
			<span class="half rightalign">
				<p class="semibold bluetext">The Burdt Button&trade;</p>
			</span>
		</div>

		<h6 class="ltborderbottom padtopmore padvert">
			Current User Numbers
		</h6>

		<div class='flexrow row'>
			<span class="third semibold padvert padleft">
				Total Active Tournaments
			</span>

			<span class="sixth" id="total_tournaments">
			</span>

			<span class="third semibold padleft">
				Active Users, Last 24 Hours
			</span>

			<span class="sixth" id="active_users">
			</span>
		</div>

		<div class='flexrow row'>
			<span class="third semibold padvert padleft">
				Current Tournament Competitors
			</span>

			<span class="sixth" id="active_students">
			</span>

			<span class="third semibold padleft">
				Current Tournament Judges
			</span>

			<span class="sixth" id="active_judges">
			</span>
		</div>

		<div class="full flexrow ltborderbottom padvert padtopmore">
			<span class="half">
				<h6 class="nospace">
					Current Server Status
				</h6>
			</span>

			<span class="half rightalign semibold">
				All numbers are percents of capacity
			</span>
		</div>

		<div class='flexrow full semibold ltyellow'>

			<span class="seventh padleft">
				Server
			</span>

			<span class="eighth centeralign smallish">
				State
			</span>

			<span class="tenth centeralign smallish">
				Uptime
			</span>

			<span class="tenth centeralign smallish">
				CPU 1m
			</span>

			<span class="tenth centeralign smallish">
				CPU 5m
			</span>

			<span class="tenth centeralign smallish">
				CPU 15m
			</span>

			<span class="tenth centeralign smallish">
				Mem Used
			</span>

			<span class="tenth centeralign smallish">
				Swap Used
			</span>

			<span class="eighth centeralign smallish">
				Reboot
			</span>
		</div>

		<div id="server_status">

		</div>

		<div class="full flexrow martopmore padvert ltborderbottom">
			<span class="half">
				<h6 class="nospace">
					Change Server Count
				</h6>
			</span>
			<span class="half rightalign semibold">
				Minimum total is 2.  Maximum is 16.
			</span>
		</div>

		<div class="row flexrow">
			<span class="threeeighths padleft">
				Increase the tabweb server count by
			</span>

			<span class="eighth" id="increase_max">
			</span>

			<span class="quarter">
				<input
					type = "number"
					id   = "increase_count"
					min  = 0
				>
			</span>

			<span class="quarter">
				<button
					class   = "buttonwhite bluetext invert semibold smallish padvertless half"
					onClick = "increaseCount();"
				>Launch Servers</button>
			</span>
		</div>

		<div class="row flexrow">

			<span class="threeeighths padleft">
				Decrease the tabweb server count by
			</span>

			<span class="eighth" id="decrease_max">
			</span>

			<span class="quarter">
				<input
					type = "number"
					id   = "decrease_count"
					min  = 0
				>
			</span>

			<span class="quarter">
				<button
					class   = "buttonwhite bluetext invert semibold smallish padvertless half"
					onClick = "decreaseCount();"
				>Destroy Servers</button>
			</span>
		</div>

		<div class="full flexrow martopmore padvert ltborderbottom">
			<span class="half">
				<h6 class="nospace">
					Some Notes
				</h6>
			</span>
			<span class="half rightalign semibold">
				The Nerd to English Dictionary
			</span>
		</div>

		<p>
			CPU Load figures reflect the number of processes actively running,
			or those waiting to be executed.  The time windows cover the last
			minute, the last 5, or the last 15 minutes.  If these figures get
			much above 150%, that server has more jobs than it can handle
			presently. If only one machine is running at 200% or more for a
			while, consider rebooting just that machine; it probably just has a
			stuck job on it. If ALL machines are running beyond capacity, then
			we likely have more traffic than our present machines can handle,
			and you should consider spinning up more.
		</p>

		<p>
			The three figures are given so you can see the trendline of load on
			the machine. If you find the 1m figures are low, 5m is higher, and
			15m is very high then the machine WAS under load, but it's getting
			better. The opposite pattern means our doom is growing.
		</p>

		<p>
			Memory usage can often stay at or near 100%, because machines that
			have been up for a long time will release memory only when another
			job asks for it. The tabroom-db machine in particular will almost
			always use 100% of its available memory; the system keeps the
			results of queries in memory in case someone runs the exact same
			query, unless some other query needs that memory.
		</p>

		<p>
			The real test of memory usage is the Swap Used figure. Swap is used
			when the machine actually needs more memory than it has to run its
			present jobs. It responds by writing some of what it needs to disk
			instead. Disk is many times slower than memory, so that hurts
			performance a lot.
		</p>

		<p>
			Some swap usage is typical for rarely-accessed data, but a machine
			using 50% or more of its swap, is likely overloaded and under
			strain, especially if load is also going up. Again, if one tabweb
			machine is doing that, a reboot can help. If all of them are, then
			launch more machines.
		<p>

		<p>
			haproxy is the border gateway that governs network connections
			between the outside world and all NSDA services. We've actually
			never seen it be the weak point before, but in theory it could be.
			If it is overwhelmed and everything else is fine, then Palmer or
			Hardy need to fix it; automatic reboots of that service are too
			risky.
		</p>

		<p>
			The tabroom-db machine is the central database server for all
			Tabroom. Its workload cannot be spread among multiple hosts for
			various reasons, though this will be more possible after the
			rewrite. If tabroom-db is under heavy CPU strain, and the tabweb
			machines are not, then that usually means some badly written
			queries are causing the issue and it has to be fixed by Palmer or
			Hardy. If this machine is swapping a lot and the tabweb servers are
			fine, then the database itself needs a restart (not the machine,
			just the service) which is a scary enough process that I haven't
			automated it yet.
		</p>

		<p>
			tabroom-replica is a running backup replica of the database. It is
			a much less powerful machine, and will often show heavy load numbers
			because backups are taken from this machine. But until we deploy
			the rewrite, the tabroom-replica machine's slow performance cannot
			affect the Tabroom site itself.
		</p>

	</div>

	<script>

		$(document).ready( () => {
			checkTabroomUsage();
			serverList();
			serverLoad();

			setInterval(checkTabroomUsage, 60000);
			setInterval(serverList, 15000);
			setInterval(serverLoad, 4000);
		});

		function checkTabroomUsage() {

			$.ajax({
				url         : '<% $Tab::indexcards_url %>/glp/servers/usage',
				type        : 'GET',
				crossDomain : true,
				xhrFields           : {
					withCredentials : true
				},
				success     : (usage) => {
					$(`#active_judges`).text(usage.judges);
					$(`#active_students`).text(usage.students);
					$(`#total_tournaments`).text(usage.tournaments);
					$(`#active_users`).text(usage.activeUsers);
				},
				failure : (err) => {
					alert.altertify('warning', err);
				}
			});
		};

		function serverList() {

			$.ajax({
				type        : 'GET',
				url         : '<% $Tab::indexcards_url %>/glp/servers/show',
				crossDomain : true,
				xhrFields : {
					withCredentials : true
				},
				success     : (rawservers) => {

					const servers = rawservers.sort( (a,b) => a.label > b.label ? 1 : -1 );

					for ( const server of servers) {

						if ($(`#${server.label}`).attr('server_type')) {

							$(`#${ server.label }_status`).text( server.status );

						} else {

							const row = `
								<div
									class       = "row flexrow"
									id          = "${ server.label }"
									server_type = "${ server.type }"
								>
									<span class="seventh semibold padleft padvert">
										${server.label}
									</span>

									<span class="eighth smallish semibold centeralign" id="${ server.label }_status">
										${server.status}
									</span>

									<span class="tenth smallish semibold centeralign" id="${ server.label }_uptime">
									</span>

									<span class="tenth centeralign smallish" id="${ server.label }_1m_cpu_load">
									</span>

									<span class="tenth centeralign smallish" id="${ server.label }_5m_cpu_load">
									</span>

									<span class="tenth centeralign smallish" id="${ server.label }_15m_cpu_load">
									</span>

									<span class="tenth centeralign smallish" id="${ server.label }_memory_total">
									</span>

									<span class="tenth centeralign smallish" id="${ server.label }_swap_total">
									</span>

									<span class="eighth centeralign smallish hidden" id="${ server.label }_reboot">
										<button
											id      = "${server.label}_reboot_button"
											class   = "buttonwhite orangetext invert fa fa-lg fa-refresh"
											onClick = "rebootLinode('${ server.linode_id }');"
											disabled
										></button>
									</span>
								</div>
							`;

							$('#server_status').append(row);

							if (server.tags.includes('tabweb')) {
								$(`#${server.label}_reboot`).removeClass('hidden');
								$(`#${server.label}_reboot_button`).prop('disabled', false);
							}
						}
					}

					fixVisual();
				},
				failure : (err) => {
					alert.altertify('warning', err);
				}
			});
		};

		function serverLoad() {

			$.ajax({
				type        : 'GET',
				url         : '<% $Tab::indexcards_url %>/glp/servers/status',
				crossDomain : true,
				xhrFields : {
					withCredentials : true
				},
				success : (servers) => {

					if (servers.tabwebCount) {
						$(`.tabweb_count`).text(servers.tabwebCount);

						const currentCount = parseInt(servers.tabwebCount);

						$(`#increase_count`).attr('max', (16 - currentCount));
						$(`#decrease_count`).attr('max', (currentCount - 2));

						$(`#increase_max`).text(`Up to ${16 - currentCount}`);
						$(`#decrease_max`).text(`Up to ${currentCount - 2}`);

						delete servers.tabwebCount;
					}

					Object.keys(servers).forEach( async (hostname) => {

						const server = servers[hostname];
						const serverType = $(`#${hostname}`).attr('server_type');

						const [style, dedicated, cpuCountString] = serverType.split('-');
						const cpuCount = parseFloat(cpuCountString);

						for (const load of ['1m_cpu_load', '5m_cpu_load', '15m_cpu_load']) {

							$(`#${hostname}_${load}`).removeClass('orangetext');
							$(`#${hostname}_${load}`).removeClass('redtext');
							$(`#${hostname}_${load}`).removeClass('semibold');

							const cpuLoad = parseFloat(server[load]);

							$(`#${hostname}_${load}`).attr('title', `Raw value: ${cpuLoad}`);
							const loadPercentage = ( cpuLoad / cpuCount ) * 100;

							$(`#${hostname}_${load}`).text(`${loadPercentage.toFixed(2)}`);

							if (loadPercentage > 50) {
								$(`#${hostname}_${load}`).addClass('orangetext');
							}

							if (loadPercentage > 100) {
								$(`#${hostname}_${load}`).addClass('orangetext');
								$(`#${hostname}_${load}`).addClass('semibold');
							}

							if (loadPercentage > 300) {
								$(`#${hostname}_${load}`).addClass('redtext');
								$(`#${hostname}_${load}`).addClass('semibold');
							}

						}

						const memoryPercentage = ( ((server['memory_total'] - server['memory_available'])/server['memory_total']) * 100);

						$(`#${hostname}_memory_total`).attr('title', `${server.memory_available.toFixed(2)}`);
						$(`#${hostname}_memory_total`).text(`${memoryPercentage.toFixed(2)}`);

						const swapPercentage = ( ((server['swap_total'] - server['swap_available'])/server['swap_total'] ) * 100);

						$(`#${hostname}_swap_total`).attr('title', `${server.swap_available.toFixed(2)}`);
						$(`#${hostname}_swap_total`).text(`${swapPercentage.toFixed(2)}`);

						$(`#${hostname}_uptime`).text(`${server.uptime.toFixed(2) } days`);
					});

				},
				failure : (err) => {
					alert.altertify('warning', err);
				}
			});
		};

		function rebootLinode(linodeId) {

			$.ajax({
				type        : 'GET',
				url         : `<% $Tab::indexcards_url %>/glp/servers/show/${linodeId}`,
				crossDomain : true,
				xhrFields : {
					withCredentials : true
				},
				success : (machine) => {

					const alertMessage = `You are about to reboot the server ${machine.label}.  This action will be logged.  It will take about 4-5 minutes before the machine is operational again.  If the problem is the result of a misconfiguration, there is a chance this operation fails and the machine does not come back up.  Are you sure?`;

					alertify.confirm("Please confirm", alertMessage, function(eventListener) {
						if (eventListener) {
							$.ajax({
								type        : 'POST',
								url         : `<% $Tab::indexcards_url %>/glp/servers/reboot/${machine.id}`,
								crossDomain : true,
								xhrFields : {
									withCredentials : true
								},
								success : (response) => {
									alertify.alert('Linode response:', response.message);
								},
								failure : (err) => {
									alertify.alert(`Error: ${err}`);
								},
							});
						} else {
							return;
						}
					}, function(no) { return; } );
				},

				failure : (err) => {
					alertify.alert(`Error: ${err}`);
				},
			});
		}

		function increaseCount() {

			const target = parseInt($(`#increase_count`).val());

			const max = parseInt($(`#increase_count`).attr('max'));

			if (target > max) {
				alertify.alert('Action Forbidden', `You cannot raise the server count past 16 machines`);
				$(`#increase_count`).val('');
				return;
			}

			const alertMessage = `You are about to add ${target} to the tabweb lineup.  This will take about 10 minutes before the machines are online.  This action also puts us on the hook for hosting fees for those machines.  And you can bet your ass we log who did this. Are you sure you want to proceed, <% $session->su ? $session->su->last : $person->last %>?`;

			alertify.confirm("Please confirm", alertMessage, function(eventListener) {
				if (eventListener) {

					$.ajax({
						type        : 'POST',
						url         : '<% $Tab::indexcards_url %>/glp/servers/changeCount',
						crossDomain : true,
						data	    : `{"target": ${target}}`,
						xhrFields : {
							withCredentials : true
						},
						success : (response) => {
							console.log(response);
							alertify.alert('Linode response:', response.message);
							if (response.destroyMe) {
								for (const hostname of response.destroyMe) {
									$(`#${hostname}`).remove();
								}
							}
						},
						failure : (err) => {
							alertify.alert(`Error: ${err}`);
						},
					});
				} else {
					return;
				}
			}, function(no) { return; } );
		}

		function decreaseCount() {

			const target = parseInt($(`#decrease_count`).val());
			const max = $(`#decrease_count`).attr('max');

			if (target > max) {
				alertify.alert('Action Forbidden', `You cannot lower the server count below 2 machines`);
				const target = $(`#decrease_count`).val('');
				return;
			}

			const alertMessage = `You are about to delete ${target} from the tabweb lineup.  This process will be very quick, but it will take about 10 minutes before new machines can be spun back up if you overshoot. Please do not cause Tabroom downtime by being overly aggressive here. And you can bet your ass we log who did this. Are you sure you want to proceed, <% $session->su ? $session->su->last : $person->last %>?`;

			alertify.confirm("Please confirm", alertMessage, function(eventListener) {

				if (eventListener) {
					$.ajax({
						type        : 'DELETE',
						url         : `<% $Tab::indexcards_url %>/glp/servers/changeCount/${target}`,
						crossDomain : true,
						data	    : `{"target": ${target}}`,
						xhrFields : {
							withCredentials : true
						},
						success : (response) => {
							console.log(response);
							alertify.alert('Linode response:', response.message);
							if (response.destroyMe) {
								for (const hostname of response.destroyMe) {
									$(`#${hostname}`).remove();
								}
							}
						},
						failure : (err) => {
							alertify.alert(`Error: ${err}`);
						},
					});
				} else {
					return;
				}
			}, function(no) { return; } );
		}

	</script>
