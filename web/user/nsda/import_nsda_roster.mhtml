<%args>
	$person
	$chapter_id => undef
	$return     => undef
</%args>
<%init>

	my $chapter = Tab::Chapter->retrieve($chapter_id) if $chapter_id;

	unless ($chapter) {
		$m->comp("/funclib/abort.mas", message => "No valid chapter ID sent: $chapter_id");
	}

    # Get the NSDA roster for the school

    my ($nsda_roster_ref, $raw) = $m->comp("/funclib/nsda/school_roster.mas", chapter => $chapter);

    my @nsda_roster = eval {
		return @{$nsda_roster_ref};
	};

    my @student_roster;

    foreach my $roster (@nsda_roster) {
        next unless $roster->{'role'} eq "Student";
        push @student_roster, $roster;
    }

    my %student_by_person_id = map {$_->{person_id} => $_} @student_roster;

	my $now = DateTime->now;
	my $school_year = $now->year;
	$school_year++ if $now->month > 8;

    my @students = Tab::Student->search_where(
		chapter   => $chapter->id,
		grad_year => { ">=", $school_year}
	);

    @students = sort {$a->last cmp $b->last} @students;

	# sorts already linked people to the bottom;
    @students = sort {length($a->nsda) <=> length($b->nsda)} @students;

	my %linked_students = map {$_->nsda => 1} @students;
	my %student_name = map { lc($_->first." ".$_->middle." ".$_->last." ".$_->grad_year) => 1} @students;

	my $count = 0;

	unless ($return) {

</%init>

	<div class="menu">

		<div class="sidenote">
			<h4>Navigation</h4>

			<a
				href="/user/chapter/students.mhtml?chapter_id=<% $chapter->id %>"
				class="blue full"
			>Return to Competitor Roster</a>
		</div>

	</div>

	<div class="main">

		<span class="pagehalf">

		<h5>Importing NSDA Student Roster</h5>

<%perl>

		$m->flush_buffer();
	}

	NSDA:
	foreach my $nsda_student (@student_roster) {

		if ($linked_students{$nsda_student->{person_id}}) {

			unless ($return) {
				$m->print("<p class='graytext nospace italic'><span class='spacer'></span>");
				$m->print($nsda_student->{"first"}." ".$nsda_student->{"last"}." is already on your roster</p>");
				$m->flush_buffer();
			}
			next;
		}

		# Prevent duplications.
		my $name = lc($nsda_student->{first}." ".$nsda_student->{middle}." ".$nsda_student->{last}." ".$nsda_student->{grad_year});

		if ($student_name{$name}) {
			unless ($return) {
				$m->print("<p class='graytext nospace italic'><span class='spacer'></span>");
				$m->print($nsda_student->{"first"}." ".$nsda_student->{"last"}." has the same name and grad year as a competitor on your roster. Link them to their NSDA membership instead.</p>");
				$m->flush_buffer();
			}
			next;
		}

		my $grad_year = $nsda_student->{grad_year};
		$grad_year = $school_year + 2 unless $grad_year;

		my $novice = 0;
		$novice = 1 if ($grad_year - $school_year) > 3;

		my $student = Tab::Student->create({
			first     => $nsda_student->{first},
			middle    => $nsda_student->{middle},
			last      => $nsda_student->{last},
			chapter   => $chapter->id,
			grad_year => $grad_year,
			novice    => $novice,
			retired   => 0,
			person    => 0,
			nsda      => $nsda_student->{person_id}
		});

		my $membership = $m->comp("/funclib/nsda/membership.mas", student => $student);

		if ($membership->{'email'}) {
			my $person = Tab::Person->search(email => $membership->{"email"})->first;

			unless ($person) {
				$person = Tab::Person->search(nsda => $membership->{"person_id"})->first;
			}

			if ($person) {
				$student->person($person->id);
				$student->update();
			}
		}
		$student_name{$name}++;

		unless ($return) {
			$m->print("<p>".$student->first." ".$student->last.", Class of ".$student->grad_year." imported</p>");
			$m->flush_buffer();
		}
		$count++;
	}

	return if $return;

</%perl>
		</span>

		<span class="pagehalf">
			<h5 class="bluetext">
				Import Complete
			</h5>

			<p class="bigger redtext">
				<% $count %> contestants imported from the NSDA to your roster.
			</p>

		</span>

	</div>
