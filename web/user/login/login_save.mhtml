<%args>
	$username   => undef
	$password   => undef
	$tourn_id   => undef
	$session_id => undef
	$url        => undef
</%args>
<%flags>
	inherit => undef
</%flags>
<%init>

	my $now = DateTime->now;

	my $session;
	my $person;
	my $sha_user;

	my $log = $now->mdy('/')." ".$now->hms;

	my $ip = $ENV{"HTTP_X_FORWARDED_FOR"};

	unless ($ip) {
		$ip = $ENV{"REMOTE_ADDR"};
	}

	if ($session_id) {

		$session = Tab::Session->retrieve($session_id);
		$person = $session->person;
		$log .= " Login attempt via cookie by ".$person->email." from ".$ip." ...." if $session->person;

	} else {

		$log .= " Login attempt by ".$username." from ".$ip." ....";

		$username =~ tr/[A-Z]/[a-z]/;
		$username =~ s/\s+//g;
		$password =~ s/\s+$//g;  #only you can prevent trailing whitespace.

		unless ($username) {
			my $err = "You must enter an email address or username.  Please try again.";
			Tab::log("Failed: no username entered. $log");
			$m->redirect("/user/login/login.mhtml?err=$err");
		}

		unless ($password) {
			my $err = "You must enter a password.  Please try again.";
			Tab::log("Failed: blank password.  $log");
			$m->redirect("/user/login/login.mhtml?err=$err");
		}

		$person = Tab::Person->search(email => $username)->first;

		unless ($person) {
			my $err = "Your email and/or password was not correct.  Please try again, ";
			$err .= "or use the Forgot Password link to refresh your password";

			Tab::log("Failed: no such person. $log");
			$m->redirect("/user/login/login.mhtml?err=$err");
		}

		if ($person->setting("banned")) {
			my $err = "You are not permitted access to Tabroom";
			Tab::log("REVOKED USER LOGIN: $log");
			$m->redirect("/user/login/login.mhtml?err=$err");
		}

		my $db_sha_crypt = $person->password;
		my $sha_crypt = crypt($password, $db_sha_crypt) if $db_sha_crypt;

		my $pass_ok;

		if ($sha_crypt && ($sha_crypt eq $db_sha_crypt)) {
			$pass_ok++;
		}

		if ($pass_ok) {

			# To maintain state, the cookie sha keys are encoded using a random
			# string set by the site.

			$session = Tab::Session->create( {
				person     => $person->id,
				ip         => $ip,
				created_at => $now
			});

			my $salt = $m->comp("/funclib/generate_randomstring.mas");
			$sha_user = crypt($session->id.$Tab::string, '$6$'.$salt);
			$session->userkey($sha_user);
			$session->update;

		} else {

			my $err = "Your login and/or password was not correct.  Please try again, or use the Forgot Password link to refresh your password";

			$person->setting("last_attempt", "date", $now);
			$person->setting("last_attempt_ip", $ip);
			$person->setting("last_attempt_agent", $ENV{HTTP_USER_AGENT});

			Tab::log("Failed: wrong password. $log");
			$m->redirect("/user/login/login.mhtml?err=$err");

		}
	}

	# let ppl use their computer & phone, but not share with the world...
	my $allowed_sessions = 3;

	# Admins need more:
	$allowed_sessions = 6 if $person->site_admin;

	# If you know enough to change this code go ahead and add yourself for more
	# login sessions.

	$allowed_sessions = 10 if $person->id == 1;

	foreach my $sess ( sort {$b->id <=> $a->id} $person->sessions) {
		$sess->delete() unless $allowed_sessions;
		$allowed_sessions--;
	}

	my $tokencookie;

	if ($r->hostname eq "www.tabroom.com" ) {

		$tokencookie = Apache2::Cookie->new(
			$r,
			-name     => 'TabroomToken',
			-value    => $sha_user,
			-expires  => '-1s',
			-domain   => '.tabroom.com',
			-secure   => 1,
			-path     => '/'
		);

		$tokencookie = Apache2::Cookie->new(
			$r,
			-name     => 'TabroomToken',
			-value    => $sha_user,
			-expires  => '+1024h',
			-domain   => 'www.tabroom.com',
			-secure   => 1,
			-path     => '/'
		);

	} else {

		$tokencookie = Apache2::Cookie->new(
			$r,
			-name     => 'TabroomToken',
			-value    => $sha_user,
			-secure   => 0,
			-path     => '/'
		);
	}

	my $result = $tokencookie->bake($r);
	$log .= " ....Succeeded: $result";

	Tab::log("$log");

	my $access_count = $person->setting('accesses');

	$person->setting('accesses', ($access_count + 1));

	my $la = $person->setting("last_access");
	my $limit = DateTime::Format::MySQL->parse_datetime("2021-01-01 00:00:00");

	if ( (not defined $la) || ($la->epoch < $limit->epoch)) {
		$m->comp("/funclib/ldap_person.mas",
			person => $person
		);
	}

	$person->setting('last_access', "date", $now);

	if ($ARGS{"return"} eq "judgesign") {
		$m->redirect("/index/tourn/judge_signups.mhtml?category_id=".$ARGS{"category_id"}."&tourn_id=".$ARGS{"tourn_id"});
	}

    $m->redirect("http://$url") if $url;
    $m->redirect("/index/register.mhtml?tourn_id=$tourn_id") if $tourn_id;
    $m->redirect("/user/home.mhtml");

</%init>

