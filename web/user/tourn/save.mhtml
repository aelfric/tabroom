<%args>
	$person
	$session
	$defaults
</%args>
<%init>

	my $request = $defaults->{"request"};
	delete $request->{"error"};
	delete $request->{"errors"};

	unless ($ARGS{"async"}
		|| $ARGS{"nsda_campus"}
		|| $ARGS{"site_name"}
		|| $ARGS{"site_id"}
	) {

		$request->{"error"} = "You must select an existing site, or give your site a name";

		$defaults->{"request"} = $request;
		$session->default($defaults);
		$m->redirect("location.mhtml");
	}

	foreach my $deadline (
		"start",
		"end",
		"reg_start",
		"reg_end",
		"frozen",
		"judge",
		"drops",
		"fines"
	) {
		$request->{$deadline."dt"} = eval {
			return Tab::dtme($request->{$deadline}, $request->{$deadline."time"});
		};
	}

	unless ($request->{"name"}) {
		$m->comp("/funclib/abort.mas", message => "Your tournament must have a name.");
	}

	unless ($request->{"test"}) {
		$request->{"test"} = 0;
	}

	my $tourn = Tab::Tourn->create( {
		name      => $request->{"name"},
		webname   => $request->{"webname"},
		city      => $request->{"city"},
		start     => $request->{"startdt"},
		end       => $request->{"enddt"},
		reg_start => $request->{"reg_startdt"},
		reg_end   => $request->{"reg_enddt"},
		hidden    => $request->{"test"},
		city      => $request->{"city"},
		state     => $request->{"state"},
		country   => $request->{"country"},
		tz        => $request->{"tz"}
	});

	$tourn->setting("freeze_deadline", "date", $request->{frozendt});
	$tourn->setting("fine_deadline", "date", $request->{finesdt});
	$tourn->setting("judge_deadline", "date", $request->{judgedt});
	$tourn->setting("drop_deadline", "date", $request->{dropsdt});
	$tourn->setting("created_by", $person->id);

	my $site;

	if ($ARGS{"site_id"}) {
		$site = Tab::Site->retrieve($ARGS{"site_id"});
	}

	unless ($site) {

		if ($ARGS{"site_name"}) {

			my @keys = keys %{$request->{"circuits"}};
			my $default_circuit = shift @keys if @keys;

			$ARGS{"online_site"} = 0 unless $ARGS{"online_site"};

			$site = Tab::Site->create({
				circuit => $default_circuit,
				host    => $person->id,
				online  => $ARGS{"online_site"},
				name    => $ARGS{"site_name"}
			});

			my $join = Tab::TournSite->create ({
				tourn => $tourn->id,
				site  => $site->id
			});
		}
	}

	if ($ARGS{"async"}) {
		$tourn->setting("async", 1);
	}

	if ($ARGS{"nsda_campus"}) {
		$tourn->setting("nsda_campus", 1);
	}

	if ($ARGS{"sync"}) {
		$tourn->setting("sync", 1);
	}

	Tab::Permission->create ({
		tourn  => $tourn->id,
		person => $person->id,
		tag    => 'contact'
	});

	Tab::Permission->create ({
		tourn  => $tourn->id,
		person => $person->id,
		tag    => 'owner'
	});

	foreach my $circuit (keys %{$request->{"circuits"}}) {

		my $approved = 0;

		$approved = 1 if $person->site_admin;

		$approved = 1 if Tab::CircuitSetting->search(
			circuit => $circuit,
			tag     => "autoapprove"
		)->first;

		$approved = 1 if Tab::Permission->search(
			tag     => "circuit",
			person  => $person->id,
			circuit => $circuit
		);

		my $join = Tab::TournCircuit->create ({
			tourn    => $tourn->id,
			circuit  => $circuit,
			approved => $approved
		});
	}

	# Create default tiebreaker sets

	my $protocol = Tab::Protocol->create({
		tourn => $tourn->id,
		name  => "Debate Prelims"
	});

	Tab::Tiebreak->create({
		name          => "winloss",
		protocol  => $protocol->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "points",
		protocol  => $protocol->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "points",
		protocol  => $protocol->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 2,
		multiplier    => 1,
		priority      => 3
	});

	Tab::Tiebreak->create({
		name          => "points",
		protocol  => $protocol->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 4
	});

	Tab::Tiebreak->create({
		name          => "opp_seed",
		protocol  => $protocol->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 5
	});

	Tab::Tiebreak->create({
		name          => "coinflip",
		protocol  => $protocol->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 6
	});

	$protocol = Tab::Protocol->create({
		tourn => $tourn->id,
		name => "Debate Elims"
	});

	Tab::Tiebreak->create({
		name          => "winloss",
		protocol  => $protocol->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	});

	$protocol->setting("equal_elims", "1");

	$protocol = Tab::Protocol->create({
		tourn => $tourn->id,
		name => "Debate Speakers"
	});

	Tab::Tiebreak->create({
		name          => "points",
		protocol  => $protocol->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "points",
		protocol  => $protocol->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 2,
		multiplier    => 1,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "points",
		protocol  => $protocol->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 3
	});

	Tab::Tiebreak->create({
		name          => "opp_wins",
		protocol  => $protocol->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 4
	});

	Tab::Tiebreak->create({
		name          => "judgevar2",
		protocol  => $protocol->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 5
	});

	Tab::Tiebreak->create({
		name          => "coinflip",
		protocol  => $protocol->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 6
	});

	$protocol = Tab::Protocol->create({
		tourn => $tourn->id,
		name => "Speech Prelims"
	});

	Tab::Tiebreak->create({
		name              => "ranks",
		protocol      => $protocol->id,
		count             => "prelim",
		highlow           => 0,
		highlow_count     => 0,
		multiplier        => 1,
		truncate_smallest => 1,
		priority          => 1
	});

	Tab::Tiebreak->create({
		name              => "reciprocals",
		protocol      => $protocol->id,
		count             => "prelim",
		highlow           => 0,
		highlow_count     => 0,
		multiplier        => 1,
		truncate_smallest => 1,
		priority          => 2
	});

	Tab::Tiebreak->create({
		name          => "points",
		protocol  => $protocol->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 3
	});

	$protocol->setting("forfeits_rank_last", "1");

	$protocol = Tab::Protocol->create({
		tourn => $tourn->id,
		name => "Speech Elims: Cumulative"
	});

	$protocol->setting("forfeits_rank_last", "1");

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol      => $protocol->id,
		count         => "final",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol      => $protocol->id,
		count         => "elim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol      => $protocol->id,
		count         => "prelim",
		highlow       => 4,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		protocol      => $protocol->id,
		count         => "final",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		protocol      => $protocol->id,
		count         => "elim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		protocol      => $protocol->id,
		count         => "prelim",
		highlow       => 4,
		highlow_count => 1,
		multiplier    => 1,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol      => $protocol->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 3
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		protocol      => $protocol->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 4
	});

	Tab::Tiebreak->create({
		name          => "judgepref",
		protocol      => $protocol->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 5
	});

	$protocol = Tab::Protocol->create({
		tourn => $tourn->id,
		name => "Speech Elims: Sudden Death"
	});

	$protocol->setting("forfeits_rank_last", "1");
	$protocol->setting("equal_elims", "1");

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol      => $protocol->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		protocol      => $protocol->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "judgepref",
		protocol      => $protocol->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 3
	});

	$protocol = Tab::Protocol->create({
		tourn => $tourn->id,
		name => "Congress Prelims"
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol  => $protocol->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "judgepref",
		protocol  => $protocol->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		protocol  => $protocol->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 3
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol  => $protocol->id,
		count         => "prelim",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		truncate      => 9,
		priority      => 4
	});

	Tab::Tiebreak->create({
		name          => "judgepref",
		protocol  => $protocol->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 5
	});

	Tab::Tiebreak->create({
		name          => "chair_ranks",
		protocol  => $protocol->id,
		count         => "prelim",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 6
	});

	$protocol->setting("forfeits_rank_last", "1");
	$protocol->setting("equal_elims", "1");

	$protocol = Tab::Protocol->create({
		tourn => $tourn->id,
		name => "Congress Elims"
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol  => $protocol->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 1
	});

	Tab::Tiebreak->create({
		name          => "judgepref",
		protocol  => $protocol->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 2
	});

	Tab::Tiebreak->create({
		name          => "reciprocals",
		protocol  => $protocol->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 3
	});

	Tab::Tiebreak->create({
		name          => "ranks",
		protocol  => $protocol->id,
		count         => "previous",
		highlow       => 1,
		highlow_count => 1,
		multiplier    => 1,
		truncate      => 9,
		priority      => 4
	});

	Tab::Tiebreak->create({
		name          => "judgepref",
		protocol  => $protocol->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		truncate      => 9,
		multiplier    => 1,
		priority      => 5
	});

	Tab::Tiebreak->create({
		name          => "chair_ranks",
		protocol  => $protocol->id,
		count         => "previous",
		highlow       => 0,
		highlow_count => 0,
		multiplier    => 1,
		priority      => 6
	});

	$protocol->setting("forfeits_rank_last", "1");
	$protocol->setting("equal_elims", "1");

	delete $defaults->{"request"};
	$session->default($defaults);

	$m->redirect("/user/tourn/confirm.mhtml?tourn_id=".$tourn->id);

</%init>

